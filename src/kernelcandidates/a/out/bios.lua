-- Generated by Haxe 4.3.6
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

-- Aligator billiard
-- Bordel pruser margaret
-- Ventilator multikabel
-- Freddy kruger imbecil
runfs = function(dir)
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.black)
    term.clear()
    term.setCursorPos(1, 1)
    term.write("Loading FS at " .. dir .. "\n")
    
    local oldfs = _G.fs
    function removeStartingDDot()
    end
    function od(olddir)
        
        if oldfs.combine(olddir:sub(1, 4)) == "disk" and oldfs.exists(olddir) and oldfs.isDir(olddir) and oldfs.isDriveRoot(olddir) then
            return olddir -- To keep disks
        end
        if oldfs.combine(olddir):sub(1, 3) == "rom" then
            return olddir -- Keep rom directory
        end
        return dir .. "/" ..  oldfs.combine(olddir) 
    end
    function death(state, message)
        term.setTextColor(colors.white)
        term.setBackgroundColor(colors.red)
        term.clear()
        term.setCursorPos(1, 1)
        local pf = nil
        if print then
            pf = print
        else
            pf = function(f) term.write(f) term.write("\n") end
        end
        pf("An error occured while running operating system")
        pf("During: " .. state)
        pf("Error: " .. message)
        if state == "Running OS" then
            pf("Send this error to your OS developer for further assistance.")
        else
            pf("Send this error to @mirko56 for further assistance.")
        end
        local x,y = term.getSize()
        for i = 10, 1, -1 do
            term.setCursorPos(2, y-1)
            pf("Rebooting in " .. i .. " seconds ")
            sleep(1)
        end
        os.reboot()
        while true do coroutine.yield() end
    end
    if not oldfs.exists(dir .. "/.bios.lua") then
        
        local biosf, e = http.get("https://raw.githubusercontent.com/cc-tweaked/CC-Tweaked/mc-1.20.x/projects/core/src/main/resources/data/computercraft/lua/bios.lua") -- HAHHAHA FUCK YOU CCPL LICENSE GFU
        if not biosf then
            death("Downloading bios", e)
        end
        local illegal = biosf.readAll()
        local biosfiled, bfde = oldfs.open(dir .. "/.bios.lua", "w")
        if not biosfiled then
            death("Writing bios", bfde)
        end
        biosfiled.write(illegal)
        biosf.close()
        biosfiled.close()
    end
    local fakefs = {
        complete = function(path, location, incf, incd)
            return oldfs.complete(path, od(location), incf, incd)
        end,
        find = function(path)
            local df = oldfs.find(dir .. "/" .. path)
            local of = {}
            for index, value in ipairs(df) do
                table.insert(of,value:sub(#dir+1))
                
            end
            return of
        end,
        isDriveRoot = function (path)
            if path == "" or path == "/" then return true end -- Fake the root path being a drive
            return oldfs.isDriveRoot(od(path))
        end,
        list = function(path)
            local out = oldfs.list(od(path))
            if oldfs.combine(path) == "" then
                table.insert(out, "rom")
                for index, value in ipairs(oldfs.list("/")) do
                    if value:sub(1,4) == "disk" and oldfs.isDir(value) and oldfs.isDriveRoot(value) then
                        table.insert(out, value)
                    end
                end
            end
            return out
        end,
        combine = oldfs.combine,
        getName = oldfs.getName,
        getDir = oldfs.getDir,
        getSize = function (path)
            return oldfs.getSize(od(path))
        end,
        exists = function(path)
            return oldfs.exists(od(path))
        end,
        isDir = function(path)
            return oldfs.isDir(od(path))
        end,
        isReadOnly = function(path)
            return oldfs.isReadOnly(od(path))
        end,
        makeDir = function(path)
            return oldfs.makeDir(od(path))
        end,
        move = function(path, dest)
            return oldfs.move(od(path), od(dest))
        end,
        copy = function(path, dest)
            return oldfs.copy(od(path), od(dest))
        end,
        delete = function(path)
            return oldfs.delete(od(path))
        end,
        open = function(path, mode)
            return oldfs.open(od(path), mode)
        end,
        getDrive = function(path)
            if oldfs.combine(path) == "" then
                return "hdd"
            end
            return oldfs.getDrive(od(path))
        end,
        getFreeSpace = function(path)
            return oldfs.getFreeSpace(od(path))
        end,
        getCapacity = function(path)
            return oldfs.getCapacity(od(path))
        end,
        attributes = function(path)
            return oldfs.attributes(od(path))
        end
    }
    local fileToRun = ""
    if oldfs.exists(dir .. "/startup.lua") then
        fileToRun = dir.."/startup.lua"
    else
        fileToRun = "/rom/programs/shell.lua"
    end
    local fd, fde = oldfs.open(fileToRun, "r")
    if not fd then
        death("Opening OS startup", fde)
    end
    local readed = fd.readAll()
    if not readed then
        death("Reading OS startup", "Unknown")
    end
    fd.close()
    local bfd, bfde = oldfs.open(fileToRun, "r")
    if not bfd then
        death("Opening BIOS", fde)
    end
    local breaded = bfd.readAll()
    if not breaded then
        death("Reading BIOS", "Unknown")
    end
    function fix(i, t)
        -- print(i)
        if type(t) == "table" and i ~= "_G" and i ~= "_ENV" then
            local newt = {}
            for key, value in pairs(t) do
                newt[key] = fix(key, value)
            end
            -- print(require("cc.pretty").pretty(newt))
            -- sleep(1)
            return newt
        end
        if type(t) == "function" then
            local ta = t
            pcall(setfenv, ta, env)
            return ta
        end
        return t
    end
    bfd.close()
    local env = {}
    for k,va in pairs(_G) do
        local v = va
        
        env[k] = fix(k, v)
        
    end
    env["fs"] = fakefs
    env["xe7oldfs"] = oldfs
    
    env["_G"] = env
    local deleteApis = {"io", "gps"}
    for index, value in ipairs(deleteApis) do
        env[value] = nil
    end
    for index,value in ipairs(deleteApis) do
        le = setmetatable({}, {__index = env})
        loadfile("/rom/apis/" .. value .. ".lua", "t", le)()
        env[value] = {}
        for index2, value2 in pairs(le) do
            if index ~= "_ENV" then
                env[value][index2] = value2
            end
        end
    end
    local lf, lfe = load("os.run(_G, \"/rom/programs/shell.lua\")", "startup.lua", "t", env)
    setfenv(lf, env)
    if not getfenv(lf)["xe7oldfs"] then
        death("Faking FS", "Environment failure")
    end
    if not lf then
        death("Running OS", lfe)
    end
    local st, ste = pcall(lf);
    -- if not st then
        death("Running OS", ste)
    -- end
end
local Array = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringTools = _hx_e()
__bios_Bios = _hx_e()
__drivers_keyboard_KeyboardDriver = _hx_e()
__drivers_keyboard_KeyboardDrv = _hx_e()
__drivers_keyboard_Keyboard = _hx_e()
__globals_Output = _hx_e()
__drivers_terminal_TerminalBackend = _hx_e()
__drivers_terminal_Terminal = _hx_e()
__bios__Bios_Bios_Fields_ = _hx_e()
__bios_menu_Entry = _hx_e()
__bios_menu_Menu = _hx_e()
__globals_Vector2i = _hx_e()
__globals_Vector2f = _hx_e()
__globals_Globals = _hx_e()
__globals_Color = _hx_e()
__globals_RGBColor = _hx_e()
__globals_Colors = _hx_e()
__globals_Input = _hx_e()
__haxe_Exception = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_io_Path = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__haxe_macro_Error = _hx_e()
__lua_Boot = _hx_e()
__lua_Thread = _hx_e()
__lua_UserData = _hx_e()
__lua_Lib = _hx_e()
__lua_lib_luv_fs_FileSystem = {
    sleep = function(n)
        n = n / 1000
        if _G.sleep ~= nil then
            sleep(n)
        else
            print("Sleeping for " .. tonumber(n))
            os.execute("sleep " .. tonumber(n))
        end

    end,
    run = function(mode) return false end,
    loop_alive = function() return false end,
    fs_unlink = function(path)
        x= fs.delete(path)
        if not x then return true end
    end,
    fs_mkdir = function(path)
        x=fs.makeDir(path)
        if not x then return true end

    end,
    fs_rmdir = function(path)
        x= fs.delete(path)
        if not x then return true end
    end,
    fs_readdir = function(path)
        return fs.list(path)
    end,
    fs_scandir = function(path)
        
        return {0, path}
    end,
    fs_scandir_next = function(dsci)
        dsci[1] = dsci[1] + 1
        
        return fs.list(dsci[2])[dsci[1]]
    end,
    fs_stat = function(path)
        if not fs.exists(path) then return nil end
        return fs.attributes(path)
    end,
    fs_rename = function(p, np)
        return fs.move(p, np)
    end,
    fs_sendfile = function(outfile, infile)
        return fs.copy(infile, outfile)
    end,
    fs_chmod = function(a,b) end,
    fs_chown = function(a,b,c) end,
    fs_utime = function(a,b,c) end,
    fs_lstat = function(path) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_link = function(p, a) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_symlink = function(p, a, m) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_readlink = function(p) error("Tried link operation") end, -- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation 
    fs_cwd = function()
        if shell then return shell.dir() else return "/" end
    end,
    fs_chdir = function(path)
        if shell then return shell.setDir(path) end
    end,
    fs_exepath = function(path)
        if shell then
            return shell.getRunningProgram()
        else
            return debug.getinfo(1, "S").source
        end
    end,
    fs_open = function(path, mode, _)
        local f = fs.open(path, mode)
        return {
            read = function(len, offset)
                if offset then
                    f.seek(offset)
                end
                local actuallyread = f.read(len)
                return #actuallyread, actuallyread
            end,
            write = function(data, offset)
                if offset then
                    f.seek(offset)
                else
                    f.seek(1)
                end
                f.write(data)
            end,
            close = function()
                f.close()
            end,
            stat = function ()
                return fs.attributes(path)
            end,
            sync = function () end, -- There doesn't seem to be an imlpementation for this function in computercraft
            datasync = function () end, -- Same as above
            utime = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            chmod = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            chown = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            truncate = function () end, -- Developer does not know what this means
        }

    end
}
__sys_FileSystem = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

StringTools.new = {}
StringTools.__name__ = true
StringTools.rpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  local str = Std.string(s);
  _G.table.insert(buf_b, str);
  buf_length = buf_length + #str;
  while (buf_length < l) do _hx_do_first_1 = false;
    
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  do return _G.table.concat(buf_b) end;
end

__bios_Bios.new = {}
__bios_Bios.__name__ = true
__bios_Bios.main = function() 
  __bios__Bios_Bios_Fields_.term:setBGColor(__globals_Colors.black);
  __bios__Bios_Bios_Fields_.term:clear();
  __bios__Bios_Bios_Fields_.term:setCursorPos(2, 2);
  __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.blue);
  local _g = 0;
  local _g1 = __bios__Bios_Bios_Fields_.lines;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local line = _g1[_g];
    _g = _g + 1;
    local _g = 0;
    local _g1 = #line;
    while (_g < _g1) do _hx_do_first_2 = false;
      
      _g = _g + 1;
      local i = _g - 1;
      if (_G.string.sub(line, i + 1, i + 1) ~= "X") then 
        __bios__Bios_Bios_Fields_.term:setBGColor(__globals_Colors.black);
      else
        __bios__Bios_Bios_Fields_.term:setBGColor(__globals_Colors.lightBlue);
      end;
      if (_G.string.sub(line, i + 1, i + 1) == "X") then 
        __bios__Bios_Bios_Fields_.term:write(" ");
      else
        __bios__Bios_Bios_Fields_.term:write(_G.string.sub(line, i + 1, i + 1));
      end;
    end;
    __bios__Bios_Bios_Fields_.term:write("\n");
    __bios__Bios_Bios_Fields_.term:setCursorPosRelative(1, 0);
  end;
  __bios__Bios_Bios_Fields_.term:write("\n");
  __bios__Bios_Bios_Fields_.term:setCursorPosRelative(1, 0);
  __bios__Bios_Bios_Fields_.term:setBGColor(__globals_Colors.black);
  __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.lightGray);
  __bios__Bios_Bios_Fields_.term:write("version ");
  __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.blue);
  __bios__Bios_Bios_Fields_.term:write(__globals_Globals.version);
  __bios__Bios_Bios_Fields_.term:write("\n");
  __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.gray);
  if (not __sys_FileSystem.exists("/systems")) then 
    __bios__Bios_Bios_Fields_.term:setCursorPosRelative(1, 0);
    __bios__Bios_Bios_Fields_.term:write("System-storing directory does not exist.");
    __sys_FileSystem.createDirectory("/systems");
  end;
  __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.blue);
  __bios__Bios_Bios_Fields_.term:setCursorPosRelative(1, 0);
  __bios__Bios_Bios_Fields_.term:write("Press any key to enter menu, or wait 2s to boot.");
  if (__bios__Bios_Bios_Fields_.kb:getNextKeyPress(2) ~= -1) then 
    local menu = __bios_menu_Menu.new("xe7bios Setup Utility");
    local buildPage1 = nil;
    buildPage1 = function() 
      menu.entries = _hx_tab_array({}, 0);
      menu:add(__bios_menu_Entry.new(Std.string("Architecture: ") .. Std.string(_G._VERSION), function(parent,index) 
        do return false end;
      end, false));
      menu:add(__bios_menu_Entry.new("", function(p,i) 
        do return false end;
      end, false));
      local _g = 0;
      local scandir = __lua_lib_luv_fs_FileSystem.fs_scandir("/systems");
      local itr = function() 
        local next = __lua_lib_luv_fs_FileSystem.fs_scandir_next(scandir);
        do return next end;
      end;
      local _g1 = __lua_Lib.fillArray(itr);
      while (_g < _g1.length) do _hx_do_first_1 = false;
        
        local i = _hx_tab_array({[0]=_g1[_g]}, 1);
        _g = _g + 1;
        menu:add(__bios_menu_Entry.new(i[0], (function(i) 
          do return function(parent,index) 
            runfs(Std.string("/systems/") .. Std.string(i[0]));
            do return true end;
          end end;
        end)(i), true, (function(i) 
          do return function(key) 
            if (key == 261) then 
              local _hx_1_ret_result, _hx_1_ret_message = __lua_lib_luv_fs_FileSystem.fs_rmdir(Std.string("/systems/") .. Std.string(i[0]));
              if (_hx_1_ret_result == nil) then 
                _G.error(__haxe_Exception.thrown(_hx_1_ret_message),0);
              end;
              buildPage1();
            end;
          end end;
        end)(i)));
      end;
      menu:add(__bios_menu_Entry.new("", function(p,i) 
        do return false end;
      end, false));
      menu:add(__bios_menu_Entry.new("Add new OS entry", function(parent,index) 
        local xi = 1;
        while (__sys_FileSystem.exists(Std.string("/systems/OS ") .. Std.string(xi))) do _hx_do_first_1 = false;
          
          xi = xi + 1;
        end;
        __sys_FileSystem.createDirectory(Std.string("/systems/OS ") .. Std.string(xi));
        buildPage1();
        do return false end;
      end, true));
      menu:add(__bios_menu_Entry.new("CraftOS Shell", function(parent,index) 
        __bios__Bios_Bios_Fields_.term:setBGColor(__globals_Colors.black);
        __bios__Bios_Bios_Fields_.term:setFGColor(__globals_Colors.white);
        __bios__Bios_Bios_Fields_.term:clear();
        __bios__Bios_Bios_Fields_.term:setCursorPos(1, 1);
        __bios__Bios_Bios_Fields_.term:write("To rename an OS, go to the systems/\n dir and rename sepcified directory.\n");
        error();
        do return false end;
      end, true));
    end;
    buildPage1();
    menu:run(__bios__Bios_Bios_Fields_.term, __bios__Bios_Bios_Fields_.kb, false);
  end;
  while (true) do _hx_do_first_1 = false;
    
    __bios__Bios_Bios_Fields_.term:write(Std.string(Std.string(__bios__Bios_Bios_Fields_.kb:getNextKeyPress())) .. Std.string("\n"));
  end;
end

__drivers_keyboard_KeyboardDriver.new = function() 
  local self = _hx_new(__drivers_keyboard_KeyboardDriver.prototype)
  __drivers_keyboard_KeyboardDriver.super(self)
  return self
end
__drivers_keyboard_KeyboardDriver.super = function(self) 
end
__drivers_keyboard_KeyboardDriver.__name__ = true
__drivers_keyboard_KeyboardDriver.prototype = _hx_e();

__drivers_keyboard_KeyboardDriver.prototype.__class__ =  __drivers_keyboard_KeyboardDriver

__drivers_keyboard_KeyboardDrv.new = function() 
  local self = _hx_new(__drivers_keyboard_KeyboardDrv.prototype)
  __drivers_keyboard_KeyboardDrv.super(self)
  return self
end
__drivers_keyboard_KeyboardDrv.super = function(self) 
  __drivers_keyboard_KeyboardDriver.super(self);
end
__drivers_keyboard_KeyboardDrv.__name__ = true
__drivers_keyboard_KeyboardDrv.prototype = _hx_e();
__drivers_keyboard_KeyboardDrv.prototype.getNextKeyPress = function(self,timeout) 
  if (timeout == nil) then 
    timeout = -1;
  end;
  local timerID = -1;
  if (timeout > 0) then 
    timerID = os.startTimer(timeout);
  end;
  while (true) do _hx_do_first_1 = false;
    
    local _hx_1_event_t1, _hx_1_event_t2, _hx_1_event_t3 = _G.coroutine.yield();
    if ((_hx_1_event_t1 == "timer") and (_hx_1_event_t2 == timerID)) then 
      do return -1 end;
    else
      if (_hx_1_event_t1 == "key") then 
        do return _hx_1_event_t2 end;
      end;
    end;
  end;
end

__drivers_keyboard_KeyboardDrv.prototype.__class__ =  __drivers_keyboard_KeyboardDrv
__drivers_keyboard_KeyboardDrv.__super__ = __drivers_keyboard_KeyboardDriver
setmetatable(__drivers_keyboard_KeyboardDrv.prototype,{__index=__drivers_keyboard_KeyboardDriver.prototype})

__drivers_keyboard_Keyboard.new = function() 
  local self = _hx_new(__drivers_keyboard_Keyboard.prototype)
  __drivers_keyboard_Keyboard.super(self)
  return self
end
__drivers_keyboard_Keyboard.super = function(self) 
  __drivers_keyboard_KeyboardDrv.super(self);
end
__drivers_keyboard_Keyboard.__name__ = true
__drivers_keyboard_Keyboard.prototype = _hx_e();

__drivers_keyboard_Keyboard.prototype.__class__ =  __drivers_keyboard_Keyboard
__drivers_keyboard_Keyboard.__super__ = __drivers_keyboard_KeyboardDrv
setmetatable(__drivers_keyboard_Keyboard.prototype,{__index=__drivers_keyboard_KeyboardDrv.prototype})

__globals_Output.new = function() 
  local self = _hx_new(__globals_Output.prototype)
  __globals_Output.super(self)
  return self
end
__globals_Output.super = function(self) 
  self.apalette = _hx_tab_array({[0]=__globals_RGBColor.new(236, 239, 244), __globals_RGBColor.new(0, 0, 0), __globals_RGBColor.new(180, 142, 173), __globals_RGBColor.new(0, 0, 0), __globals_RGBColor.new(235, 203, 139), __globals_RGBColor.new(163, 190, 140), __globals_RGBColor.new(0, 0, 0), __globals_RGBColor.new(173, 179, 187), __globals_RGBColor.new(216, 222, 187), __globals_RGBColor.new(136, 192, 208), __globals_RGBColor.new(0, 0, 0), __globals_RGBColor.new(129, 161, 193), __globals_RGBColor.new(0, 0, 0), __globals_RGBColor.new(163, 190, 140), __globals_RGBColor.new(191, 97, 106), __globals_RGBColor.new(59, 66, 82)}, 16);
end
__globals_Output.__name__ = true
__globals_Output.prototype = _hx_e();
__globals_Output.prototype.print = function(self,s) 
  local words = String.prototype.split(s, " ");
  local _g = 0;
  while (_g < words.length) do _hx_do_first_1 = false;
    
    local word = words[_g];
    _g = _g + 1;
    if ((self:getCursorPos().x + #word) > self:get_size().x) then 
      self:write("\n");
    end;
    self:write(Std.string(word) .. Std.string(" "));
  end;
end
__globals_Output.prototype.get_palette = function(self) 
  do return self.apalette end
end
__globals_Output.prototype.set_size = function(self,s) 
  do return self:get_size() end
end

__globals_Output.prototype.__class__ =  __globals_Output

__drivers_terminal_TerminalBackend.new = function() 
  local self = _hx_new(__drivers_terminal_TerminalBackend.prototype)
  __drivers_terminal_TerminalBackend.super(self)
  return self
end
__drivers_terminal_TerminalBackend.super = function(self) 
  __globals_Output.super(self);
  self:set_palette(self:get_palette());
end
__drivers_terminal_TerminalBackend.__name__ = true
__drivers_terminal_TerminalBackend.prototype = _hx_e();
__drivers_terminal_TerminalBackend.prototype.write = function(self,s) 
  local _g = 0;
  local _g1 = #s;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (_G.string.sub(s, i + 1, i + 1) == "\n") then 
      local _hx_1_o_x, _hx_1_o_y = term.getCursorPos();
      term.setCursorPos(1, _hx_1_o_y);
      self:setCursorPosRelative(0, 1);
    else
      term.write(_G.string.sub(s, i + 1, i + 1));
    end;
  end;
end
__drivers_terminal_TerminalBackend.prototype.clear = function(self) 
  term.clear();
end
__drivers_terminal_TerminalBackend.prototype.setFGColor = function(self,col) 
  term.setTextColor(col.bitASC);
end
__drivers_terminal_TerminalBackend.prototype.setBGColor = function(self,col) 
  term.setBackgroundColor(col.bitASC);
end
__drivers_terminal_TerminalBackend.prototype.setCursorPos = function(self,x,y) 
  term.setCursorPos(x, y);
end
__drivers_terminal_TerminalBackend.prototype.getCursorPos = function(self) 
  do return __globals_Vector2i.fromCPos(_hx_box_mr(_hx_table.pack(term.getCursorPos()), {"x", "y"})) end
end
__drivers_terminal_TerminalBackend.prototype.setCursorPosRelative = function(self,x,y) 
  local o = _hx_box_mr(_hx_table.pack(term.getCursorPos()), {"x", "y"});
  local o1 = o;
  o1.x = o1.x + x;
  local o1 = o;
  o1.y = o1.y + y;
  term.setCursorPos(o.x, o.y);
  if (o.y > _G.select(2, term.getSize())) then 
    term.scroll(((o.y - _G.select(2, term.getSize())) - 2) * -1);
    term.setCursorPos(o.x, _G.select(2, term.getSize()));
  end;
end
__drivers_terminal_TerminalBackend.prototype.get_size = function(self) 
  do return __globals_Vector2i.fromCPos(_hx_box_mr(_hx_table.pack(term.getSize()), {"x", "y"})) end
end
__drivers_terminal_TerminalBackend.prototype.set_palette = function(self,newc) 
  local i = 0;
  local _g = 0;
  while (_g < newc.length) do _hx_do_first_1 = false;
    
    local color = newc[_g];
    _g = _g + 1;
    self.apalette[i - 1] = color;
    term.setPaletteColor(Std.int(Math.max(_G.math.pow(2, i), 1)), color.red / 255.0, color.green / 255.0, color.blue / 255.0);
    i = i + 1;
  end;
  do return self.apalette end
end

__drivers_terminal_TerminalBackend.prototype.__class__ =  __drivers_terminal_TerminalBackend
__drivers_terminal_TerminalBackend.__super__ = __globals_Output
setmetatable(__drivers_terminal_TerminalBackend.prototype,{__index=__globals_Output.prototype})

__drivers_terminal_Terminal.new = function() 
  local self = _hx_new(__drivers_terminal_Terminal.prototype)
  __drivers_terminal_Terminal.super(self)
  return self
end
__drivers_terminal_Terminal.super = function(self) 
  __drivers_terminal_TerminalBackend.super(self);
end
__drivers_terminal_Terminal.__name__ = true
__drivers_terminal_Terminal.prototype = _hx_e();

__drivers_terminal_Terminal.prototype.__class__ =  __drivers_terminal_Terminal
__drivers_terminal_Terminal.__super__ = __drivers_terminal_TerminalBackend
setmetatable(__drivers_terminal_Terminal.prototype,{__index=__drivers_terminal_TerminalBackend.prototype})

__bios__Bios_Bios_Fields_.new = {}
__bios__Bios_Bios_Fields_.__name__ = true

__bios_menu_Entry.new = function(name,callback,selectable,onKey) 
  local self = _hx_new(__bios_menu_Entry.prototype)
  __bios_menu_Entry.super(self,name,callback,selectable,onKey)
  return self
end
__bios_menu_Entry.super = function(self,name,callback,selectable,onKey) 
  if (selectable == nil) then 
    selectable = false;
  end;
  self.name = "(empty)";
  self.selectable = false;
  self.name = name;
  self.callback = _hx_funcToField(callback);
  self.selectable = selectable;
  self.onKey = _hx_funcToField(onKey);
end
__bios_menu_Entry.__name__ = true
__bios_menu_Entry.prototype = _hx_e();
__bios_menu_Entry.prototype.callback = function(self,parent,index) 
  do return false end
end
__bios_menu_Entry.prototype.onKey = function(self,key) 
end

__bios_menu_Entry.prototype.__class__ =  __bios_menu_Entry

__bios_menu_Menu.new = function(name) 
  local self = _hx_new(__bios_menu_Menu.prototype)
  __bios_menu_Menu.super(self,name)
  return self
end
__bios_menu_Menu.super = function(self,name) 
  self.actualSelectedPos = 0;
  self.selectableEntriesCount = 0;
  self.scroll = 0;
  self.selected = 0;
  self.name = "(empty)";
  self.entries = _hx_tab_array({}, 0);
  self.name = name;
end
__bios_menu_Menu.__name__ = true
__bios_menu_Menu.prototype = _hx_e();
__bios_menu_Menu.prototype.redraw = function(self,out) 
  out:setBGColor(__globals_Colors.gray);
  out:clear();
  out:setCursorPos(1, 1);
  out:setBGColor(__globals_Colors.blue);
  out:setFGColor(__globals_Colors.black);
  if (#self.name > 40) then 
    out:write(Std.string(Std.string(" ") .. Std.string(String.prototype.substring(self.name, 0, out:get_size().x - 6))) .. Std.string("..."));
  else
    out:write(Std.string(" ") .. Std.string(self.name));
  end;
  out:write(StringTools.rpad("", " ", Std.int(out:get_size().x - Math.min(#self.name + 1, out:get_size().x - 3))));
  local index = -1;
  local _g_current = 0;
  local _g_array = self.entries;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    local _g_value = _g_array[_g_current];
    _g_current = _g_current + 1;
    local _g_key = _g_current - 1;
    local acti = _g_key;
    local value = _g_value;
    if (((acti - self.scroll) >= 0) and ((acti - self.scroll) <= out:get_size().y)) then 
      if (value.selectable) then 
        index = index + 1;
      end;
      if ((self.selected == index) and value.selectable) then 
        out:setBGColor(__globals_Colors.lightGray);
        out:setFGColor(__globals_Colors.black);
        self.actualSelectedPos = acti;
      else
        out:setBGColor(__globals_Colors.gray);
        out:setFGColor(__globals_Colors.white);
      end;
      out:setCursorPos(1, (acti + 3) - self.scroll);
      out:write(Std.string(Std.string(" ") .. Std.string(value.name)) .. Std.string(StringTools.rpad("", " ", Std.int(out:get_size().x - Math.min(#value.name + 1, out:get_size().x)))));
    end;
  end;
  self.selectableEntriesCount = index;
end
__bios_menu_Menu.prototype.run = function(self,out,keyboard,stopOnSelect) 
  if (stopOnSelect == nil) then 
    stopOnSelect = true;
  end;
  local running = true;
  self:redraw(out);
  while (running) do _hx_do_first_1 = false;
    
    local key = keyboard:getNextKeyPress();
    if (key == 264) then 
      self.selected = _G.math.fmod((self.selected + 1), (self.selectableEntriesCount + 1));
    end;
    if (key == 265) then 
      self.selected = self.selected - 1;
      if (self.selected < 0) then 
        self.selected = self.selectableEntriesCount;
      end;
    end;
    if (key == 257) then 
      local a = self.entries[self.actualSelectedPos];
      if (a:callback(self, self.actualSelectedPos)) then 
        break;
      end;
      if (stopOnSelect) then 
        break;
      end;
    end;
    if ((function() local __=self.entries[self.actualSelectedPos]; return _hx_bind(__,__.onKey) end)() ~= nil) then 
      self.entries[self.actualSelectedPos]:onKey(key);
    end;
    self:redraw(out);
  end;
  out:setFGColor(__globals_Colors.white);
  out:setBGColor(__globals_Colors.black);
  out:clear();
  out:setCursorPos(1, 1);
end
__bios_menu_Menu.prototype.add = function(self,entry) 
  local _this = self.entries;
  local pos = self.entries.length + 1;
  if (pos > _this.length) then 
    pos = _this.length;
  end;
  if (pos < 0) then 
    pos = _this.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = _this.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    _this[cur_len] = _this[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  _this[pos] = entry;
end

__bios_menu_Menu.prototype.__class__ =  __bios_menu_Menu

__globals_Vector2i.new = function(x,y) 
  local self = _hx_new(__globals_Vector2i.prototype)
  __globals_Vector2i.super(self,x,y)
  return self
end
__globals_Vector2i.super = function(self,x,y) 
  self.x = x;
  self.y = y;
end
__globals_Vector2i.__name__ = true
__globals_Vector2i.fromCPos = function(a) 
  do return __globals_Vector2i.new(a.x, a.y) end;
end
__globals_Vector2i.prototype = _hx_e();

__globals_Vector2i.prototype.__class__ =  __globals_Vector2i

__globals_Vector2f.new = function(x,y) 
  local self = _hx_new(__globals_Vector2f.prototype)
  __globals_Vector2f.super(self,x,y)
  return self
end
__globals_Vector2f.super = function(self,x,y) 
  self.x = x;
  self.y = y;
end
__globals_Vector2f.__name__ = true
__globals_Vector2f.prototype = _hx_e();

__globals_Vector2f.prototype.__class__ =  __globals_Vector2f

__globals_Globals.new = {}
__globals_Globals.__name__ = true

__globals_Color.new = function(palNumber,bitASC) 
  local self = _hx_new(__globals_Color.prototype)
  __globals_Color.super(self,palNumber,bitASC)
  return self
end
__globals_Color.super = function(self,palNumber,bitASC) 
  self.palNumber = palNumber;
  self.bitASC = bitASC;
end
__globals_Color.__name__ = true
__globals_Color.prototype = _hx_e();

__globals_Color.prototype.__class__ =  __globals_Color

__globals_RGBColor.new = function(r,g,b) 
  local self = _hx_new(__globals_RGBColor.prototype)
  __globals_RGBColor.super(self,r,g,b)
  return self
end
__globals_RGBColor.super = function(self,r,g,b) 
  self.red = r;
  self.green = g;
  self.blue = b;
end
__globals_RGBColor.__name__ = true
__globals_RGBColor.prototype = _hx_e();

__globals_RGBColor.prototype.__class__ =  __globals_RGBColor

__globals_Colors.new = {}
__globals_Colors.__name__ = true

__globals_Input.new = {}
__globals_Input.__name__ = true
__globals_Input.prototype = _hx_e();

__globals_Input.prototype.__class__ =  __globals_Input

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})

__haxe_io_Path.new = function(path) 
  local self = _hx_new(__haxe_io_Path.prototype)
  __haxe_io_Path.super(self,path)
  return self
end
__haxe_io_Path.super = function(self,path) 
  local path1 = path;
  if (path1) == "." or (path1) == ".." then 
    self.dir = path;
    self.file = "";
    do return end; end;
  local c1 = String.prototype.lastIndexOf(path, "/");
  local c2 = String.prototype.lastIndexOf(path, "\\");
  if (c1 < c2) then 
    self.dir = String.prototype.substr(path, 0, c2);
    path = String.prototype.substr(path, c2 + 1);
    self.backslash = true;
  else
    if (c2 < c1) then 
      self.dir = String.prototype.substr(path, 0, c1);
      path = String.prototype.substr(path, c1 + 1);
    else
      self.dir = nil;
    end;
  end;
  local cp = String.prototype.lastIndexOf(path, ".");
  if (cp ~= -1) then 
    self.ext = String.prototype.substr(path, cp + 1);
    self.file = String.prototype.substr(path, 0, cp);
  else
    self.ext = nil;
    self.file = path;
  end;
end
__haxe_io_Path.__name__ = true
__haxe_io_Path.directory = function(path) 
  local s = __haxe_io_Path.new(path);
  if (s.dir == nil) then 
    do return "" end;
  end;
  do return s.dir end;
end
__haxe_io_Path.addTrailingSlash = function(path) 
  if (#path == 0) then 
    do return "/" end;
  end;
  local c1 = String.prototype.lastIndexOf(path, "/");
  local c2 = String.prototype.lastIndexOf(path, "\\");
  if (c1 < c2) then 
    if (c2 ~= (#path - 1)) then 
      do return Std.string(path) .. Std.string("\\") end;
    else
      do return path end;
    end;
  else
    if (c1 ~= (#path - 1)) then 
      do return Std.string(path) .. Std.string("/") end;
    else
      do return path end;
    end;
  end;
end
__haxe_io_Path.prototype = _hx_e();

__haxe_io_Path.prototype.__class__ =  __haxe_io_Path

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayKeyValueIterator.prototype.next = function(self) 
  do return _hx_o({__fields__={value=true,key=true},value=self.array[self.current],key=(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()}) end
end

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__haxe_macro_Error.new = function(message,pos,previous) 
  local self = _hx_new(__haxe_macro_Error.prototype)
  __haxe_macro_Error.super(self,message,pos,previous)
  return self
end
__haxe_macro_Error.super = function(self,message,pos,previous) 
  __haxe_Exception.super(self,message,previous);
  self.pos = pos;
end
__haxe_macro_Error.__name__ = true
__haxe_macro_Error.prototype = _hx_e();

__haxe_macro_Error.prototype.__class__ =  __haxe_macro_Error
__haxe_macro_Error.__super__ = __haxe_Exception
setmetatable(__haxe_macro_Error.prototype,{__index=__haxe_Exception.prototype})

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Lib.new = {}
__lua_Lib.__name__ = true
__lua_Lib.fillArray = function(itr) 
  local i = nil;
  local ret = _hx_tab_array({}, 0);
  while (true) do _hx_do_first_1 = false;
    
    i = itr();
    if (not (i ~= nil)) then 
      break;
    end;
    ret:push(i);
  end;
  do return ret end;
end

__sys_FileSystem.new = {}
__sys_FileSystem.__name__ = true
__sys_FileSystem.exists = function(path) 
  if (path == nil) then 
    do return false end;
  else
    local _hx_1_res_result, _hx_1_res_message = __lua_lib_luv_fs_FileSystem.fs_stat(path);
    do return _hx_1_res_result ~= nil end;
  end;
end
__sys_FileSystem.createDirectory = function(path) 
  local path = __haxe_io_Path.addTrailingSlash(path);
  local _p = nil;
  local parts = _hx_tab_array({}, 0);
  while (true) do _hx_do_first_1 = false;
    
    _p = __haxe_io_Path.directory(path);
    if (not (path ~= _p)) then 
      break;
    end;
    parts:unshift(path);
    path = _p;
  end;
  local _g = 0;
  while (_g < parts.length) do _hx_do_first_1 = false;
    
    local part = parts[_g];
    _g = _g + 1;
    if (((_G.string.byte(part, (#part - 1) + 1) ~= 58) and not __sys_FileSystem.exists(part)) and not __lua_lib_luv_fs_FileSystem.fs_mkdir(part, 511)) then 
      _G.error(__haxe_Exception.thrown(Std.string("Could not create directory:") .. Std.string(part)),0);
    end;
  end;
end
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if nil then
  _hx_luv = {
    sleep = function(n)
        n = n / 1000
        if _G.sleep ~= nil then
            sleep(n)
        else
            print("Sleeping for " .. tonumber(n))
            os.execute("sleep " .. tonumber(n))
        end

    end,
    run = function(mode) return false end,
    loop_alive = function() return false end,
    fs_unlink = function(path)
        x= fs.delete(path)
        if not x then return true end
    end,
    fs_mkdir = function(path)
        x=fs.makeDir(path)
        if not x then return true end

    end,
    fs_rmdir = function(path)
        x= fs.delete(path)
        if not x then return true end
    end,
    fs_readdir = function(path)
        return fs.list(path)
    end,
    fs_scandir = function(path)
        
        return {0, path}
    end,
    fs_scandir_next = function(dsci)
        dsci[1] = dsci[1] + 1
        
        return fs.list(dsci[2])[dsci[1]]
    end,
    fs_stat = function(path)
        if not fs.exists(path) then return nil end
        return fs.attributes(path)
    end,
    fs_rename = function(p, np)
        return fs.move(p, np)
    end,
    fs_sendfile = function(outfile, infile)
        return fs.copy(infile, outfile)
    end,
    fs_chmod = function(a,b) end,
    fs_chown = function(a,b,c) end,
    fs_utime = function(a,b,c) end,
    fs_lstat = function(path) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_link = function(p, a) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_symlink = function(p, a, m) error("Tried link operation") end,-- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation
    fs_readlink = function(p) error("Tried link operation") end, -- This may be provided by your current os, but CraftOS or computercraft bios-level executed code do not have this operation 
    fs_cwd = function()
        if shell then return shell.dir() else return "/" end
    end,
    fs_chdir = function(path)
        if shell then return shell.setDir(path) end
    end,
    fs_exepath = function(path)
        if shell then
            return shell.getRunningProgram()
        else
            return debug.getinfo(1, "S").source
        end
    end,
    fs_open = function(path, mode, _)
        local f = fs.open(path, mode)
        return {
            read = function(len, offset)
                if offset then
                    f.seek(offset)
                end
                local actuallyread = f.read(len)
                return #actuallyread, actuallyread
            end,
            write = function(data, offset)
                if offset then
                    f.seek(offset)
                else
                    f.seek(1)
                end
                f.write(data)
            end,
            close = function()
                f.close()
            end,
            stat = function ()
                return fs.attributes(path)
            end,
            sync = function () end, -- There doesn't seem to be an imlpementation for this function in computercraft
            datasync = function () end, -- Same as above
            utime = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            chmod = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            chown = function () end, -- Might be provided by os, but not in craftos or cc bioslevel.
            truncate = function () end, -- Developer does not know what this means
        }

    end
};
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;__bios__Bios_Bios_Fields_.term = __drivers_terminal_Terminal.new();
  
  __bios__Bios_Bios_Fields_.kb = __drivers_keyboard_Keyboard.new();
  
  __bios__Bios_Bios_Fields_.lines = _hx_tab_array({[0]="X   X  XXX  XXXXX", " X X  X   X     X", "  X   XXXX     X ", " X X  X       X  ", "X   X  XXXX  X  bios"}, 5);
  
  __globals_Globals.version = "0.01x";
  
  __globals_Colors.white = __globals_Color.new(0, 1);
  
  __globals_Colors.orange = __globals_Color.new(1, 2);
  
  __globals_Colors.magenta = __globals_Color.new(2, 4);
  
  __globals_Colors.lightBlue = __globals_Color.new(3, 8);
  
  __globals_Colors.yellow = __globals_Color.new(4, 16);
  
  __globals_Colors.lime = __globals_Color.new(5, 32);
  
  __globals_Colors.pink = __globals_Color.new(6, 64);
  
  __globals_Colors.gray = __globals_Color.new(7, 128);
  
  __globals_Colors.lightGray = __globals_Color.new(8, 256);
  
  __globals_Colors.cyan = __globals_Color.new(9, 512);
  
  __globals_Colors.purple = __globals_Color.new(10, 1024);
  
  __globals_Colors.blue = __globals_Color.new(11, 2048);
  
  __globals_Colors.brown = __globals_Color.new(12, 4096);
  
  __globals_Colors.green = __globals_Color.new(13, 8192);
  
  __globals_Colors.red = __globals_Color.new(14, 16384);
  
  __globals_Colors.black = __globals_Color.new(15, 32768);
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_box_mr = function(x,nt)
    res = _hx_o({__fields__={}})
    for i,v in ipairs(nt) do
      res[v] = x[i]
    end
    return res
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  __bios_Bios.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
