-- Generated by Haxe 4.3.6
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();


---@type table
_G.package = {
    preload = {
        string = string,
        table = table,
        package = package,
        bit32 = bit32,
        bit = bit,
        coroutine = coroutine,
        utf8 = utf8,

    },
    isarcos = true,
    loaded = {

    },
    ---@type table<function>
    loaders = {
        ---@param name string
        ---@return function
        function(name)
            if not package.preload[name] then
                error("no field package.preload['" .. name .. "']")
            end
            return function()
                return package.preload[name]
            end
        end,
        ---@param name string
        ---@return function
        function(name)
            if not package.loaded[name] then
                error("no field package.loaded['" .. name .. "']")
            end
            return function()
                return package.loaded[name]
            end
        end,
        ---@param name string
        ---@return function
        function(name)
            local searchPaths = { "/", "/system/apis", "/apis" }
            local searchSuffixes = { ".lua", "init.lua" }
            if environ and environ.workDir then
                table.insert(searchPaths, environ.workDir)
            end
            for _, path in ipairs(searchPaths) do
                for _, suffix in ipairs(searchSuffixes) do
                    local file = path .. "/" .. name:gsub("%.", "/") .. suffix
                    if KDriversImpl.files.exists(file) then
                        local compEnv = {}
                        for k, v in pairs(_G) do
                            compEnv[k] = v
                        end
                        if path ~= "/apis" and path ~= "/system/apis" then
                            compEnv["apiUtils"] = nil
                            compEnv["xnarcos"] = nil
                            compEnv["KDriversImpl"] = nil
                        end

                        compEnv["_G"] = nil
                        setmetatable(compEnv, {
                            __index = function(t, k)
                                if k == "_G" then
                                    return compEnv
                                end
                            end,
                        })

                        local f, err = KDriversImpl.files.open(file, "r")
                        if not f then
                            error(err)
                        end
                        local compFunc, err = load(f.readAll(), file, nil, compEnv)
                        f.close()
                        if compFunc == nil then
                            error(err)
                        end
                        return compFunc
                    end
                end
            end
            error("Package not found.")
        end
    }
}

_G.require = function(modname)
    local errors = {}
    for _, loader in ipairs(package.loaders) do
        local ok, func = pcall(loader, modname)
        if ok then
            local f = func()
            package.loaded[modname] = f
            return f
        end
        table.insert(errors, func)
    end
    error("module '" .. modname .. "' not found:\n  " .. table.concat(errors, "\n  "))
end


local Array = _hx_e()
local Date = _hx_e()
local FileMode = _hx_e()
local Device = _hx_e()
local PeripheralDevice = _hx_e()
local Devices = _hx_e()
local FileAttributes = _hx_e()
local ColorMap = _hx_e()
local KernelConfig = _hx_e()
local Out = _hx_e()
__filesystem_Filesystem = _hx_e()
local WrappedFilesystem = _hx_e()
local FSElem = _hx_e()
local KFSDriver = _hx_e()
local HalFSDriver = _hx_e()
local Kernel = _hx_e()
local Lambda = _hx_e()
local Logger = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
local User = _hx_e()
local UserManager = _hx_e()
__filesystem_FileHandle = _hx_e()
__haxe_StackItem = _hx_e()
__haxe__CallStack_CallStack_Impl_ = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Json = _hx_e()
__haxe_Log = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe__Rest_Rest_Impl_ = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_crypto_Sha256 = _hx_e()
__haxe_ds_IntMap = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_format_JsonParser = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_io_Bytes = _hx_e()
__haxe_io_Encoding = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__haxe_macro_Error = _hx_e()
__lua_Boot = _hx_e()
__lua_Thread = _hx_e()
__lua_UserData = _hx_e()
__lua_PairTools = _hx_e()
__scheduler_TaskInfo = _hx_e()
__scheduler_Task = _hx_e()
__scheduler_Scheduler = _hx_e()
__syscall_Syscall = _hx_e()
__syscall_SyscallExtension = _hx_e()
__syscall_SyscallInterface = _hx_e()
__syscall__SyscallInterface_SyscallInterface_Fields_ = _hx_e()
__syscall_extensions_ArcosExtension = _hx_e()
__syscall_extensions_ExampleDevice = _hx_e()
__syscall_extensions_DeviceExtension = _hx_e()
__syscall_extensions__DeviceExtension_DeviceExtension_Fields_ = _hx_e()
__syscall_extensions_FilesystemExtension = _hx_e()
__syscall_extensions_TaskingExtension = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
Date.__name__ = true
Date.prototype = _hx_e();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date
_hxClasses["FileMode"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="Read","Write"},2)}
FileMode = _hxClasses["FileMode"];
FileMode.Read = _hx_tab_array({[0]="Read",0,__enum__ = FileMode},2)

FileMode.Write = _hx_tab_array({[0]="Write",1,__enum__ = FileMode},2)


Device.new = function() 
  local self = _hx_new(Device.prototype)
  Device.super(self)
  return self
end
Device.super = function(self) 
  self.types = _hx_tab_array({}, 0);
  self.name = "";
end
Device.__name__ = true
Device.prototype = _hx_e();
Device.prototype.name= nil;
Device.prototype.types= nil;
Device.prototype.dinterface= nil;
Device.prototype.getHandle= nil;

Device.prototype.__class__ =  Device

PeripheralDevice.new = function(peripheralName) 
  local self = _hx_new(PeripheralDevice.prototype)
  PeripheralDevice.super(self,peripheralName)
  return self
end
PeripheralDevice.super = function(self,peripheralName) 
  self.data = "";
  Device.super(self);
  local per = KDriversImpl.devc.get(peripheralName);
  if (per == nil) then 
    _G.error(__haxe_Exception.thrown("Invalid device."),0);
  end;
  self.dinterface = per;
  local length = nil;
  local tab = __lua_PairTools.copy(_hx_table.pack(KDriversImpl.devc.type(peripheralName)));
  local length = length;
  local tmp;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      tmp = _hx_tab_array(tab, length);
    else
      tmp = _hx_tab_array({}, 0);
    end;
  else
    tmp = _hx_tab_array(tab, length);
  end;
  self.types = tmp;
  self.name = peripheralName;
end
PeripheralDevice.__name__ = true
PeripheralDevice.prototype = _hx_e();
PeripheralDevice.prototype.data= nil;
PeripheralDevice.prototype.getHandle = function(self,mode) 
  _G.error(__haxe_Exception.thrown("This device does not support file handles"),0);
end

PeripheralDevice.prototype.__class__ =  PeripheralDevice
PeripheralDevice.__super__ = Device
setmetatable(PeripheralDevice.prototype,{__index=Device.prototype})

Devices.new = function(k) 
  local self = _hx_new(Devices.prototype)
  Devices.super(self,k)
  return self
end
Devices.super = function(self,k) 
  self.devices = _hx_tab_array({}, 0);
  self.kernel = k;
end
Devices.__name__ = true
Devices.prototype = _hx_e();
Devices.prototype.devices= nil;
Devices.prototype.kernel= nil;
Devices.prototype.add = function(self,dev) 
  local _g = 0;
  local _g1 = self.devices;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local device = _g1[_g];
    _g = _g + 1;
    if (device.name == dev.name) then 
      _G.error(__haxe_Exception.thrown("Device already exists"),0);
    end;
  end;
  self.devices:push(dev);
  Logger.log(Std.string("Device added: ") .. Std.string(dev.name), 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Devices.hx",lineNumber=55,className="Devices",methodName="add"}));
  local _g = 0;
  local _g1 = self.kernel.scheduler.tasks;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local task = _g1[_g];
    _g = _g + 1;
    task.taskQueue:push(_hx_tab_array({[0]="device_connected", dev.name}, 2));
  end;
end
Devices.prototype.remove = function(self,name) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.devices;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i.name ~= name) then 
      _g:push(i);
    end;
  end;
  self.devices = _g;
  Logger.log(Std.string("Device removed: ") .. Std.string(name), 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Devices.hx",lineNumber=62,className="Devices",methodName="remove"}));
  local _g = 0;
  local _g1 = self.kernel.scheduler.tasks;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local task = _g1[_g];
    _g = _g + 1;
    task.taskQueue:push(_hx_tab_array({[0]="device_disconnected", name}, 2));
  end;
end

Devices.prototype.__class__ =  Devices

FileAttributes.new = function() 
  local self = _hx_new(FileAttributes.prototype)
  FileAttributes.super(self)
  return self
end
FileAttributes.super = function(self) 
end
FileAttributes.__name__ = true
FileAttributes.prototype = _hx_e();
FileAttributes.prototype.size= nil;
FileAttributes.prototype.isDir= nil;
FileAttributes.prototype.isReadOnly= nil;
FileAttributes.prototype.created= nil;
FileAttributes.prototype.modified= nil;
FileAttributes.prototype.capacity= nil;
FileAttributes.prototype.driveRoot= nil;
FileAttributes.prototype.permissions= nil;

FileAttributes.prototype.__class__ =  FileAttributes

ColorMap.new = {}
ColorMap.__name__ = true
ColorMap.prototype = _hx_e();
ColorMap.prototype.white= nil;
ColorMap.prototype.orange= nil;
ColorMap.prototype.magenta= nil;
ColorMap.prototype.lightBlue= nil;
ColorMap.prototype.yellow= nil;
ColorMap.prototype.lime= nil;
ColorMap.prototype.pink= nil;
ColorMap.prototype.gray= nil;
ColorMap.prototype.lightGray= nil;
ColorMap.prototype.cyan= nil;
ColorMap.prototype.purple= nil;
ColorMap.prototype.blue= nil;
ColorMap.prototype.brown= nil;
ColorMap.prototype.green= nil;
ColorMap.prototype.red= nil;
ColorMap.prototype.black= nil;

ColorMap.prototype.__class__ =  ColorMap

KernelConfig.new = {}
KernelConfig.__name__ = true

Out.new = {}
Out.__name__ = true
Out.write = function(...) 
  local s = {...}
  local words = String.prototype.split(__haxe__Rest_Rest_Impl_.toArray(s):join(" "), " ");
  local comp = "";
  local tmp = term;
  local terminal = (function() 
    local _hx_1
    if (tmp ~= nil) then 
    _hx_1 = tmp; else 
    _hx_1 = KDriversImpl.terminal; end
    return _hx_1
  end )();
  local cpos_x = terminal.getCursorPos();
  local cpos_y = _G.select(2, terminal.getCursorPos());
  local _g_current = 0;
  local _g_array = words;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    local _g_value = _g_array[_g_current];
    _g_current = _g_current + 1;
    local _g_key = _g_current - 1;
    local index = _g_key;
    local word = _g_value;
    if ((cpos_x + #word) > terminal.getSize()) then 
      comp = Std.string(comp) .. Std.string("\n");
      cpos_x = 1;
      cpos_y = cpos_y + 1;
    end;
    local _g = 0;
    local _g1 = String.prototype.split(word, "");
    while (_g < _g1.length) do _hx_do_first_2 = false;
      
      local char = _g1[_g];
      _g = _g + 1;
      comp = Std.string(comp) .. Std.string(char);
      cpos_x = cpos_x + 1;
    end;
    if (index ~= (words.length - 1)) then 
      comp = Std.string(comp) .. Std.string(" ");
      cpos_x = cpos_x + 1;
    end;
  end;
  local pointer = 0;
  while (true) do _hx_do_first_1 = false;
    
    local char = _G.string.sub(comp, pointer + 1, pointer + 1);
    if (char == "") then 
      break;
    end;
    if (char == "\n") then 
      local _hx_2_cursorPos_x, _hx_2_cursorPos_y = terminal.getCursorPos();
      terminal.setCursorPos(1, _hx_2_cursorPos_y + 1);
      if (_G.select(2, terminal.getCursorPos()) > _G.select(2, terminal.getSize())) then 
        terminal.scroll(_G.select(2, terminal.getCursorPos()) - _G.select(2, terminal.getSize()));
        terminal.setCursorPos(1, _G.select(2, terminal.getSize()));
      end;
    else
      if (_G.string.byte(char, 1) == 11) then 
        pointer = pointer + 1;
        local command = _G.string.sub(comp, pointer + 1, pointer + 1);
        pointer = pointer + 1;
        local c2 = _G.string.sub(comp, pointer + 1, pointer + 1);
        local cn;
        local c2 = c2;
        if (c2) == "0" then 
          cn = KDriversImpl.terminal.pMap.white;
        elseif (c2) == "1" then 
          cn = KDriversImpl.terminal.pMap.orange;
        elseif (c2) == "2" then 
          cn = KDriversImpl.terminal.pMap.magenta;
        elseif (c2) == "3" then 
          cn = KDriversImpl.terminal.pMap.lightBlue;
        elseif (c2) == "4" then 
          cn = KDriversImpl.terminal.pMap.yellow;
        elseif (c2) == "5" then 
          cn = KDriversImpl.terminal.pMap.lime;
        elseif (c2) == "6" then 
          cn = KDriversImpl.terminal.pMap.pink;
        elseif (c2) == "7" then 
          cn = KDriversImpl.terminal.pMap.gray;
        elseif (c2) == "8" then 
          cn = KDriversImpl.terminal.pMap.lightGray;
        elseif (c2) == "9" then 
          cn = KDriversImpl.terminal.pMap.cyan;
        elseif (c2) == "a" then 
          cn = KDriversImpl.terminal.pMap.purple;
        elseif (c2) == "b" then 
          cn = KDriversImpl.terminal.pMap.blue;
        elseif (c2) == "c" then 
          cn = KDriversImpl.terminal.pMap.brown;
        elseif (c2) == "d" then 
          cn = KDriversImpl.terminal.pMap.green;
        elseif (c2) == "e" then 
          cn = KDriversImpl.terminal.pMap.red;
        elseif (c2) == "f" then 
          cn = KDriversImpl.terminal.pMap.black;else
        cn = KDriversImpl.terminal.pMap.white; end;
        if (command == "b") then 
          terminal.setBackgroundColor(cn);
        else
          if (command == "f") then 
            terminal.setTextColor(cn);
          end;
        end;
      else
        terminal.write(char);
      end;
    end;
    pointer = pointer + 1;
  end;
end
Out.print = function(...) 
  local s = {...}
  local result = __lua_PairTools.copy(s);
  _G.table.insert(result, "\n");
  Out.write(_hx_table.unpack(result));
end
Out.read = function(sReplaceChar,tHistory,fnComplete,sDefault) 
  if (sDefault == nil) then 
    sDefault = "";
  end;
  local _hx_1_cursorPos_x, _hx_1_cursorPos_y = KDriversImpl.terminal.getCursorPos();
  local xCutoff = (KDriversImpl.terminal.getSize() - _hx_1_cursorPos_x) - 1;
  local length = nil;
  local tab = __lua_PairTools.copy(tHistory);
  local length = length;
  local historyIndex;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      historyIndex = _hx_tab_array(tab, length);
    else
      historyIndex = _hx_tab_array({}, 0);
    end;
  else
    historyIndex = _hx_tab_array(tab, length);
  end;
  local historyIndex = historyIndex.length;
  KDriversImpl.terminal.setCursorPos(_hx_1_cursorPos_x, _hx_1_cursorPos_y + 1);
  local s = sDefault;
  local scroll = 0;
  local redraw = function() 
    KDriversImpl.terminal.setCursorBlink(true);
    KDriversImpl.terminal.setCursorPos(_hx_1_cursorPos_x, _hx_1_cursorPos_y);
    KDriversImpl.terminal.write(String.prototype.substr(s, scroll, xCutoff));
  end;
  while (true) do _hx_do_first_1 = false;
    
    local event = _hx_table.pack(KDriversImpl.pullEvent());
    if (event[0] == "key") then 
      if (event[1] == KDriversImpl.terminal.kMap.up) then 
        historyIndex = historyIndex - 1;
        if (historyIndex < 0) then 
          historyIndex = 0;
        end;
        local length = nil;
        local tab = __lua_PairTools.copy(tHistory);
        local length = length;
        local s1;
        if (length == nil) then 
          length = _hx_table.maxn(tab);
          if (length > 0) then 
            local head = tab[1];
            _G.table.remove(tab, 1);
            tab[0] = head;
            s1 = _hx_tab_array(tab, length);
          else
            s1 = _hx_tab_array({}, 0);
          end;
        else
          s1 = _hx_tab_array(tab, length);
        end;
        s = s1[historyIndex];
        redraw();
      end;
      if (event[1] == KDriversImpl.terminal.kMap.down) then 
        historyIndex = historyIndex + 1;
        local length = nil;
        local tab = __lua_PairTools.copy(tHistory);
        local length = length;
        local tmp;
        if (length == nil) then 
          length = _hx_table.maxn(tab);
          if (length > 0) then 
            local head = tab[1];
            _G.table.remove(tab, 1);
            tab[0] = head;
            tmp = _hx_tab_array(tab, length);
          else
            tmp = _hx_tab_array({}, 0);
          end;
        else
          tmp = _hx_tab_array(tab, length);
        end;
        if (historyIndex >= tmp.length) then 
          local length = nil;
          local tab = __lua_PairTools.copy(tHistory);
          local length = length;
          local historyIndex1;
          if (length == nil) then 
            length = _hx_table.maxn(tab);
            if (length > 0) then 
              local head = tab[1];
              _G.table.remove(tab, 1);
              tab[0] = head;
              historyIndex1 = _hx_tab_array(tab, length);
            else
              historyIndex1 = _hx_tab_array({}, 0);
            end;
          else
            historyIndex1 = _hx_tab_array(tab, length);
          end;
          historyIndex = historyIndex1.length - 1;
        end;
        local length = nil;
        local tab = __lua_PairTools.copy(tHistory);
        local length = length;
        local s1;
        if (length == nil) then 
          length = _hx_table.maxn(tab);
          if (length > 0) then 
            local head = tab[1];
            _G.table.remove(tab, 1);
            tab[0] = head;
            s1 = _hx_tab_array(tab, length);
          else
            s1 = _hx_tab_array({}, 0);
          end;
        else
          s1 = _hx_tab_array(tab, length);
        end;
        s = s1[historyIndex];
        redraw();
      end;
    end;
  end;
end

__filesystem_Filesystem.new = {}
__filesystem_Filesystem.__name__ = true
__filesystem_Filesystem.prototype = _hx_e();
__filesystem_Filesystem.prototype.open= nil;
__filesystem_Filesystem.prototype.list= nil;
__filesystem_Filesystem.prototype.exists= nil;
__filesystem_Filesystem.prototype.attributes= nil;
__filesystem_Filesystem.prototype.mkDir= nil;
__filesystem_Filesystem.prototype.move= nil;
__filesystem_Filesystem.prototype.copy= nil;
__filesystem_Filesystem.prototype.remove= nil;
__filesystem_Filesystem.prototype.getMountRoot= nil;
__filesystem_Filesystem.prototype.getPermissions= nil;

__filesystem_Filesystem.prototype.__class__ =  __filesystem_Filesystem

WrappedFilesystem.new = function(fsd,cut) 
  local self = _hx_new(WrappedFilesystem.prototype)
  WrappedFilesystem.super(self,fsd,cut)
  return self
end
WrappedFilesystem.super = function(self,fsd,cut) 
  self.cut = 0;
  self.cut = cut;
  self.root = fsd;
end
WrappedFilesystem.__name__ = true
WrappedFilesystem.prototype = _hx_e();
WrappedFilesystem.prototype.cut= nil;
WrappedFilesystem.prototype.root= nil;
WrappedFilesystem.prototype.open = function(self,path,mode) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:open(_g:slice(self.cut):join("/"), mode) end
end
WrappedFilesystem.prototype.list = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:list(_g:slice(self.cut):join("/")) end
end
WrappedFilesystem.prototype.exists = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:exists(_g:slice(self.cut):join("/")) end
end
WrappedFilesystem.prototype.attributes = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:attributes(_g:slice(self.cut):join("/")) end
end
WrappedFilesystem.prototype.mkDir = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  tmp:mkDir(_g:slice(self.cut):join("/"));
end
WrappedFilesystem.prototype.move = function(self,source,destination) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(source, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  local tmp1 = _g:slice(self.cut):join("/");
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(destination, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  tmp:move(tmp1, _g:slice(self.cut):join("/"));
end
WrappedFilesystem.prototype.copy = function(self,source,destination) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(source, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  local tmp1 = _g:slice(self.cut):join("/");
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(destination, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  tmp:copy(tmp1, _g:slice(self.cut):join("/"));
end
WrappedFilesystem.prototype.remove = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  tmp:remove(_g:slice(self.cut):join("/"));
end
WrappedFilesystem.prototype.getMountRoot = function(self,path) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(path, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:getMountRoot(_g:slice(self.cut):join("/")) end
end
WrappedFilesystem.prototype.getPermissions = function(self,file,user) 
  local tmp = self.root;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(file, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  do return tmp:getPermissions(_g:slice(self.cut):join("/"), user) end
end

WrappedFilesystem.prototype.__class__ =  WrappedFilesystem
WrappedFilesystem.__super__ = __filesystem_Filesystem
setmetatable(WrappedFilesystem.prototype,{__index=__filesystem_Filesystem.prototype})

FSElem.new = function(path,fs) 
  local self = _hx_new(FSElem.prototype)
  FSElem.super(self,path,fs)
  return self
end
FSElem.super = function(self,path,fs) 
  self.path = "";
  self.path = path;
  self.fs = fs;
end
FSElem.__name__ = true
FSElem.prototype = _hx_e();
FSElem.prototype.path= nil;
FSElem.prototype.fs= nil;

FSElem.prototype.__class__ =  FSElem

KFSDriver.new = function() 
  local self = _hx_new(KFSDriver.prototype)
  KFSDriver.super(self)
  return self
end
KFSDriver.super = function(self) 
  self.mounts = _hx_tab_array({}, 0);
end
KFSDriver.__name__ = true
KFSDriver.prototype = _hx_e();
KFSDriver.prototype.mounts= nil;
KFSDriver.prototype.getDrive = function(self,dir) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = String.prototype.split(dir, "/");
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i ~= "") then 
      _g:push(i);
    end;
  end;
  local fp = _g;
  self.mounts:sort(function(a,b) 
    do return #a.path - #b.path end;
  end);
  local _g = 0;
  local _g1 = self.mounts;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local mount = _g1[_g];
    _g = _g + 1;
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = String.prototype.split(mount.path, "/");
    while (_g1 < _g2.length) do _hx_do_first_2 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      if (i ~= "") then 
        _g:push(i);
      end;
    end;
    local mountPath = _g;
    if (mountPath == fp:slice(0, mountPath.length)) then 
      do return WrappedFilesystem.new(mount.fs, mountPath.length) end;
    end;
  end;
  local _g = 0;
  local _g1 = self.mounts;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local mount = _g1[_g];
    _g = _g + 1;
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = String.prototype.split(mount.path, "/");
    while (_g1 < _g2.length) do _hx_do_first_2 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      if (i ~= "") then 
        _g:push(i);
      end;
    end;
    local mountPath = _g;
    if (mountPath.length == 0) then 
      do return WrappedFilesystem.new(mount.fs, 0) end;
    end;
  end;
  _G.error(__haxe_Exception.thrown("No mount for path specified"),0);
end
KFSDriver.prototype.open = function(self,path,mode) 
  do return self:getDrive(path):open(path, mode) end
end
KFSDriver.prototype.list = function(self,path) 
  do return self:getDrive(path):list(path) end
end
KFSDriver.prototype.exists = function(self,path) 
  do return self:getDrive(path):exists(path) end
end
KFSDriver.prototype.attributes = function(self,path) 
  do return self:getDrive(path):attributes(path) end
end
KFSDriver.prototype.mkDir = function(self,path) 
  self:getDrive(path):mkDir(path);
end
KFSDriver.prototype.move = function(self,source,destination) 
  self:getDrive(source):move(source, destination);
end
KFSDriver.prototype.copy = function(self,source,destination) 
  self:getDrive(source):copy(source, destination);
end
KFSDriver.prototype.remove = function(self,path) 
  self:getDrive(path):remove(path);
end
KFSDriver.prototype.getMountRoot = function(self,path) 
  do return self:getDrive(path):getMountRoot(path) end
end
KFSDriver.prototype.getPermissions = function(self,file,user) 
  do return self:getDrive(file):getPermissions(file, user) end
end

KFSDriver.prototype.__class__ =  KFSDriver
KFSDriver.__super__ = __filesystem_Filesystem
setmetatable(KFSDriver.prototype,{__index=__filesystem_Filesystem.prototype})

HalFSDriver.new = function() 
  local self = _hx_new(HalFSDriver.prototype)
  HalFSDriver.super(self)
  return self
end
HalFSDriver.super = function(self) 
end
HalFSDriver.__name__ = true
HalFSDriver.prototype = _hx_e();
HalFSDriver.prototype.open = function(self,path,mode) 
  local _hx_1_fH_fHandle, _hx_1_fH_error = KDriversImpl.files.open(path, mode);
  local isopen = true;
  if (_hx_1_fH_fHandle == nil) then 
    _G.error(__haxe_Exception.thrown(_hx_1_fH_error),0);
  end;
  local fileh = __filesystem_FileHandle.new();
  fileh.close = function(self) 
    isopen = false;
    _hx_1_fH_fHandle.close();
   end;
  fileh.flush = function(self) 
    _hx_1_fH_fHandle.flush();
   end;
  fileh.read = function(self) 
    do return _hx_1_fH_fHandle.readAll() end
   end;
  fileh.write = function(self,data) 
    _hx_1_fH_fHandle.write(data);
   end;
  fileh.seek = function(self,whence,offset) 
    _hx_1_fH_fHandle.seek(whence, offset);
   end;
  fileh.readLine = function(self) 
    do return _hx_1_fH_fHandle.readLine() end
   end;
  fileh.readBytes = function(self,count) 
    do return _hx_1_fH_fHandle.read(count) end
   end;
  fileh.writeLine = function(self,data) 
    _hx_1_fH_fHandle.writeLine(data);
   end;
  fileh.getIfOpen = function(self) 
    do return isopen end
   end;
  do return fileh end
end
HalFSDriver.prototype.list = function(self,path) 
  local length = nil;
  local tab = __lua_PairTools.copy(KDriversImpl.files.list(path));
  local length = length;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      do return _hx_tab_array(tab, length) end;
    else
      do return _hx_tab_array({}, 0) end;
    end;
  else
    do return _hx_tab_array(tab, length) end;
  end;
end
HalFSDriver.prototype.exists = function(self,path) 
  do return KDriversImpl.files.exists(path) end
end
HalFSDriver.prototype.attributes = function(self,path) 
  do return KDriversImpl.files.attributes(path) end
end
HalFSDriver.prototype.mkDir = function(self,path) 
  KDriversImpl.files.mkDir(path);
end
HalFSDriver.prototype.move = function(self,source,destination) 
  KDriversImpl.files.copy(source, destination);
  KDriversImpl.files.unlink(source);
end
HalFSDriver.prototype.copy = function(self,source,destination) 
  KDriversImpl.files.copy(source, destination);
end
HalFSDriver.prototype.remove = function(self,path) 
  KDriversImpl.files.unlink(path);
end
HalFSDriver.prototype.getMountRoot = function(self,path) 
  do return "" end
end
HalFSDriver.prototype.getPermissions = function(self,file,user) 
  do return KDriversImpl.files.getPermissions(file, user) end
end

HalFSDriver.prototype.__class__ =  HalFSDriver
HalFSDriver.__super__ = __filesystem_Filesystem
setmetatable(HalFSDriver.prototype,{__index=__filesystem_Filesystem.prototype})

Kernel.new = function() 
  local self = _hx_new(Kernel.prototype)
  Kernel.super(self)
  return self
end
Kernel.super = function(self) 
  self.running = true;
end
Kernel.__name__ = true
Kernel.prototype = _hx_e();
Kernel.prototype.scheduler= nil;
Kernel.prototype.userManager= nil;
Kernel.prototype.rootFs= nil;
Kernel.prototype.running= nil;
Kernel.prototype.dm= nil;
Kernel.prototype.panic = function(self,err,file,line,stack,pi) 
  Logger.log("... Kernel panic ...", 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=362,className="Kernel",methodName="panic"}));
  Logger.log(Std.string("Error: ") .. Std.string(err), 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=363,className="Kernel",methodName="panic"}));
  if (pi ~= nil) then 
    Logger.log("This happened inside the kernel.", 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=365,className="Kernel",methodName="panic"}));
    Logger.log(Std.string("File: ") .. Std.string(pi.fileName), 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=366,className="Kernel",methodName="panic"}));
    Logger.log(Std.string("Line: ") .. Std.string(pi.lineNumber), 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=367,className="Kernel",methodName="panic"}));
  else
    Logger.log(Std.string("File: ") .. Std.string(file), 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=369,className="Kernel",methodName="panic"}));
    if (stack ~= nil) then 
      Logger.log("Stack:", 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=371,className="Kernel",methodName="panic"}));
      local _g = 0;
      local _g1 = String.prototype.split(_hx_wrap_if_string_field(__haxe__CallStack_CallStack_Impl_,'toString')(stack), "\n");
      while (_g < _g1.length) do _hx_do_first_1 = false;
        
        local item = _g1[_g];
        _g = _g + 1;
        if (StringTools.replace(item, " ", "") ~= "") then 
          Logger.log(item, 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=374,className="Kernel",methodName="panic"}));
        end;
      end;
    else
      Logger.log(Std.string("Line: ") .. Std.string(line), 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=378,className="Kernel",methodName="panic"}));
    end;
  end;
  Logger.log("", 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=381,className="Kernel",methodName="panic"}));
  Logger.log("... End kernel panic ...", 0, false, false, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=382,className="Kernel",methodName="panic"}));
  if (self.scheduler ~= nil) then 
    self.scheduler.tasks = _hx_tab_array({}, 0);
  end;
  self.running = false;
end
Kernel.prototype.run = function(self) 
  local usePreemption = true;
  KDriversImpl.terminal.clear();
  KDriversImpl.terminal.setCursorPos(1, 1);
  Logger.log(Std.string("Syne ") .. Std.string("Helica"), 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=395,className="Kernel",methodName="run"}));
  if ((debug == nil) or (debug.sethook == nil)) then 
    Logger.log("Platform doesn't support pre-emption, disabing.", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=397,className="Kernel",methodName="run"}));
    usePreemption = false;
  else
    Logger.log("Using preemption", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=400,className="Kernel",methodName="run"}));
    usePreemption = true;
  end;
  Logger.log("Creating filesystem", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=403,className="Kernel",methodName="run"}));
  self.rootFs = KFSDriver.new();
  self.rootFs.mounts:push(FSElem.new("", HalFSDriver.new()));
  Logger.log("Loading users", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=406,className="Kernel",methodName="run"}));
  self.userManager = UserManager.new(self);
  self.userManager:load();
  Logger.log("Creating scheduler", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=409,className="Kernel",methodName="run"}));
  self.scheduler = __scheduler_Scheduler.new(usePreemption, self);
  Logger.log("Managing devices", 1, nil, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=416,className="Kernel",methodName="run"}));
  self.dm = Devices.new(self);
  local _g = 0;
  local length = nil;
  local tab = __lua_PairTools.copy(KDriversImpl.devc.list());
  local length = length;
  local _g1;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      _g1 = _hx_tab_array(tab, length);
    else
      _g1 = _hx_tab_array({}, 0);
    end;
  else
    _g1 = _hx_tab_array(tab, length);
  end;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local s = _g1[_g];
    _g = _g + 1;
    self.dm:add(PeripheralDevice.new(s));
  end;
  self.scheduler.tasks[self.scheduler:addTask("B", function() 
    local _hx_status, _hx_result = pcall(function() 
    
        
					local env = {}
					local path = "/apps/init.lua"
					local compEnv = {}
					for k, v in pairs(_G) do
						compEnv[k] = v
					end
					for k, v in pairs(env) do
						compEnv[k] = v
					end
					compEnv["apiUtils"] = nil
					compEnv["KDriversImpl"] = nil
					compEnv["xnarcos"] = nil
					compEnv["_G"] = nil
					compEnv["write"] = Out.write
					compEnv["print"] = Out.print
					compEnv.tasking = require("tasking")
					compEnv.arcos = require("arcos")
					compEnv.devices = require("devices")
					compEnv.sleep = compEnv.arcos.sleep

					setmetatable(compEnv, {
						__index = function(t, k)
							if k == "_G" then
								return compEnv
							end
						end,
					})
					local f, e = KDriversImpl.files.open(path, "r")
					if not f then print(e) return end
					local compFunc, err = load(f.readAll(), path, nil, compEnv)
					f.close()
					if compFunc == nil then
						error(err)
					else
						setfenv(compFunc, compEnv)
						local ok, err = pcall(compFunc)
						print(err)
					end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      local e = __haxe_Exception.caught(_g);
      __haxe_Log.trace(e, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Kernel.hx",lineNumber=463,className="Kernel",methodName="run"}));
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end)].pInfo.out = KDriversImpl.terminal;
  
			_G.write = Out.write
			_G.print = Out.print
			;
  while (self.running) do _hx_do_first_1 = false;
    
    self.scheduler:tick();
  end;
  while (true) do _hx_do_first_1 = false;
    
    _G.coroutine.yield();
  end;
end

Kernel.prototype.__class__ =  Kernel

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do _hx_do_first_1 = false;
    
    local x = x:next();
    if (x == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Logger.new = {}
Logger.__name__ = true
Logger.log = function(message,level,useDebug,showPos,posInfos) 
  if (showPos == nil) then 
    showPos = true;
  end;
  if (useDebug == nil) then 
    useDebug = false;
  end;
  local posstr = "";
  if (showPos) then 
    if ((posInfos ~= nil) and not useDebug) then 
      posstr = Std.string(Std.string(Std.string(Std.string("") .. Std.string(posInfos.fileName)) .. Std.string(":")) .. Std.string(posInfos.lineNumber)) .. Std.string(" ");
    else
      if (debug ~= nil) then 
        local dInfo = debug.getinfo(2);
        posstr = Std.string(Std.string(Std.string(Std.string("") .. Std.string(dInfo.source)) .. Std.string(":")) .. Std.string(dInfo.currentline)) .. Std.string(": ");
      end;
    end;
  end;
  local ut = KDriversImpl.computer.uptime();
  local logStr = Std.string(Std.string(Std.string(Std.string("[") .. Std.string(StringTools.rpad(Std.string(Std.string(ut) .. Std.string("")) .. Std.string(((function() 
    local _hx_1
    if (_G.math.floor(ut) == ut) then 
    _hx_1 = ".0"; else 
    _hx_1 = ""; end
    return _hx_1
  end )())), "0", 4 + #(Std.string("") .. Std.string(_G.math.floor(ut)))))) .. Std.string("] ")) .. Std.string(message)) .. Std.string("\n");
  local tmp = Logger;
  tmp.kLog = Std.string(tmp.kLog) .. Std.string(logStr);
  if (level >= KernelConfig.logLevel) then 
    Out.write(logStr);
  end;
end

Main.new = {}
Main.__name__ = true
Main.main = function() 
  local k = Kernel.new();
  local _hx_status, _hx_result = pcall(function() 
  
      k:run();
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    local e = __haxe_Exception.caught(_g);
    k:panic(Std.string("Kernel error: ") .. Std.string(e:toString()), "Kernel", 0, e:get_stack(), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/Main.hx",lineNumber=9,className="Main",methodName="main"}));
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.getProperty = function(o,field) 
  if (o == nil) then 
    do return nil end;
  else
    if ((o.__properties__ ~= nil) and (Reflect.field(o, Std.string("get_") .. Std.string(field)) ~= nil)) then 
      do return Reflect.callMethod(o,Reflect.field(o, Std.string("get_") .. Std.string(field)),_hx_tab_array({}, 0)) end;
    else
      do return Reflect.field(o, field) end;
    end;
  end;
end
Reflect.setProperty = function(o,field,value) 
  if ((o.__properties__ ~= nil) and o.__properties__[Std.string("set_") .. Std.string(field)]) then 
    local tmp = o.__properties__[Std.string("set_") .. Std.string(field)];
    Reflect.callMethod(o,Reflect.field(o, tmp),_hx_tab_array({[0]=value}, 1));
  else
    o[field] = value;
  end;
end
Reflect.callMethod = function(o,func,args) 
  if ((args == nil) or (args.length == 0)) then 
    do return func(o) end;
  else
    local self_arg = false;
    if ((o ~= nil) and (o.__name__ == nil)) then 
      self_arg = true;
    end;
    if (self_arg) then 
      do return func(o, _hx_table.unpack(args, 0, args.length - 1)) end;
    else
      do return func(_hx_table.unpack(args, 0, args.length - 1)) end;
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    do return _hx_field_arr(o) end;
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end
Std.parseFloat = function(x) 
  if ((x == nil) or (x == "")) then 
    do return (0/0) end;
  end;
  local digitMatch = _G.string.match(x, "^%s*[%.%-+]?[0-9]%d*");
  if (digitMatch == nil) then 
    do return (0/0) end;
  end;
  x = String.prototype.substr(x, #digitMatch);
  local decimalMatch = _G.string.match(x, "^%.%d*");
  if (decimalMatch == nil) then 
    decimalMatch = "";
  end;
  x = String.prototype.substr(x, #decimalMatch);
  local eMatch = _G.string.match(x, "^[eE][+%-]?%d+");
  if (eMatch == nil) then 
    eMatch = "";
  end;
  local result = _G.tonumber(Std.string(Std.string(digitMatch) .. Std.string(decimalMatch)) .. Std.string(eMatch));
  if (result ~= nil) then 
    do return result end;
  else
    do return (0/0) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_e();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do _hx_do_first_1 = false;
    
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  local str = Std.string(s);
  _G.table.insert(buf_b, str);
  buf_length = buf_length + #str;
  do return _G.table.concat(buf_b) end;
end
StringTools.rpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  local str = Std.string(s);
  _G.table.insert(buf_b, str);
  buf_length = buf_length + #str;
  while (buf_length < l) do _hx_do_first_1 = false;
    
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  do return _G.table.concat(buf_b) end;
end
StringTools.replace = function(s,sub,by) 
  do return String.prototype.split(s, sub):join(by) end;
end
StringTools.hex = function(n,digits) 
  local s = "";
  local hexChars = "0123456789ABCDEF";
  local _hx_do_first_1 = true;
  while (n > 0) or _hx_do_first_1 do 
    _hx_do_first_1 = false;
    
    local index = _hx_bit.band(n,15);
    s = Std.string(_G.string.sub(hexChars, index + 1, index + 1)) .. Std.string(s);
    n = _hx_bit.rshift(n,4);
  end;
  if (digits ~= nil) then 
    while (#s < digits) do _hx_do_first_1 = false;
      
      s = Std.string("0") .. Std.string(s);
    end;
  end;
  do return s end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do _hx_do_first_1 = false;
    
    local _g = 0;
    local _g1 = Reflect.fields(p);
    while (_g < _g1.length) do _hx_do_first_2 = false;
      
      local f = _g1[_g];
      _g = _g + 1;
      if (not Lambda.has(a, f)) then 
        a:push(f);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

User.new = function(name,pass) 
  local self = _hx_new(User.prototype)
  User.super(self,name,pass)
  return self
end
User.super = function(self,name,pass) 
  self.password = "";
  self.name = "";
  self.name = name;
  self.password = pass;
end
User.__name__ = true
User.prototype = _hx_e();
User.prototype.name= nil;
User.prototype.password= nil;

User.prototype.__class__ =  User

UserManager.new = function(k) 
  local self = _hx_new(UserManager.prototype)
  UserManager.super(self,k)
  return self
end
UserManager.super = function(self,k) 
  self.path = "/config/passwd";
  self.users = _hx_tab_array({}, 0);
  self.kernel = k;
end
UserManager.__name__ = true
UserManager.prototype = _hx_e();
UserManager.prototype.users= nil;
UserManager.prototype.kernel= nil;
UserManager.prototype.path= nil;
UserManager.prototype.load = function(self,path) 
  if (path == nil) then 
    path = "/config/passwd";
  end;
  local fH = self.kernel.rootFs:open(path, "r");
  self.path = path;
  self.users = __haxe_Json.parse(fH:read());
  fH:close();
end
UserManager.prototype.save = function(self,path) 
  local tmp = path;
  local p = (function() 
    local _hx_1
    if (tmp ~= nil) then 
    _hx_1 = tmp; else 
    _hx_1 = self.path; end
    return _hx_1
  end )();
  local fH = self.kernel.rootFs:open(p, "w");
  fH:write(__haxe_Json.stringify(self.users, nil, " "));
  fH:close();
end
UserManager.prototype.add = function(self,name,pass) 
  self.users:push(User.new(name, pass));
  self:save();
end
UserManager.prototype.remove = function(self,name) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.users;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (i.name ~= name) then 
      _g:push(i);
    end;
  end;
  self.users = _g;
  self:save();
end
UserManager.prototype.validateUser = function(self,name,pass) 
  local hashedPassword = __haxe_crypto_Sha256.encode(pass);
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.users;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if ((i.name == name) and (i.password == hashedPassword)) then 
      _g:push(i);
    end;
  end;
  do return _g.length > 0 end
end

UserManager.prototype.__class__ =  UserManager

__filesystem_FileHandle.new = function() 
  local self = _hx_new(__filesystem_FileHandle.prototype)
  __filesystem_FileHandle.super(self)
  return self
end
__filesystem_FileHandle.super = function(self) 
end
__filesystem_FileHandle.__name__ = true
__filesystem_FileHandle.prototype = _hx_e();
__filesystem_FileHandle.prototype.close = function(self) 
end
__filesystem_FileHandle.prototype.seek = function(self,whence,offset) 
end
__filesystem_FileHandle.prototype.read = function(self) 
  do return "" end
end
__filesystem_FileHandle.prototype.readBytes = function(self,count) 
  do return "" end
end
__filesystem_FileHandle.prototype.readLine = function(self) 
  do return "" end
end
__filesystem_FileHandle.prototype.write = function(self,data) 
end
__filesystem_FileHandle.prototype.writeLine = function(self,data) 
end
__filesystem_FileHandle.prototype.flush = function(self) 
end
__filesystem_FileHandle.prototype.getIfOpen = function(self) 
  do return false end
end

__filesystem_FileHandle.prototype.__class__ =  __filesystem_FileHandle
_hxClasses["haxe.StackItem"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="CFunction","Module","FilePos","Method","LocalFunction"},5)}
__haxe_StackItem = _hxClasses["haxe.StackItem"];
__haxe_StackItem.CFunction = _hx_tab_array({[0]="CFunction",0,__enum__ = __haxe_StackItem},2)

__haxe_StackItem.Module = function(m) local _x = _hx_tab_array({[0]="Module",1,m,__enum__=__haxe_StackItem}, 3); return _x; end 
__haxe_StackItem.FilePos = function(s,file,line,column) local _x = _hx_tab_array({[0]="FilePos",2,s,file,line,column,__enum__=__haxe_StackItem}, 6); return _x; end 
__haxe_StackItem.Method = function(classname,method) local _x = _hx_tab_array({[0]="Method",3,classname,method,__enum__=__haxe_StackItem}, 4); return _x; end 
__haxe_StackItem.LocalFunction = function(v) local _x = _hx_tab_array({[0]="LocalFunction",4,v,__enum__=__haxe_StackItem}, 3); return _x; end 

__haxe__CallStack_CallStack_Impl_.new = {}
__haxe__CallStack_CallStack_Impl_.__name__ = true
__haxe__CallStack_CallStack_Impl_.toString = function(stack) 
  local b = StringBuf.new();
  local _g = 0;
  local _g1 = stack;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local s = _g1[_g];
    _g = _g + 1;
    local str = "\nCalled from ";
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    __haxe__CallStack_CallStack_Impl_.itemToString(b, s);
  end;
  do return _G.table.concat(b.b) end;
end
__haxe__CallStack_CallStack_Impl_.itemToString = function(b,s) 
  local tmp = s[1];
  if (tmp) == 0 then 
    local str = "a C function";
    _G.table.insert(b.b, str);
    local b = b;
    b.length = b.length + #str;
  elseif (tmp) == 1 then 
    local m = s[2];
    local str = "module ";
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = Std.string(m);
    _G.table.insert(b.b, str);
    local b = b;
    b.length = b.length + #str;
  elseif (tmp) == 2 then 
    local s1 = s[2];
    local file = s[3];
    local line = s[4];
    local col = s[5];
    if (s1 ~= nil) then 
      __haxe__CallStack_CallStack_Impl_.itemToString(b, s1);
      local str = " (";
      _G.table.insert(b.b, str);
      local b = b;
      b.length = b.length + #str;
    end;
    local str = Std.string(file);
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = " line ";
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = Std.string(line);
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    if (col ~= nil) then 
      local str = " column ";
      _G.table.insert(b.b, str);
      local b1 = b;
      b1.length = b1.length + #str;
      local str = Std.string(col);
      _G.table.insert(b.b, str);
      local b = b;
      b.length = b.length + #str;
    end;
    if (s1 ~= nil) then 
      local str = ")";
      _G.table.insert(b.b, str);
      local b = b;
      b.length = b.length + #str;
    end;
  elseif (tmp) == 3 then 
    local cname = s[2];
    local meth = s[3];
    local str = Std.string((function() 
      local _hx_1
      if (cname == nil) then 
      _hx_1 = "<unknown>"; else 
      _hx_1 = cname; end
      return _hx_1
    end )());
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = ".";
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = Std.string(meth);
    _G.table.insert(b.b, str);
    local b = b;
    b.length = b.length + #str;
  elseif (tmp) == 4 then 
    local n = s[2];
    local str = "local function #";
    _G.table.insert(b.b, str);
    local b1 = b;
    b1.length = b1.length + #str;
    local str = Std.string(n);
    _G.table.insert(b.b, str);
    local b = b;
    b.length = b.length + #str; end;
end

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true
__haxe_IMap.prototype = _hx_e();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.keys= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.caught = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value end;
  else
    do return __haxe_ValueException.new(value, nil, value) end;
  end;
end
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.__exceptionMessage= nil;
__haxe_Exception.prototype.__exceptionStack= nil;
__haxe_Exception.prototype.__nativeStack= nil;
__haxe_Exception.prototype.__skipStack= nil;
__haxe_Exception.prototype.__nativeException= nil;
__haxe_Exception.prototype.__previousException= nil;
__haxe_Exception.prototype.unwrap = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.__shiftStack = function(self) 
  self.__skipStack = self.__skipStack + 1;
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end
__haxe_Exception.prototype.get_stack = function(self) 
  local _g = self.__exceptionStack;
  if (_g == nil) then 
    self.__exceptionStack = __haxe_NativeStackTrace.toHaxe(self.__nativeStack, self.__skipStack) do return self.__exceptionStack end;
  else
    local s = _g;
    do return s end;
  end;
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Exception.prototype.__properties__ =  {get_native="get_native",get_stack="get_stack",get_message="get_message"}

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.parse = function(text) 
  do return __haxe_format_JsonParser.new(text):doParse() end;
end
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_Log.new = {}
__haxe_Log.__name__ = true
__haxe_Log.formatOutput = function(v,infos) 
  local str = Std.string(v);
  if (infos == nil) then 
    do return str end;
  end;
  local pstr = Std.string(Std.string(infos.fileName) .. Std.string(":")) .. Std.string(infos.lineNumber);
  if (infos.customParams ~= nil) then 
    local _g = 0;
    local _g1 = infos.customParams;
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local v = _g1[_g];
      _g = _g + 1;
      str = Std.string(str) .. Std.string((Std.string(", ") .. Std.string(Std.string(v))));
    end;
  end;
  do return Std.string(Std.string(pstr) .. Std.string(": ")) .. Std.string(str) end;
end
__haxe_Log.trace = function(v,infos) 
  local str = __haxe_Log.formatOutput(v, infos);
  _hx_print(str);
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end
__haxe_NativeStackTrace.toHaxe = function(native,skip) 
  if (skip == nil) then 
    skip = 0;
  end;
  local stack = _hx_tab_array({}, 0);
  local cnt = -1;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < native.length) do _hx_do_first_1 = false;
    repeat 
    local item = native[_g];
    _g = _g + 1;
    local parts = String.prototype.split(String.prototype.substr(item, 1), ":");
    local file = parts[0];
    if (file == "[C]") then 
      break;
    end;
    cnt = cnt + 1;
    if (skip > cnt) then 
      break;
    end;
    local line = parts[1];
    local method;
    if (parts.length <= 2) then 
      method = nil;
    else
      local methodPos = String.prototype.indexOf(parts[2], "'");
      method = (function() 
        local _hx_1
        if (methodPos < 0) then 
        _hx_1 = nil; else 
        _hx_1 = __haxe_StackItem.Method(nil, String.prototype.substring(parts[2], methodPos + 1, #parts[2] - 1)); end
        return _hx_1
      end )();
    end;
    stack:push(__haxe_StackItem.FilePos(method, file, Std.parseInt(line)));until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  do return stack end;
end

__haxe__Rest_Rest_Impl_.new = {}
__haxe__Rest_Rest_Impl_.__name__ = true
__haxe__Rest_Rest_Impl_.of = function(array) 
  local ret = ({});
  local _g = 0;
  local _g1 = array.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local idx = _g - 1;
    ret[idx + 1] = array[idx];
  end;
  do return ret end;
end
__haxe__Rest_Rest_Impl_.toArray = function(this1) 
  local length = nil;
  local tab = __lua_PairTools.copy(this1);
  local length = length;
  if (length == nil) then 
    length = _hx_table.maxn(tab);
    if (length > 0) then 
      local head = tab[1];
      _G.table.remove(tab, 1);
      tab[0] = head;
      do return _hx_tab_array(tab, length) end;
    else
      do return _hx_tab_array({}, 0) end;
    end;
  else
    do return _hx_tab_array(tab, length) end;
  end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
  self.__skipStack = self.__skipStack + 1;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.value= nil;
__haxe_ValueException.prototype.unwrap = function(self) 
  do return self.value end
end

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_ValueException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_crypto_Sha256.new = function() 
  local self = _hx_new(__haxe_crypto_Sha256.prototype)
  __haxe_crypto_Sha256.super(self)
  return self
end
__haxe_crypto_Sha256.super = function(self) 
end
__haxe_crypto_Sha256.__name__ = true
__haxe_crypto_Sha256.encode = function(s) 
  local sh = __haxe_crypto_Sha256.new();
  local h = sh:doEncode(__haxe_crypto_Sha256.str2blks(s), #s * 8);
  do return sh:hex(h) end;
end
__haxe_crypto_Sha256.str2blks = function(s) 
  local s = __haxe_io_Bytes.ofString(s);
  local nblk = (_hx_bit.arshift(s.length + 8,6)) + 1;
  local blks = Array.new();
  local _g = 0;
  local _g1 = nblk * 16;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    blks[i] = 0;
  end;
  local _g = 0;
  local _g1 = s.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local p = _hx_bit.arshift(i,2);
    local blks = blks;
    local p = p;
    blks[p] = _hx_bit.bor(blks[p],_hx_bit.lshift(s.b[i],24 - (_hx_bit.lshift((_hx_bit.band(i,3)),3))));
  end;
  local i = s.length;
  local p = _hx_bit.arshift(i,2);
  local blks1 = blks;
  local p = p;
  blks1[p] = _hx_bit.bor(blks1[p],_hx_bit.lshift(128,24 - (_hx_bit.lshift((_hx_bit.band(i,3)),3))));
  blks[(nblk * 16) - 1] = s.length * 8;
  do return blks end;
end
__haxe_crypto_Sha256.prototype = _hx_e();
__haxe_crypto_Sha256.prototype.doEncode = function(self,m,l) 
  local K = _hx_tab_array({[0]=1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998}, 64);
  local HASH = _hx_tab_array({[0]=1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225}, 8);
  local W = Array.new();
  W[64] = 0;
  local a;
  local b;
  local c;
  local d;
  local e;
  local f;
  local g;
  local h;
  local T1;
  local T2;
  local m1 = m;
  local index = _hx_bit.arshift(l,5);
  m1[index] = _hx_bit.bor(m1[index],_hx_bit.lshift(128,24 - (_G.math.fmod(l, 32))));
  m[(_hx_bit.lshift(_hx_bit.arshift(l + 64,9),4)) + 15] = l;
  local i = 0;
  while (i < m.length) do _hx_do_first_1 = false;
    
    a = HASH[0];
    b = HASH[1];
    c = HASH[2];
    d = HASH[3];
    e = HASH[4];
    f = HASH[5];
    g = HASH[6];
    h = HASH[7];
    local _g = 0;
    while (_g < 64) do _hx_do_first_2 = false;
      
      _g = _g + 1;
      local j = _g - 1;
      if (j < 16) then 
        W[j] = m[j + i];
      else
        local x = W[j - 2];
        local x = _hx_bit.bxor(_hx_bit.bxor((_hx_bit.bor(_hx_bit.rshift(x,17),_hx_bit.lshift(x,15))),(_hx_bit.bor(_hx_bit.rshift(x,19),_hx_bit.lshift(x,13)))),_hx_bit.rshift(x,10));
        local y = W[j - 7];
        local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
        local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
        local x = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
        local x1 = W[j - 15];
        local y = _hx_bit.bxor(_hx_bit.bxor((_hx_bit.bor(_hx_bit.rshift(x1,7),_hx_bit.lshift(x1,25))),(_hx_bit.bor(_hx_bit.rshift(x1,18),_hx_bit.lshift(x1,14)))),_hx_bit.rshift(x1,3));
        local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
        local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
        local x = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
        local y = W[j - 16];
        local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
        local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
        W[j] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      end;
      local y = _hx_bit.bxor(_hx_bit.bxor((_hx_bit.bor(_hx_bit.rshift(e,6),_hx_bit.lshift(e,26))),(_hx_bit.bor(_hx_bit.rshift(e,11),_hx_bit.lshift(e,21)))),(_hx_bit.bor(_hx_bit.rshift(e,25),_hx_bit.lshift(e,7))));
      local lsw = (_hx_bit.band(h,65535)) + (_hx_bit.band(y,65535));
      local msw = ((_hx_bit.arshift(h,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
      local x = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      local y = _hx_bit.bxor(_hx_bit.band(e,f),_hx_bit.band(_hx_bit.bnot(e),g));
      local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
      local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
      local x = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      local y = K[j];
      local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
      local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
      local x = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      local y = W[j];
      local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
      local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
      T1 = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      local x = _hx_bit.bxor(_hx_bit.bxor((_hx_bit.bor(_hx_bit.rshift(a,2),_hx_bit.lshift(a,30))),(_hx_bit.bor(_hx_bit.rshift(a,13),_hx_bit.lshift(a,19)))),(_hx_bit.bor(_hx_bit.rshift(a,22),_hx_bit.lshift(a,10))));
      local y = _hx_bit.bxor(_hx_bit.bxor(_hx_bit.band(a,b),_hx_bit.band(a,c)),_hx_bit.band(b,c));
      local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
      local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
      T2 = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      h = g;
      g = f;
      f = e;
      local lsw = (_hx_bit.band(d,65535)) + (_hx_bit.band(T1,65535));
      local msw = ((_hx_bit.arshift(d,16)) + (_hx_bit.arshift(T1,16))) + (_hx_bit.arshift(lsw,16));
      e = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
      d = c;
      c = b;
      b = a;
      local lsw = (_hx_bit.band(T1,65535)) + (_hx_bit.band(T2,65535));
      local msw = ((_hx_bit.arshift(T1,16)) + (_hx_bit.arshift(T2,16))) + (_hx_bit.arshift(lsw,16));
      a = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    end;
    local y = HASH[0];
    local lsw = (_hx_bit.band(a,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(a,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[0] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[1];
    local lsw = (_hx_bit.band(b,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(b,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[1] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[2];
    local lsw = (_hx_bit.band(c,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(c,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[2] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[3];
    local lsw = (_hx_bit.band(d,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(d,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[3] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[4];
    local lsw = (_hx_bit.band(e,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(e,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[4] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[5];
    local lsw = (_hx_bit.band(f,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(f,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[5] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[6];
    local lsw = (_hx_bit.band(g,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(g,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[6] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    local y = HASH[7];
    local lsw = (_hx_bit.band(h,65535)) + (_hx_bit.band(y,65535));
    local msw = ((_hx_bit.arshift(h,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
    HASH[7] = _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535));
    i = i + 16;
  end;
  do return HASH end
end
__haxe_crypto_Sha256.prototype.hex = function(self,a) 
  local str = "";
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local num = a[_g];
    _g = _g + 1;
    str = Std.string(str) .. Std.string(StringTools.hex(num, 8));
  end;
  do return _G.string.lower(str) end
end

__haxe_crypto_Sha256.prototype.__class__ =  __haxe_crypto_Sha256

__haxe_ds_IntMap.new = function() 
  local self = _hx_new(__haxe_ds_IntMap.prototype)
  __haxe_ds_IntMap.super(self)
  return self
end
__haxe_ds_IntMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_IntMap.__name__ = true
__haxe_ds_IntMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_IntMap.prototype = _hx_e();
__haxe_ds_IntMap.prototype.h= nil;
__haxe_ds_IntMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_IntMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_IntMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_IntMap.prototype.__class__ =  __haxe_ds_IntMap

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
__haxe_ds_ObjectMap.__name__ = true
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_e();
__haxe_ds_ObjectMap.prototype.h= nil;
__haxe_ds_ObjectMap.prototype.k= nil;
__haxe_ds_ObjectMap.prototype.get = function(self,key) 
  do return self.h[key] end
end
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    do return nil end;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
  self.__skipStack = self.__skipStack + 1;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.posInfos= nil;
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_exceptions_PosException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
  self.__skipStack = self.__skipStack + 1;
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})
setmetatable(__haxe_exceptions_NotImplementedException.prototype.__properties__,{__index=__haxe_exceptions_PosException.prototype.__properties__})

__haxe_format_JsonParser.new = function(str) 
  local self = _hx_new(__haxe_format_JsonParser.prototype)
  __haxe_format_JsonParser.super(self,str)
  return self
end
__haxe_format_JsonParser.super = function(self,str) 
  self.str = str;
  self.pos = 0;
end
__haxe_format_JsonParser.__name__ = true
__haxe_format_JsonParser.prototype = _hx_e();
__haxe_format_JsonParser.prototype.str= nil;
__haxe_format_JsonParser.prototype.pos= nil;
__haxe_format_JsonParser.prototype.doParse = function(self) 
  local result = self:parseRec();
  local c;
  while (true) do _hx_do_first_1 = false;
    
    c = self:nextChar();
    if (not (c ~= nil)) then 
      break;
    end;
    local c = c;
    if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then else
    self:invalidChar(); end;
  end;
  do return result end
end
__haxe_format_JsonParser.prototype.parseRec = function(self) 
  while (true) do _hx_do_first_1 = false;
    
    local c = self:nextChar();
    local c1 = c;
    if (c1) == 9 or (c1) == 10 or (c1) == 13 or (c1) == 32 then 
    elseif (c1) == 34 then 
      do return self:parseString() end;
    elseif (c1) == 45 or (c1) == 48 or (c1) == 49 or (c1) == 50 or (c1) == 51 or (c1) == 52 or (c1) == 53 or (c1) == 54 or (c1) == 55 or (c1) == 56 or (c1) == 57 then 
      local c = c;
      local start = self.pos - 1;
      local minus = c == 45;
      local digit = not minus;
      local zero = c == 48;
      local point = false;
      local e = false;
      local pm = false;
      local _end = false;
      local _hx_do_first_2 = true;
      while (not _end) or _hx_do_first_2 do 
        _hx_do_first_2 = false;
        
        c = self:nextChar();
        local c = c;
        if (c) == 43 or (c) == 45 then 
          if (not e or pm) then 
            self:invalidNumber(start);
          end;
          digit = false;
          pm = true;
        elseif (c) == 46 then 
          if ((minus or point) or e) then 
            self:invalidNumber(start);
          end;
          digit = false;
          point = true;
        elseif (c) == 48 then 
          if (zero and not point) then 
            self:invalidNumber(start);
          end;
          if (minus) then 
            minus = false;
            zero = true;
          end;
          digit = true;
        elseif (c) == 49 or (c) == 50 or (c) == 51 or (c) == 52 or (c) == 53 or (c) == 54 or (c) == 55 or (c) == 56 or (c) == 57 then 
          if (zero and not point) then 
            self:invalidNumber(start);
          end;
          if (minus) then 
            minus = false;
          end;
          digit = true;
          zero = false;
        elseif (c) == 69 or (c) == 101 then 
          if ((minus or zero) or e) then 
            self:invalidNumber(start);
          end;
          digit = false;
          e = true;else
        if (not digit) then 
          self:invalidNumber(start);
        end;
        self.pos = self.pos - 1;
        _end = true; end;
      end;
      local f = Std.parseFloat(String.prototype.substr(self.str, start, self.pos - start));
      local i = Std.int(f);
      if (i == f) then 
        do return i end;
      else
        do return f end;
      end;
    elseif (c1) == 91 then 
      local arr = _hx_tab_array({}, 0);
      local comma = nil;
      while (true) do _hx_do_first_2 = false;
        
        local c = self:nextChar();
        local c = c;
        if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then 
        elseif (c) == 44 then 
          if (comma) then 
            comma = false;
          else
            self:invalidChar();
          end;
        elseif (c) == 93 then 
          if (comma == false) then 
            self:invalidChar();
          end;
          do return arr end;else
        if (comma) then 
          self:invalidChar();
        end;
        self.pos = self.pos - 1;
        arr:push(self:parseRec());
        comma = true; end;
      end;
    elseif (c1) == 102 then 
      local save = self.pos;
      if ((((self:nextChar() ~= 97) or (self:nextChar() ~= 108)) or (self:nextChar() ~= 115)) or (self:nextChar() ~= 101)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return false end;
    elseif (c1) == 110 then 
      local save = self.pos;
      if (((self:nextChar() ~= 117) or (self:nextChar() ~= 108)) or (self:nextChar() ~= 108)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return nil end;
    elseif (c1) == 116 then 
      local save = self.pos;
      if (((self:nextChar() ~= 114) or (self:nextChar() ~= 117)) or (self:nextChar() ~= 101)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return true end;
    elseif (c1) == 123 then 
      local obj = _hx_e();
      local field = nil;
      local comma = nil;
      while (true) do _hx_do_first_2 = false;
        
        local c = self:nextChar();
        local c = c;
        if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then 
        elseif (c) == 34 then 
          if ((field ~= nil) or comma) then 
            self:invalidChar();
          end;
          field = self:parseString();
        elseif (c) == 44 then 
          if (comma) then 
            comma = false;
          else
            self:invalidChar();
          end;
        elseif (c) == 58 then 
          if (field == nil) then 
            self:invalidChar();
          end;
          obj[field] = self:parseRec();
          field = nil;
          comma = true;
        elseif (c) == 125 then 
          if ((field ~= nil) or (comma == false)) then 
            self:invalidChar();
          end;
          do return obj end;else
        self:invalidChar(); end;
      end;else
    self:invalidChar(); end;
  end;
end
__haxe_format_JsonParser.prototype.parseString = function(self) 
  local start = self.pos;
  local buf = nil;
  local prev = -1;
  while (true) do _hx_do_first_1 = false;
    
    local c = self:nextChar();
    if (c == 34) then 
      break;
    end;
    if (c == 92) then 
      if (buf == nil) then 
        buf = StringBuf.new();
      end;
      local s = self.str;
      local len = (self.pos - start) - 1;
      local part = (function() 
        local _hx_1
        if (len == nil) then 
        _hx_1 = String.prototype.substr(s, start); else 
        _hx_1 = String.prototype.substr(s, start, len); end
        return _hx_1
      end )();
      _G.table.insert(buf.b, part);
      local buf1 = buf;
      buf1.length = buf1.length + #part;
      c = self:nextChar();
      local c1 = c;
      if (c1) == 34 or (c1) == 47 or (c1) == 92 then 
        _G.table.insert(buf.b, _G.string.char(c));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 98 then 
        _G.table.insert(buf.b, _G.string.char(8));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 102 then 
        _G.table.insert(buf.b, _G.string.char(12));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 110 then 
        _G.table.insert(buf.b, _G.string.char(10));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 114 then 
        _G.table.insert(buf.b, _G.string.char(13));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 116 then 
        _G.table.insert(buf.b, _G.string.char(9));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 117 then 
        local uc = Std.parseInt(Std.string("0x") .. Std.string(String.prototype.substr(self.str, self.pos, 4)));
        local tmp = self;
        tmp.pos = tmp.pos + 4;
        if (prev ~= -1) then 
          if ((uc < 56320) or (uc > 57343)) then 
            _G.table.insert(buf.b, _G.string.char(65533));
            local buf = buf;
            buf.length = buf.length + 1;
            prev = -1;
          else
            _G.table.insert(buf.b, _G.string.char(((_hx_bit.lshift(prev - 55296,10)) + (uc - 56320)) + 65536));
            local buf = buf;
            buf.length = buf.length + 1;
            prev = -1;
          end;
        else
          if ((uc >= 55296) and (uc <= 56319)) then 
            prev = uc;
          else
            _G.table.insert(buf.b, _G.string.char(uc));
            local buf = buf;
            buf.length = buf.length + 1;
          end;
        end;else
      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid escape sequence \\") .. Std.string(_G.string.char(c))) .. Std.string(" at position ")) .. Std.string((self.pos - 1))),0); end;
      start = self.pos;
    else
      if (c >= 128) then 
        self.pos = self.pos + 1;
        if (c >= 252) then 
          local tmp = self;
          tmp.pos = tmp.pos + 4;
        else
          if (c >= 248) then 
            local tmp = self;
            tmp.pos = tmp.pos + 3;
          else
            if (c >= 240) then 
              local tmp = self;
              tmp.pos = tmp.pos + 2;
            else
              if (c >= 224) then 
                self.pos = self.pos + 1;
              end;
            end;
          end;
        end;
      else
        if (c == nil) then 
          _G.error(__haxe_Exception.thrown("Unclosed string"),0);
        end;
      end;
    end;
  end;
  if (buf == nil) then 
    do return String.prototype.substr(self.str, start, (self.pos - start) - 1) end;
  else
    local s = self.str;
    local len = (self.pos - start) - 1;
    local part = (function() 
      local _hx_2
      if (len == nil) then 
      _hx_2 = String.prototype.substr(s, start); else 
      _hx_2 = String.prototype.substr(s, start, len); end
      return _hx_2
    end )();
    _G.table.insert(buf.b, part);
    local buf1 = buf;
    buf1.length = buf1.length + #part;
    do return _G.table.concat(buf.b) end;
  end;
end
__haxe_format_JsonParser.prototype.nextChar = function(self) 
  self.pos = self.pos + 1;
  do return _G.string.byte(self.str, self.pos) end
end
__haxe_format_JsonParser.prototype.invalidChar = function(self) 
  self.pos = self.pos - 1;
  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid char ") .. Std.string(_G.string.byte(self.str, self.pos))) .. Std.string(" at position ")) .. Std.string(self.pos)),0);
end
__haxe_format_JsonParser.prototype.invalidNumber = function(self,start) 
  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid number at position ") .. Std.string(start)) .. Std.string(": ")) .. Std.string(String.prototype.substr(self.str, start, self.pos - start))),0);
end

__haxe_format_JsonParser.prototype.__class__ =  __haxe_format_JsonParser

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = replacer;
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
__haxe_format_JsonPrinter.__name__ = true
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_e();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self.replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    local str = "null";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 1 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 2 then 
    local v = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 3 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this = self.buf;
    local str = "\"<fun>\"";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 6 then 
    local c = _g[2];
    if (c == String) then 
      self:quote(v);
    else
      if (c == Array) then 
        local v = v;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(91));
        local _this = _this;
        _this.length = _this.length + 1;
        local len = v.length;
        local last = len - 1;
        local _g = 0;
        local _g1 = len;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (i > 0) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(44));
            local _this = _this;
            _this.length = _this.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(10));
            local _this = _this;
            _this.length = _this.length + 1;
          end;
          if (self.pretty) then 
            local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this = self.buf;
            local str = Std.string(v);
            _G.table.insert(_this.b, str);
            local _this = _this;
            _this.length = _this.length + #str;
          end;
          self:write(i, v[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this = self.buf;
              _G.table.insert(_this.b, _G.string.char(10));
              local _this = _this;
              _this.length = _this.length + 1;
            end;
            if (self.pretty) then 
              local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this = self.buf;
              local str = Std.string(v);
              _G.table.insert(_this.b, str);
              local _this = _this;
              _this.length = _this.length + #str;
            end;
          end;
        end;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(93));
        local _this = _this;
        _this.length = _this.length + 1;
      else
        if (c == __haxe_ds_StringMap) then 
          local v = v;
          local o = _hx_e();
          local k = v:keys();
          while (k:hasNext()) do _hx_do_first_1 = false;
            
            local k = k:next();
            local ret = v.h[k];
            o[k] = (function() 
              local _hx_2
              if (ret == __haxe_ds_StringMap.tnull) then 
              _hx_2 = nil; else 
              _hx_2 = ret; end
              return _hx_2
            end )();
          end;
          local v = o;
          self:fieldsString(v, Reflect.fields(v));
        else
          if (c == Date) then 
            local v = v;
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local _g = _g[2];
    local i = v[1];
    local v = Std.string(i);
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 8 then 
    local _this = self.buf;
    local str = "\"???\"";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  local _this = _this;
  _this.length = _this.length + 1;
  local len = fields.length;
  local empty = true;
  local _g = 0;
  local _g1 = len;
  local _hx_continue_1 = false;
  while (_g < _g1) do _hx_do_first_1 = false;
    repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (empty) then 
      self.nind = self.nind + 1;
      empty = false;
    else
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(44));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
    self:quote(f);
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(58));
    local _this = _this;
    _this.length = _this.length + 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(32));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    self:write(f, value);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (not empty) then 
    self.nind = self.nind - 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(125));
  local _this = _this;
  _this.length = _this.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  local _this = _this;
  _this.length = _this.length + 1;
  local i = 0;
  local length = #s;
  while (i < length) do _hx_do_first_1 = false;
    
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    local c1 = c;
    if (c1) == 8 then 
      local _this = self.buf;
      local str = "\\b";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 9 then 
      local _this = self.buf;
      local str = "\\t";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 10 then 
      local _this = self.buf;
      local str = "\\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 12 then 
      local _this = self.buf;
      local str = "\\f";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 13 then 
      local _this = self.buf;
      local str = "\\r";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 34 then 
      local _this = self.buf;
      local str = "\\\"";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 92 then 
      local _this = self.buf;
      local str = "\\\\";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;else
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(c));
    local _this = _this;
    _this.length = _this.length + 1; end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  local _this = _this;
  _this.length = _this.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new(__haxe_io_Bytes.prototype)
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.__name__ = true
__haxe_io_Bytes.ofString = function(s,encoding) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = _G.string.len(s);
  while (_g1 < _g2) do _hx_do_first_1 = false;
    
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    _g:push(_G.string.byte(s, i + 1));
  end;
  local bytes = _g;
  do return __haxe_io_Bytes.new(bytes.length, bytes) end;
end
__haxe_io_Bytes.prototype = _hx_e();
__haxe_io_Bytes.prototype.length= nil;
__haxe_io_Bytes.prototype.b= nil;

__haxe_io_Bytes.prototype.__class__ =  __haxe_io_Bytes
_hxClasses["haxe.io.Encoding"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="UTF8","RawNative"},2)}
__haxe_io_Encoding = _hxClasses["haxe.io.Encoding"];
__haxe_io_Encoding.UTF8 = _hx_tab_array({[0]="UTF8",0,__enum__ = __haxe_io_Encoding},2)

__haxe_io_Encoding.RawNative = _hx_tab_array({[0]="RawNative",1,__enum__ = __haxe_io_Encoding},2)


__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.array= nil;
__haxe_iterators_ArrayIterator.prototype.current= nil;
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.current= nil;
__haxe_iterators_ArrayKeyValueIterator.prototype.array= nil;
__haxe_iterators_ArrayKeyValueIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayKeyValueIterator.prototype.next = function(self) 
  do return _hx_o({__fields__={value=true,key=true},value=self.array[self.current],key=(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()}) end
end

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__haxe_macro_Error.new = function(message,pos,previous) 
  local self = _hx_new(__haxe_macro_Error.prototype)
  __haxe_macro_Error.super(self,message,pos,previous)
  return self
end
__haxe_macro_Error.super = function(self,message,pos,previous) 
  __haxe_Exception.super(self,message,previous);
  self.pos = pos;
  self.__skipStack = self.__skipStack + 1;
end
__haxe_macro_Error.__name__ = true
__haxe_macro_Error.prototype = _hx_e();
__haxe_macro_Error.prototype.pos= nil;

__haxe_macro_Error.prototype.__class__ =  __haxe_macro_Error
__haxe_macro_Error.__super__ = __haxe_Exception
setmetatable(__haxe_macro_Error.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_macro_Error.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.__cast = function(o,t) 
  if ((o == nil) or __lua_Boot.__instanceof(o, t)) then 
    do return o end;
  else
    _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Cannot cast ") .. Std.string(Std.string(o))) .. Std.string(" to ")) .. Std.string(Std.string(t))),0);
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_PairTools.new = {}
__lua_PairTools.__name__ = true
__lua_PairTools.pairsFold = function(table,func,seed) 
  for k,v in _G.pairs(table) do seed = func(k,v,seed) end;
  do return seed end;
end
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

__scheduler_TaskInfo.new = function(name,id,env,user,out) 
  local self = _hx_new(__scheduler_TaskInfo.prototype)
  __scheduler_TaskInfo.super(self,name,id,env,user,out)
  return self
end
__scheduler_TaskInfo.super = function(self,name,id,env,user,out) 
  self.name = name;
  self.id = id;
  self.env = env;
  self.user = user;
  self.paused = false;
  self.nice = 0;
  self.out = out;
end
__scheduler_TaskInfo.__name__ = true
__scheduler_TaskInfo.prototype = _hx_e();
__scheduler_TaskInfo.prototype.name= nil;
__scheduler_TaskInfo.prototype.id= nil;
__scheduler_TaskInfo.prototype.env= nil;
__scheduler_TaskInfo.prototype.user= nil;
__scheduler_TaskInfo.prototype.paused= nil;
__scheduler_TaskInfo.prototype.nice= nil;
__scheduler_TaskInfo.prototype.out= nil;
__scheduler_TaskInfo.prototype.copy = function(self) 
  local ti = __scheduler_TaskInfo.new(self.name, self.id, self.env, self.user, self.out);
  ti.paused = self.paused;
  ti.nice = self.nice;
  do return ti end
end

__scheduler_TaskInfo.prototype.__class__ =  __scheduler_TaskInfo

__scheduler_Task.new = function() 
  local self = _hx_new(__scheduler_Task.prototype)
  __scheduler_Task.super(self)
  return self
end
__scheduler_Task.super = function(self) 
  self.isWaitingForEvent = false;
end
__scheduler_Task.__name__ = true
__scheduler_Task.prototype = _hx_e();
__scheduler_Task.prototype.coroutine= nil;
__scheduler_Task.prototype.taskQueue= nil;
__scheduler_Task.prototype.pInfo= nil;
__scheduler_Task.prototype.lastPreempt= nil;
__scheduler_Task.prototype.isWaitingForEvent= nil;

__scheduler_Task.prototype.__class__ =  __scheduler_Task

__scheduler_Scheduler.new = function(usePreemption,kernel) 
  local self = _hx_new(__scheduler_Scheduler.prototype)
  __scheduler_Scheduler.super(self,usePreemption,kernel)
  return self
end
__scheduler_Scheduler.super = function(self,usePreemption,kernel) 
  self.usePreemption = false;
  self.tasks = _hx_tab_array({}, 0);
  self.kernel = kernel;
  self.syscallInterface = __syscall_SyscallInterface.new(kernel);
  self.syscallInterface:addSyscallInterface(__syscall_extensions_ArcosExtension.new());
  self.syscallInterface:addSyscallInterface(__syscall_extensions_FilesystemExtension.new());
  self.syscallInterface:addSyscallInterface(__syscall_extensions_DeviceExtension.new());
  self.syscallInterface:addSyscallInterface(__syscall_extensions_TaskingExtension.new());
  self.usePreemption = usePreemption;
end
__scheduler_Scheduler.__name__ = true
__scheduler_Scheduler.prototype = _hx_e();
__scheduler_Scheduler.prototype.tasks= nil;
__scheduler_Scheduler.prototype.currentTaskPid= nil;
__scheduler_Scheduler.prototype.usePreemption= nil;
__scheduler_Scheduler.prototype.kernel= nil;
__scheduler_Scheduler.prototype.syscallInterface= nil;
__scheduler_Scheduler.prototype.getCurrentTask = function(self) 
  if (self.tasks[self.currentTaskPid] ~= nil) then 
    do return self.tasks[self.currentTaskPid].pInfo:copy() end;
  else
    do return __scheduler_TaskInfo.new("Kernel", -1, __haxe_ds_StringMap.new(), "root", KDriversImpl.terminal) end;
  end;
end
__scheduler_Scheduler.prototype.addTask = function(self,name,callback,user,out) 
  local _gthis = self;
  if (user == nil) then 
    user = self:getCurrentTask().user;
  end;
  if (out == nil) then 
    out = self:getCurrentTask().out;
  end;
  local pid = self.tasks.length;
  local env = self:getCurrentTask().env;
  self.tasks[pid] = __scheduler_Task.new();
  self.tasks[pid].coroutine = _G.coroutine.create(function() 
    if (_gthis.usePreemption) then 
      debug.sethook(function() 
        if ((KDriversImpl.computer.uptime() - _gthis.tasks[pid].lastPreempt) > 0.01) then 
          _G.coroutine.yield("preempt");
          _gthis.tasks[pid].lastPreempt = KDriversImpl.computer.uptime();
        end;
      end, "l");
    end;
    local _hx_status, _hx_result = pcall(function() 
    
        callback();
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      local e = __haxe_Exception.caught(_g);
      __haxe_Log.trace(e, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/scheduler/Scheduler.hx",lineNumber=131,className="scheduler.Scheduler",methodName="addTask"}));
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end);
  self.tasks[pid].taskQueue = _hx_tab_array({}, 0);
  self.tasks[pid].pInfo = __scheduler_TaskInfo.new(name, pid, env, user, out);
  self.tasks[pid].lastPreempt = KDriversImpl.computer.uptime();
  do return pid end
end
__scheduler_Scheduler.prototype.killTask = function(self,pid) 
  self.tasks:remove(self.tasks[pid]);
end
__scheduler_Scheduler.prototype.handleEvent = function(self,ev) 
  if (ev[0] == "peripheral") then 
    self.kernel.dm:add(PeripheralDevice.new(ev[1]));
  end;
  if (ev[0] == "peripheral_detach") then 
    self.kernel.dm:remove(ev[1]);
  end;
  local _g = 0;
  local _g1 = self.tasks;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local task = _g1[_g];
    _g = _g + 1;
    task.taskQueue:push(ev);
  end;
end
__scheduler_Scheduler.prototype.resumeTask = function(self,task,fev) 
  local _gthis = self;
  KDriversImpl.workarounds.preventTooLongWithoutYielding(function(ev) 
    local _gthis = _gthis;
    local length = nil;
    local tab = __lua_PairTools.copy(ev);
    local length = length;
    local tmp;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        tmp = _hx_tab_array(tab, length);
      else
        tmp = _hx_tab_array({}, 0);
      end;
    else
      tmp = _hx_tab_array(tab, length);
    end;
    _gthis:handleEvent(tmp);
  end);
  if (not task.isWaitingForEvent or (fev ~= nil)) then 
    _G.term = task.pInfo.out;
    _G.environ = task.pInfo.env;
    self.currentTaskPid = task.pInfo.id;
    local tmp = fev;
    local n = (function() 
      local _hx_1
      if (tmp ~= nil) then 
      _hx_1 = tmp; else 
      _hx_1 = _hx_tab_array({}, 0); end
      return _hx_1
    end )();
    local length = nil;
    local tab = __lua_PairTools.copy(_hx_table.pack(_G.coroutine.resume(task.coroutine, _hx_table.unpack(__haxe__Rest_Rest_Impl_.of(n)))));
    local length = length;
    local tra;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        tra = _hx_tab_array(tab, length);
      else
        tra = _hx_tab_array({}, 0);
      end;
    else
      tra = _hx_tab_array(tab, length);
    end;
    local tr_success = tra[0];
    local tr_result = tra:slice(1);
    local n = tr_result;
    if (n[0] == "syscall") then 
      local o = self.syscallInterface:executeSyscall(n[1], _hx_table.unpack(__haxe__Rest_Rest_Impl_.of(n:slice(2))));
      local length = nil;
      local tab = __lua_PairTools.copy(o);
      local length = length;
      local tmp;
      if (length == nil) then 
        length = _hx_table.maxn(tab);
        if (length > 0) then 
          local head = tab[1];
          _G.table.remove(tab, 1);
          tab[0] = head;
          tmp = _hx_tab_array(tab, length);
        else
          tmp = _hx_tab_array({}, 0);
        end;
      else
        tmp = _hx_tab_array(tab, length);
      end;
      self:resumeTask(task, _hx_tab_array({[0]="syscall_result"}, 1):concat(tmp));
    else
      if ((n[0] == "preempt") and self.usePreemption) then 
        task.isWaitingForEvent = false;
      else
        task.isWaitingForEvent = true;
      end;
    end;
    self.currentTaskPid = -1;
    do return true end;
  else
    if (task.isWaitingForEvent and (task.taskQueue.length > 0)) then 
      _G.term = task.pInfo.out;
      _G.environ = task.pInfo.env;
      self.currentTaskPid = task.pInfo.id;
      local ev = task.taskQueue:shift();
      local length = nil;
      local tab = __lua_PairTools.copy(_hx_table.pack(_G.coroutine.resume(task.coroutine, _hx_table.unpack(__haxe__Rest_Rest_Impl_.of(ev)))));
      local length = length;
      local tra;
      if (length == nil) then 
        length = _hx_table.maxn(tab);
        if (length > 0) then 
          local head = tab[1];
          _G.table.remove(tab, 1);
          tab[0] = head;
          tra = _hx_tab_array(tab, length);
        else
          tra = _hx_tab_array({}, 0);
        end;
      else
        tra = _hx_tab_array(tab, length);
      end;
      local tr_success = tra[0];
      local tr_result = tra:slice(1);
      local n = tr_result;
      if (n[0] == "syscall") then 
        local o = self.syscallInterface:executeSyscall(n[1], _hx_table.unpack(__haxe__Rest_Rest_Impl_.of(n:slice(2))));
        local length = nil;
        local tab = __lua_PairTools.copy(o);
        local length = length;
        local tmp;
        if (length == nil) then 
          length = _hx_table.maxn(tab);
          if (length > 0) then 
            local head = tab[1];
            _G.table.remove(tab, 1);
            tab[0] = head;
            tmp = _hx_tab_array(tab, length);
          else
            tmp = _hx_tab_array({}, 0);
          end;
        else
          tmp = _hx_tab_array(tab, length);
        end;
        self:resumeTask(task, _hx_tab_array({[0]="syscall_result"}, 1):concat(tmp));
      else
        if ((n[0] == "preempt") and self.usePreemption) then 
          task.isWaitingForEvent = false;
        else
          task.isWaitingForEvent = true;
        end;
      end;
      self.currentTaskPid = -1;
      do return true end;
    else
      do return false end;
    end;
  end;
end
__scheduler_Scheduler.prototype.tick = function(self) 
  if (self.tasks.length == 0) then 
    self.kernel:panic("All tasks died", "Scheduler", 0, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/scheduler/Scheduler.hx",lineNumber=217,className="scheduler.Scheduler",methodName="tick"}));
  end;
  local n = false;
  local _g = 0;
  local _g1 = self.tasks;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local task = _g1[_g];
    _g = _g + 1;
    if (self:resumeTask(task)) then 
      n = true;
    end;
  end;
  if (not n) then 
    local length = nil;
    local tab = __lua_PairTools.copy(_hx_table.pack(_G.coroutine.yield()));
    local length = length;
    local ev;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        ev = _hx_tab_array(tab, length);
      else
        ev = _hx_tab_array({}, 0);
      end;
    else
      ev = _hx_tab_array(tab, length);
    end;
    self:handleEvent(ev);
  end;
end

__scheduler_Scheduler.prototype.__class__ =  __scheduler_Scheduler

__syscall_Syscall.new = function(name,callback) 
  local self = _hx_new(__syscall_Syscall.prototype)
  __syscall_Syscall.super(self,name,callback)
  return self
end
__syscall_Syscall.super = function(self,name,callback) 
  self.callback = nil;
  self.name = "";
  self.name = name;
  self.callback = callback;
end
__syscall_Syscall.__name__ = true
__syscall_Syscall.prototype = _hx_e();
__syscall_Syscall.prototype.name= nil;
__syscall_Syscall.prototype.callback= nil;

__syscall_Syscall.prototype.__class__ =  __syscall_Syscall

__syscall_SyscallExtension.new = function() 
  local self = _hx_new(__syscall_SyscallExtension.prototype)
  __syscall_SyscallExtension.super(self)
  return self
end
__syscall_SyscallExtension.super = function(self) 
end
__syscall_SyscallExtension.__name__ = true
__syscall_SyscallExtension.prototype = _hx_e();
__syscall_SyscallExtension.prototype.getSyscalls= nil;

__syscall_SyscallExtension.prototype.__class__ =  __syscall_SyscallExtension

__syscall_SyscallInterface.new = function(k) 
  local self = _hx_new(__syscall_SyscallInterface.prototype)
  __syscall_SyscallInterface.super(self,k)
  return self
end
__syscall_SyscallInterface.super = function(self,k) 
  self.syscalls = _hx_tab_array({}, 0);
  self.kernel = k;
end
__syscall_SyscallInterface.__name__ = true
__syscall_SyscallInterface.prototype = _hx_e();
__syscall_SyscallInterface.prototype.syscalls= nil;
__syscall_SyscallInterface.prototype.kernel= nil;
__syscall_SyscallInterface.prototype.addSyscall = function(self,syscall) 
  self.syscalls:push(syscall);
end
__syscall_SyscallInterface.prototype.addSyscallInterface = function(self,syscallExt) 
  self.syscalls = self.syscalls:concat(syscallExt:getSyscalls(self.kernel));
end
__syscall_SyscallInterface.prototype.executeSyscall = function(self,name,...) 
  local d = {...}
  local _g = 0;
  local _g1 = self.syscalls;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local syscall = _g1[_g];
    _g = _g + 1;
    if (syscall.name == name) then 
      local o;
      local _hx_status, _hx_result = pcall(function() 
      
          o = syscall.callback(_hx_table.unpack(d));
        return _hx_pcall_default
      end)
      if not _hx_status and _hx_result == "_hx_pcall_break" then
        break
      elseif not _hx_status then 
        local _g = _hx_result;
        local e = __haxe_Exception.caught(_g):unwrap();
        o = _hx_tab_array({[0]=_hx_o({__fields__={xType=true,xN=true,xValue=true},xType="errorobject",xN=0xfa115afe,xValue=e})}, 1);
      elseif _hx_result ~= _hx_pcall_default then
        return _hx_result
      end;
      do return __syscall__SyscallInterface_SyscallInterface_Fields_.enluaify(o) end;
    end;
  end;
  do return __syscall__SyscallInterface_SyscallInterface_Fields_.enluaify(_hx_tab_array({[0]=_hx_o({__fields__={xType=true,xN=true,xValue=true},xType="errorobject",xN=0xfa115afe,xValue=Std.string("No such syscall: ") .. Std.string(name)})}, 1)) end
end

__syscall_SyscallInterface.prototype.__class__ =  __syscall_SyscallInterface

__syscall__SyscallInterface_SyscallInterface_Fields_.new = {}
__syscall__SyscallInterface_SyscallInterface_Fields_.__name__ = true
__syscall__SyscallInterface_SyscallInterface_Fields_.enluaify = function(d) 
  if (__lua_Boot.__instanceof(d, Array)) then 
    local c = __lua_Boot.__cast(d , Array);
    local o = _hx_tab_array({}, 0);
    local _g_current = 0;
    local _g_array = c;
    while (_g_current < _g_array.length) do _hx_do_first_1 = false;
      
      local _g_value = _g_array[_g_current];
      _g_current = _g_current + 1;
      local _g_key = _g_current - 1;
      local index = _g_key;
      local value = _g_value;
      o[index] = __syscall__SyscallInterface_SyscallInterface_Fields_.enluaify(value);
    end;
    local ret = ({});
    local _g = 0;
    local _g1 = o.length;
    while (_g < _g1) do _hx_do_first_1 = false;
      
      _g = _g + 1;
      local idx = _g - 1;
      ret[idx + 1] = o[idx];
    end;
    do return ret end;
  else
    if (__lua_Boot.__instanceof(d, _G.table)) then 
      local o = ({});
      local obj = __haxe_ds_ObjectMap.new();
      __lua_PairTools.pairsFold(__lua_Boot.__cast(d , _G.table), function(k,v,m) 
        obj.h[k] = v;
        obj.k[k] = true;
        do return obj end;
      end, obj);
      local map = obj;
      local _g_map = map;
      local _g_keys = map:keys();
      while (_g_keys:hasNext()) do _hx_do_first_1 = false;
        
        local key = _g_keys:next();
        local _g_value = _g_map:get(key);
        local _g_key = key;
        local k = _g_key;
        local v = _g_value;
        o[k] = __syscall__SyscallInterface_SyscallInterface_Fields_.enluaify(v);
      end;
      do return o end;
    else
      do return d end;
    end;
  end;
end

__syscall_extensions_ArcosExtension.new = function() 
  local self = _hx_new(__syscall_extensions_ArcosExtension.prototype)
  __syscall_extensions_ArcosExtension.super(self)
  return self
end
__syscall_extensions_ArcosExtension.super = function(self) 
  __syscall_SyscallExtension.super(self);
end
__syscall_extensions_ArcosExtension.__name__ = true
__syscall_extensions_ArcosExtension.prototype = _hx_e();
__syscall_extensions_ArcosExtension.prototype.getSyscalls = function(self,kernel) 
  do return _hx_tab_array({[0]=__syscall_Syscall.new("panic", function(...) 
    local d = {...}
    local error = d[1];
    local file = d[2];
    local line = d[3];
    kernel:panic(error, file, line, nil, _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="./src/syscall/extensions/ArcosExtension.hx",lineNumber=14,className="syscall.extensions.ArcosExtension",methodName="getSyscalls"}));
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("log", function(...) 
    local d = {...}
    local message = d[1];
    local level = d[2];
    Logger.log(message, level, true, true, nil);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("version", function(...) 
    local d = {...}
    if (not kernel.rootFs:exists("/config/arc/base.meta.json")) then 
      do return _hx_tab_array({[0]="invalid package metadata"}, 1) end;
    end;
    local fH = kernel.rootFs:open("/config/arc/base.meta.json", "r");
    local meta = __haxe_Json.parse(fH:read());
    fH:close();
    if (meta.version == nil) then 
      do return _hx_tab_array({[0]="invalid package metadata"}, 1) end;
    else
      do return _hx_tab_array({[0]=meta.version}, 1) end;
    end;
  end), __syscall_Syscall.new("uname", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=Std.string(Std.string(Std.string("Syne") .. Std.string("Helica")) .. Std.string(" built on Haxe ")) .. Std.string("4.306")}, 1) end;
  end), __syscall_Syscall.new("getName", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.label()}, 1) end;
  end), __syscall_Syscall.new("setName", function(...) 
    local d = {...}
    if (kernel.scheduler:getCurrentTask().user ~= "root") then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    KDriversImpl.computer.setlabel(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("getCurrentTask", function(...) 
    local d = {...}
    local ct = kernel.scheduler:getCurrentTask();
    do return _hx_tab_array({[0]=_hx_o({__fields__={name=true,pid=true,user=true,nice=true,paused=true,env=true},name=ct.name,pid=ct.id,user=ct.user,nice=ct.nice,paused=ct.paused,env=ct.env})}, 1) end;
  end), __syscall_Syscall.new("getUsers", function(...) 
    local d = {...}
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = kernel.userManager.users;
    while (_g1 < _g2.length) do _hx_do_first_1 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      _g:push(i.name);
    end;
    do return _hx_tab_array({[0]=_g}, 1) end;
  end), __syscall_Syscall.new("getKernelLogBuffer", function(...) 
    local d = {...}
    if (kernel.scheduler:getCurrentTask().user ~= "root") then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    do return _hx_tab_array({[0]=Logger.kLog}, 1) end;
  end), __syscall_Syscall.new("time", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.time(d[1])}, 1) end;
  end), __syscall_Syscall.new("day", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.day(d[1])}, 1) end;
  end), __syscall_Syscall.new("epoch", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.epoch(d[1])}, 1) end;
  end), __syscall_Syscall.new("date", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.date(d[1])}, 1) end;
  end), __syscall_Syscall.new("queue", function(...) 
    local d = {...}
    if (kernel.scheduler:getCurrentTask().user ~= "root") then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    local _g = 0;
    local _g1 = kernel.scheduler.tasks;
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local task = _g1[_g];
      _g = _g + 1;
      task.taskQueue:push(__haxe__Rest_Rest_Impl_.toArray(d));
    end;
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("clock", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.uptime()}, 1) end;
  end), __syscall_Syscall.new("startTimer", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.timers.start(d[1])}, 1) end;
  end), __syscall_Syscall.new("cancelTimer", function(...) 
    local d = {...}
    KDriversImpl.timers.cancel(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("setAlarm", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.timers.setalarm(d[1])}, 1) end;
  end), __syscall_Syscall.new("cancelAlarm", function(...) 
    local d = {...}
    KDriversImpl.timers.cancelalarm(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("getID", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.computer.id}, 1) end;
  end), __syscall_Syscall.new("getHome", function(...) 
    local d = {...}
    if (not kernel.rootFs:exists(Std.string(Std.string("/user/") .. Std.string(kernel.scheduler:getCurrentTask().user)) .. Std.string("/home"))) then 
      kernel.rootFs:mkDir(Std.string(Std.string("/user/") .. Std.string(kernel.scheduler:getCurrentTask().user)) .. Std.string("/home"));
    end;
    do return _hx_tab_array({[0]=Std.string("/user/") .. Std.string(kernel.scheduler:getCurrentTask().user)}, 1) end;
  end), __syscall_Syscall.new("validateUser", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=kernel.userManager:validateUser(d[1], d[2])}, 1) end;
  end), __syscall_Syscall.new("createUser", function(...) 
    local d = {...}
    if (kernel.scheduler:getCurrentTask().user ~= "root") then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.userManager:add(d[1], d[2]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("deleteUser", function(...) 
    local d = {...}
    if (kernel.scheduler:getCurrentTask().user ~= "root") then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.userManager:remove(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("terminal.getKeymap", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=KDriversImpl.terminal.kMap}, 1) end;
  end)}, 25) end
end

__syscall_extensions_ArcosExtension.prototype.__class__ =  __syscall_extensions_ArcosExtension
__syscall_extensions_ArcosExtension.__super__ = __syscall_SyscallExtension
setmetatable(__syscall_extensions_ArcosExtension.prototype,{__index=__syscall_SyscallExtension.prototype})

__syscall_extensions_ExampleDevice.new = function() 
  local self = _hx_new(__syscall_extensions_ExampleDevice.prototype)
  __syscall_extensions_ExampleDevice.super(self)
  return self
end
__syscall_extensions_ExampleDevice.super = function(self) 
  self.data = "";
  Device.super(self);
  self.name = "exampledevice";
  self.types = _hx_tab_array({[0]="example", "virtual"}, 2);
end
__syscall_extensions_ExampleDevice.__name__ = true
__syscall_extensions_ExampleDevice.prototype = _hx_e();
__syscall_extensions_ExampleDevice.prototype.data= nil;
__syscall_extensions_ExampleDevice.prototype.getHandle = function(self,mode) 
  local _gthis = self;
  local fho = true;
  local pos = 0;
  do return _hx_o({__fields__={read=true,readAll=true,write=true,seek=true,isOpen=true,close=true},read=function(self,count) 
    do return String.prototype.substr(_gthis.data, pos, count) end;
  end,readAll=function(self) 
    do return _gthis.data end;
  end,write=function(self,data) 
    _gthis.data = data;
  end,seek=function(self,whence,offset) 
    if (whence == "set") then 
      pos = offset;
    else
      if (whence == "cur") then 
        pos = pos + offset;
      else
        if (whence == "end") then 
          pos = #_gthis.data - offset;
        end;
      end;
    end;
  end,isOpen=function(self) 
    do return fho end;
  end,close=function(self) 
    fho = false;
  end}) end
end

__syscall_extensions_ExampleDevice.prototype.__class__ =  __syscall_extensions_ExampleDevice
__syscall_extensions_ExampleDevice.__super__ = Device
setmetatable(__syscall_extensions_ExampleDevice.prototype,{__index=Device.prototype})

__syscall_extensions_DeviceExtension.new = function() 
  local self = _hx_new(__syscall_extensions_DeviceExtension.prototype)
  __syscall_extensions_DeviceExtension.super(self)
  return self
end
__syscall_extensions_DeviceExtension.super = function(self) 
  __syscall_SyscallExtension.super(self);
end
__syscall_extensions_DeviceExtension.__name__ = true
__syscall_extensions_DeviceExtension.prototype = _hx_e();
__syscall_extensions_DeviceExtension.prototype.getSyscalls = function(self,kernel) 
  do return _hx_tab_array({[0]=__syscall_Syscall.new("devices.names", function(...) 
    local d = {...}
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = kernel.dm.devices;
    while (_g1 < _g2.length) do _hx_do_first_1 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      _g:push(i.name);
    end;
    do return _g end;
  end), __syscall_Syscall.new("devices.find", function(...) 
    local d = {...}
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = kernel.dm.devices;
    while (_g1 < _g2.length) do _hx_do_first_1 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      if (i.types:contains(d[1])) then 
        _g:push(i);
      end;
    end;
    local _g1 = _hx_tab_array({}, 0);
    local _g2 = 0;
    local _g = _g;
    while (_g2 < _g.length) do _hx_do_first_1 = false;
      
      local i = _g[_g2];
      _g2 = _g2 + 1;
      _g1:push(__syscall_extensions__DeviceExtension_DeviceExtension_Fields_.craftifyDevice(i));
    end;
    do return _g1 end;
  end), __syscall_Syscall.new("devices.get", function(...) 
    local d = {...}
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = kernel.dm.devices;
    while (_g1 < _g2.length) do _hx_do_first_1 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      if (i.name == d[1]) then 
        _g:push(i);
      end;
    end;
    local _g1 = _hx_tab_array({}, 0);
    local _g2 = 0;
    local _g = _g;
    while (_g2 < _g.length) do _hx_do_first_1 = false;
      
      local i = _g[_g2];
      _g2 = _g2 + 1;
      _g1:push(__syscall_extensions__DeviceExtension_DeviceExtension_Fields_.craftifyDevice(i));
    end;
    do return _g1 end;
  end)}, 3) end
end

__syscall_extensions_DeviceExtension.prototype.__class__ =  __syscall_extensions_DeviceExtension
__syscall_extensions_DeviceExtension.__super__ = __syscall_SyscallExtension
setmetatable(__syscall_extensions_DeviceExtension.prototype,{__index=__syscall_SyscallExtension.prototype})

__syscall_extensions__DeviceExtension_DeviceExtension_Fields_.new = {}
__syscall_extensions__DeviceExtension_DeviceExtension_Fields_.__name__ = true
__syscall_extensions__DeviceExtension_DeviceExtension_Fields_.craftifyDevice = function(d) 
  local d1 = d.name;
  local arr = d.types;
  local ret = ({});
  local _g = 0;
  local _g1 = arr.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local idx = _g - 1;
    ret[idx + 1] = arr[idx];
  end;
  local n = _hx_o({__fields__={name=true,types=true,sendData=true,recvData=true,onEvent=true,onActivate=true,onDeactivate=true},name=d1,types=ret,sendData=function(self,data) 
    local h = d:getHandle(FileMode.Write);
    h:write(data);
    h:close();
  end,recvData=function(self) 
    local h = d:getHandle(FileMode.Read);
    local data = h:readAll();
    h:close();
    do return data end;
  end,onEvent=function(self) 
    do return end;
  end,onActivate=function(self) 
    do return end;
  end,onDeactivate=function(self) 
    do return end;
  end});
  local _g = 0;
  local _g1 = Reflect.fields(d.dinterface);
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local k = _g1[_g];
    _g = _g + 1;
    Reflect.setProperty(n, k, Reflect.getProperty(d.dinterface, k));
  end;
  do return n end;
end

__syscall_extensions_FilesystemExtension.new = function() 
  local self = _hx_new(__syscall_extensions_FilesystemExtension.prototype)
  __syscall_extensions_FilesystemExtension.super(self)
  return self
end
__syscall_extensions_FilesystemExtension.super = function(self) 
  self.sigma = 0;
  self.openFiles = ({});
  __syscall_SyscallExtension.super(self);
end
__syscall_extensions_FilesystemExtension.__name__ = true
__syscall_extensions_FilesystemExtension.prototype = _hx_e();
__syscall_extensions_FilesystemExtension.prototype.openFiles= nil;
__syscall_extensions_FilesystemExtension.prototype.sigma= nil;
__syscall_extensions_FilesystemExtension.prototype.getSyscalls = function(self,kernel) 
  local _gthis = self;
  local checkPipe = function(handle) 
    if ((_gthis.openFiles[handle] == nil) or not _gthis.openFiles[handle]:getIfOpen()) then 
      _G.error(__haxe_Exception.thrown("Broken pipe"),0);
    end;
  end;
  do return _hx_tab_array({[0]=__syscall_Syscall.new("fs.getPermissions", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=kernel.rootFs:getPermissions(d[1], d[2])}, 1) end;
  end), __syscall_Syscall.new("fs.open", function(...) 
    local d = {...}
    local file = d[1];
    local mode = d[2];
    if (((((mode == "r") or (mode == "a")) or (mode == "r+")) or (mode == "w+")) or (mode == "rb")) then 
      if (not kernel.rootFs:getPermissions(d[1], d[2]).read) then 
        _G.error(__haxe_Exception.thrown("No permission for this action"),0);
      end;
    end;
    if (((((mode == "w") or (mode == "w+")) or (mode == "r+")) or (mode == "a")) or (mode == "wb")) then 
      if (not kernel.rootFs:getPermissions(d[1], d[2]).write) then 
        _G.error(__haxe_Exception.thrown("No permission for this action"),0);
      end;
    end;
    local handle = kernel.rootFs:open(file, mode);
    _gthis.sigma = _gthis.sigma + 1;
    _gthis.openFiles[_gthis.sigma] = handle;
    do return _hx_tab_array({[0]=_gthis.sigma}, 1) end;
  end), __syscall_Syscall.new("fs.attributes", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=kernel.rootFs:attributes(d[1])}, 1) end;
  end), __syscall_Syscall.new("fs.fClose", function(...) 
    local d = {...}
    local handle = d[1];
    checkPipe(handle);
    _gthis.openFiles[handle]:close();
    _gthis.openFiles[handle] = nil;
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.fSeek", function(...) 
    local d = {...}
    local handle = d[1];
    local offset = d[2];
    local whence = d[3];
    checkPipe(handle);
    _gthis.openFiles[handle]:seek(offset, whence);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.fRead", function(...) 
    local d = {...}
    local handle = d[1];
    checkPipe(handle);
    do return _hx_tab_array({[0]=_gthis.openFiles[handle]:read()}, 1) end;
  end), __syscall_Syscall.new("fs.fReadBytes", function(...) 
    local d = {...}
    local handle = d[1];
    local length = d[2];
    checkPipe(handle);
    do return _hx_tab_array({[0]=_gthis.openFiles[handle]:readBytes(length)}, 1) end;
  end), __syscall_Syscall.new("fs.fWrite", function(...) 
    local d = {...}
    local handle = d[1];
    local data = d[2];
    checkPipe(handle);
    _gthis.openFiles[handle]:write(data);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.fWriteLine", function(...) 
    local d = {...}
    local handle = d[1];
    local data = d[2];
    checkPipe(handle);
    _gthis.openFiles[handle]:writeLine(data);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.fReadLine", function(...) 
    local d = {...}
    local handle = d[1];
    do return _hx_tab_array({[0]=_gthis.openFiles[handle]:readLine()}, 1) end;
  end), __syscall_Syscall.new("fs.fSync", function(...) 
    local d = {...}
    local handle = d[1];
    checkPipe(handle);
    _gthis.openFiles[handle]:flush();
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.list", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=kernel.rootFs:list(d[1])}, 1) end;
  end), __syscall_Syscall.new("fs.exists", function(...) 
    local d = {...}
    if (_gthis.openFiles[d[1]] == nil) then 
      _G.error(__haxe_Exception.thrown("Broken pipe"),0);
    end;
    do return _hx_tab_array({[0]=kernel.rootFs:exists(d[1])}, 1) end;
  end), __syscall_Syscall.new("fs.mkDir", function(...) 
    local d = {...}
    if (not kernel.rootFs:getPermissions(__lua_Boot.__cast(d[1] , String)).write) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.rootFs:mkDir(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.remove", function(...) 
    local d = {...}
    if (not kernel.rootFs:getPermissions(d[1]).write) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.rootFs:remove(d[1]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.copy", function(...) 
    local d = {...}
    if (not kernel.rootFs:getPermissions(d[1]).read) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    if (not kernel.rootFs:getPermissions(d[2]).write) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.rootFs:copy(d[1], d[2]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.move", function(...) 
    local d = {...}
    if (not kernel.rootFs:getPermissions(d[1]).read) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    if (not kernel.rootFs:getPermissions(d[1]).write) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    if (not kernel.rootFs:getPermissions(d[2]).write) then 
      _G.error(__haxe_Exception.thrown("No permission for this action"),0);
    end;
    kernel.rootFs:move(d[1], d[2]);
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("fs.getMountRoot", function(...) 
    local d = {...}
    do return _hx_tab_array({[0]=kernel.rootFs:getMountRoot(d[1])}, 1) end;
  end)}, 18) end
end

__syscall_extensions_FilesystemExtension.prototype.__class__ =  __syscall_extensions_FilesystemExtension
__syscall_extensions_FilesystemExtension.__super__ = __syscall_SyscallExtension
setmetatable(__syscall_extensions_FilesystemExtension.prototype,{__index=__syscall_SyscallExtension.prototype})

__syscall_extensions_TaskingExtension.new = function() 
  local self = _hx_new(__syscall_extensions_TaskingExtension.prototype)
  __syscall_extensions_TaskingExtension.super(self)
  return self
end
__syscall_extensions_TaskingExtension.super = function(self) 
  __syscall_SyscallExtension.super(self);
end
__syscall_extensions_TaskingExtension.__name__ = true
__syscall_extensions_TaskingExtension.prototype = _hx_e();
__syscall_extensions_TaskingExtension.prototype.getSyscalls = function(self,kernel) 
  do return _hx_tab_array({[0]=__syscall_Syscall.new("tasking.createTask", function(...) 
    local d = {...}
    local name = d[1];
    local callback = d[2];
    local tmp = d[3];
    local nice = (function() 
      local _hx_1
      if (tmp ~= nil) then 
      _hx_1 = tmp; else 
      _hx_1 = 0; end
      return _hx_1
    end )();
    local tmp = d[4];
    local user = (function() 
      local _hx_2
      if (tmp ~= nil) then 
      _hx_2 = tmp; else 
      _hx_2 = kernel.scheduler:getCurrentTask().user; end
      return _hx_2
    end )();
    local tmp = d[5];
    local out = (function() 
      local _hx_3
      if (tmp ~= nil) then 
      _hx_3 = tmp; else 
      _hx_3 = term; end
      return _hx_3
    end )();
    local tmp = d[6];
    local env = (function() 
      local _hx_4
      if (tmp ~= nil) then 
      _hx_4 = tmp; else 
      _hx_4 = environ; end
      return _hx_4
    end )();
    if (not __lua_Boot.__instanceof(name, String)) then 
      _G.error(__haxe_Exception.thrown("Name must be string"),0);
    end;
    if (not __lua_Boot.__instanceof(nice, Int)) then 
      _G.error(__haxe_Exception.thrown("Nice must be integer"),0);
    end;
    if (not __lua_Boot.__instanceof(user, String)) then 
      _G.error(__haxe_Exception.thrown("User must be string"),0);
    end;
    if ((env ~= nil) and not __lua_Boot.__instanceof(env, _G.table)) then 
      _G.error(__haxe_Exception.thrown("Env must be table"),0);
    end;
    if ((kernel.scheduler:getCurrentTask().user ~= "root") and (user ~= kernel.scheduler:getCurrentTask().user)) then 
      _G.error(__haxe_Exception.thrown("No permission for this action (note: you can use tasking.changeuser to change the current user)"),0);
    end;
    local v = kernel.scheduler:addTask(name, callback, user, out);
    kernel.scheduler.tasks[v].pInfo.nice = nice;
    kernel.scheduler.tasks[v].pInfo.out = out;
    do return _hx_tab_array({[0]=v}, 1) end;
  end), __syscall_Syscall.new("tasking.getTasks", function(...) 
    local _ = {...}
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = kernel.scheduler.tasks;
    while (_g1 < _g2.length) do _hx_do_first_1 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      _g:push(_hx_o({__fields__={name=true,pid=true,user=true,nice=true,paused=true,env=true},name=i.pInfo.name,pid=i.pInfo.id,user=i.pInfo.user,nice=i.pInfo.nice,paused=i.pInfo.paused,env=i.pInfo.env}));
    end;
    do return _hx_tab_array({[0]=_g}, 1) end;
  end), __syscall_Syscall.new("tasking.setTaskPaused", function(...) 
    local d = {...}
    local pid = d[1];
    local paused = d[2];
    if (not __lua_Boot.__instanceof(pid, Int)) then 
      _G.error(__haxe_Exception.thrown("Pid must be integer"),0);
    end;
    if (not __lua_Boot.__instanceof(paused, Bool)) then 
      _G.error(__haxe_Exception.thrown("Paused must be boolean"),0);
    end;
    if ((kernel.scheduler:getCurrentTask().user ~= "root") and (kernel.scheduler.tasks[pid].pInfo.user ~= kernel.scheduler:getCurrentTask().user)) then 
      _G.error(__haxe_Exception.thrown("No permission for this action (note: you can use tasking.changeuser to change the current user)"),0);
    end;
    kernel.scheduler.tasks[pid].pInfo.paused = paused;
    do return _hx_tab_array({}, 0) end;
  end), __syscall_Syscall.new("tasking.changeUser", function(...) 
    local d = {...}
    local user = d[1];
    local password = d[2];
    if (not __lua_Boot.__instanceof(user, String)) then 
      _G.error(__haxe_Exception.thrown("User must be string"),0);
    end;
    if ((kernel.scheduler:getCurrentTask().user ~= "root") and not __lua_Boot.__instanceof(password, String)) then 
      _G.error(__haxe_Exception.thrown("Password must be string"),0);
    end;
    if ((kernel.scheduler:getCurrentTask().user == "root") or kernel.userManager:validateUser(user, password)) then 
      kernel.scheduler:getCurrentTask().user = user;
      do return _hx_tab_array({[0]=true}, 1) end;
    else
      do return _hx_tab_array({[0]=false}, 1) end;
    end;
  end)}, 4) end
end

__syscall_extensions_TaskingExtension.prototype.__class__ =  __syscall_extensions_TaskingExtension
__syscall_extensions_TaskingExtension.__super__ = __syscall_SyscallExtension
setmetatable(__syscall_extensions_TaskingExtension.prototype,{__index=__syscall_SyscallExtension.prototype})
local hasBit32, bit32 = pcall(require, 'bit32')
if hasBit32 then --if we are on Lua 5.1, bit32 will be the default.
  _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end
else
  --If we do not have bit32, fallback to 'bit'
  local hasBit, bit = pcall(require, 'bit')
  if not hasBit then
    error("Failed to load bit or bit32")
  end
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
end

-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;KernelConfig.logLevel = 0;
  
  Logger.kLog = "";
  
  __haxe_ds_IntMap.tnull = ({});
  
  __haxe_ds_StringMap.tnull = ({});
  
  
end

_hx_print = print or (function() end)

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
