
var exports = {};
// Generated by Haxe 4.3.6
(function ($hx_exports, $global) { "use strict";
$hx_exports["typedefs"] = $hx_exports["typedefs"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class Transition {
	constructor(direction,anim,curve,duration) {
		this.duration = 1000;
		this.curve = "easein";
		this.anim = "over";
		this.direction = "left";
		if(direction != null) {
			this.direction = direction;
		}
		if(anim != null) {
			this.anim = anim;
		}
		if(curve != null) {
			this.curve = curve;
		}
		if(duration != null) {
			this.duration = duration;
		}
	}
	run(callback,min,max) {
		let l = max - min;
		let divider = 2;
		let el = l / divider;
		let la = this.duration / el;
		let i = 0;
		let t = new haxe_Timer(la | 0);
		let _gthis = this;
		t.run = function() {
			callback(_gthis.getValue(i / el) * l + min);
			if(i == el) {
				t.stop();
				return;
			}
			i += 1;
		};
	}
	copy() {
		return new Transition(this.direction,this.anim,this.curve,this.duration);
	}
	runForScreens(callback,screenwidth,screenheight) {
		let _gthis = this;
		let cb = function(n) {
			let e = n | 0;
			switch(_gthis.anim) {
			case "over":
				switch(_gthis.direction) {
				case "bottom":
					callback(0,0,0,e - screenheight,false,n / screenheight);
					break;
				case "left":
					callback(0,0,e - screenwidth,0,false,n / screenwidth);
					break;
				case "right":
					callback(0,0,screenwidth - e,0,false,n / screenwidth);
					break;
				case "top":
					callback(0,0,0,screenheight - e,false,n / screenheight);
					break;
				}
				break;
			case "slide":
				switch(_gthis.direction) {
				case "bottom":
					callback(0,e,0,e - screenheight,false,n / screenheight);
					break;
				case "left":
					callback(e,0,e - screenwidth,0,false,n / screenwidth);
					break;
				case "right":
					callback(-e,0,screenwidth - e,0,false,n / screenwidth);
					break;
				case "top":
					callback(0,-e,0,screenheight - e,false,n / screenheight);
					break;
				}
				break;
			case "under":
				switch(_gthis.direction) {
				case "bottom":
					callback(0,e,0,0,true,n / screenheight);
					break;
				case "left":
					callback(e,0,0,0,true,n / screenwidth);
					break;
				case "right":
					callback(-e,0,0,0,true,n / screenwidth);
					break;
				case "top":
					callback(0,-e,0,0,true,n / screenheight);
					break;
				}
				break;
			}
		};
		switch(this.direction) {
		case "bottom":case "top":
			this.run(cb,0,screenheight);
			break;
		case "left":case "right":
			this.run(cb,0,screenwidth);
			break;
		}
	}
	getValue(ratioa) {
		let ratio = ratioa;
		switch(this.curve) {
		case "ease":
			return new hxease_BackEaseInOut(0).calculate(ratio);
		case "easein":
			return new hxease_BackEaseIn(0).calculate(ratio);
		case "easeout":
			return new hxease_BackEaseOut(0).calculate(ratio);
		default:
			return new hxease_LinearEaseNone().calculate(ratio);
		}
	}
}
$hx_exports["Transition"] = Transition;
Transition.__name__ = true;
Object.assign(Transition.prototype, {
	__class__: Transition
	,direction: null
	,anim: null
	,curve: null
	,duration: null
});
class Command {
	constructor(type,value,transition) {
		this.transition = new Transition("left","over","easein");
		this.value = "-- Target is the widget which runs this command\nlocal target = { ... }";
		this.type = "execLua";
		if(type != null) {
			this.type = type;
		}
		if(value != null) {
			this.value = value;
		}
		if(transition != null) {
			this.transition = transition;
		}
	}
	serialize() {
		return { type : "Command", ctype : this.type, value : this.value, transition : { dir : this.transition.direction, anim : this.transition.anim, curve : this.transition.curve, duration : this.transition.duration}};
	}
	execute(runner,screenwidth,screenheight) {
		switch(this.type) {
		case "execLua":
			break;
		case "goToScreen":
			let s1 = new Buffer(screenwidth | 0,screenheight | 0);
			let s2 = new Buffer(screenwidth | 0,screenheight | 0);
			let _g = 0;
			let _g1 = runner.getWman().current().getPRenderCommands(screenwidth,screenheight,false);
			while(_g < _g1.length) {
				let command = _g1[_g];
				++_g;
				s1.addPRC(command);
			}
			runner.getWman().screens[Std.parseInt(this.value)].x = 0;
			runner.getWman().screens[Std.parseInt(this.value)].y = 0;
			let tmp = runner.getWman().screens;
			let tmp1 = Std.parseInt(this.value);
			let tmp2 = runner.getWman().term.getSize().x | 0;
			tmp[tmp1].width = tmp2;
			let tmp3 = runner.getWman().screens;
			let tmp4 = Std.parseInt(this.value);
			let tmp5 = runner.getWman().term.getSize().y | 0;
			tmp3[tmp4].height = tmp5;
			let _g2 = 0;
			let _g3 = runner.getWman().screens[Std.parseInt(this.value)].getPRenderCommands(screenwidth,screenheight,false);
			while(_g2 < _g3.length) {
				let command = _g3[_g2];
				++_g2;
				s2.addPRC(command);
			}
			this.transition.runForScreens(function(prevx,prevy,newx,newy,firstOnTop,progress) {
				let b = new Buffer(screenwidth | 0,screenheight | 0);
				if(firstOnTop) {
					b.blitBuffer(s2,newx,newy);
					b.blitBuffer(s1,prevx,prevy);
				} else {
					b.blitBuffer(s1,prevx,prevy);
					b.blitBuffer(s2,newx,newy);
				}
				b.draw(runner.getWman().term);
			},screenwidth | 0,screenheight | 0);
			runner.getWman().currentScreen = Std.parseInt(this.value);
			runner.requestRerender();
			runner.requestRerender();
			break;
		}
	}
	static deserialize(d) {
		if(!Object.prototype.hasOwnProperty.call(d,"type") || d["type"] != "Command") {
			throw new haxe_Exception("Not a command.");
		}
		let t = d["transition"];
		return new Command(d["ctype"],d["value"],new Transition(t["dir"],t["anim"],t["curve"],t["duration"]));
	}
}
$hx_exports["Command"] = Command;
Command.__name__ = true;
Object.assign(Command.prototype, {
	__class__: Command
	,type: null
	,value: null
	,transition: null
});
class Widget {
	constructor() {
		if(Widget._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.requestsRerender = false;
		this.lsh = 0.0;
		this.lsw = 0.0;
		this.id = Std.string(Math.random() * 1000000000);
		this.wman = null;
		this.style = new Style();
		this.parent = null;
		this.visible = true;
		this.children = [];
		this.oh = 1;
		this.ow = 10;
		this.height = 1;
		this.width = 10;
		this.hexpand = 0;
		this.vexpand = 0;
		this.ya = 0;
		this.xa = 0;
		this.y = 0;
		this.x = 0;
	}
	requestRerender() {
		this.requestsRerender = true;
	}
	getWman() {
		if(this.wman != null) {
			return this.wman;
		} else if(this.parent != null) {
			return this.parent.getWman();
		} else {
			return new ScreenManager(null);
		}
	}
	fixedWidth(screenwidth,screenheight,ignoreParent) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		return Math.round(this.width + this.hexpand * (ignoreParent ? screenwidth : this.parent.fixedWidth(screenwidth,screenheight)));
	}
	fixedHeight(screenwidth,screenheight,ignoreParent) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		return Math.round(this.height + this.vexpand * (ignoreParent ? screenheight : this.parent.height));
	}
	getPRenderCommands(screenwidth,screenheight,respectPosition) {
		if(respectPosition == null) {
			respectPosition = true;
		}
		this.lsw = screenwidth;
		this.lsh = screenheight;
		if(!this.visible) {
			return [];
		}
		let oldw = this.width + 1 - 1;
		let oldh = this.height + 1 - 1;
		this.ow = oldw;
		this.oh = oldh;
		let fwidth = this.fixedWidth(screenwidth,screenheight);
		let fheight = this.fixedHeight(screenwidth,screenheight);
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let c = _g1[_g];
			++_g;
			c.parent = this;
		}
		let rc = [];
		let _g2 = 0;
		let _g3 = fwidth;
		while(_g2 < _g3) {
			let i = _g2++;
			let _g = 0;
			let _g1 = fheight;
			while(_g < _g1) {
				let ix = _g++;
				rc.push(new PositionedRenderCommand(i,ix," ",this.id,this.style.fgColor,this.style.bgColor));
			}
		}
		let _g4 = 0;
		let _g5 = this.renderImpl(screenwidth,screenheight,fwidth,fheight);
		while(_g4 < _g5.length) {
			let i = _g5[_g4];
			++_g4;
			rc.push(i);
		}
		let nrc = [];
		let _g6 = 0;
		while(_g6 < rc.length) {
			let command = rc[_g6];
			++_g6;
			if(command.x >= fwidth || command.y >= fheight || command.x < 0 || command.y < 0) {
				continue;
			}
			if(respectPosition) {
				command.x = Math.floor(this.fixedXC(command.x,screenwidth,screenheight,true,true));
				command.y = Math.floor(this.fixedYC(command.y,screenwidth,screenheight,true,true));
			}
			nrc.push(command);
		}
		this.width = oldw;
		this.height = oldh;
		return nrc;
	}
	fixedX(screenwidth,screenheight,ignoreParent) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		let x = this.fixedXC(0,screenwidth,screenheight,ignoreParent,true);
		return x;
	}
	fixedY(screenwidth,screenheight,ignoreParent) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		let x = this.fixedYC(0,screenwidth,screenheight,ignoreParent,true);
		return x;
	}
	fixedXC(xc,screenwidth,screenheight,ignoreParent,includeThis) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		if(!ignoreParent) {
			screenwidth = this.parent.fixedWidth(screenwidth,screenheight);
			screenheight = this.parent.fixedHeight(screenwidth,screenheight);
		}
		return Math.floor(xc + (includeThis ? this.x : 0) + this.xa * screenwidth + (ignoreParent ? 0 : this.parent.fixedX(screenwidth,screenheight)) - this.xa * this.fixedWidth(screenwidth,screenheight));
	}
	fixedYC(yc,screenwidth,screenheight,ignoreParent,includeThis) {
		if(ignoreParent == null) {
			ignoreParent = false;
		}
		if(this.parent == null) {
			ignoreParent = true;
		}
		if(!ignoreParent) {
			screenwidth = this.parent.fixedWidth(screenwidth,screenheight);
			screenheight = this.parent.fixedHeight(screenwidth,screenheight);
		}
		return Math.floor(yc + (includeThis ? this.y : 0) + this.ya * screenheight + (ignoreParent ? 0 : this.parent.fixedY(screenwidth,screenheight)) - this.ya * this.fixedHeight(screenwidth,screenheight));
	}
	addChild(child) {
		child.parent = this;
		this.children.push(child);
	}
	remChild(child) {
		child.parent = null;
		HxOverrides.remove(this.children,child);
	}
	getChildByID(id) {
		let _g = 0;
		let _g1 = this.recFilterChildren(function(w) {
			return w.id == id;
		});
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			return widget;
		}
		throw new haxe_Exception("Cannot find child with id " + id);
	}
	recFilterChildren(filter) {
		let ch = [];
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			if(filter(widget)) {
				ch.push(widget);
			}
			ch = ch.concat(widget.recFilterChildren(filter));
		}
		ch.reverse();
		return ch;
	}
	recFilterChildrenUF(filter) {
		let ch = [];
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			let cha = widget.recFilterChildrenUF(filter);
			let r = widget;
			r.children = cha;
			if(filter(widget)) {
				ch.push(widget);
			}
		}
		ch.reverse();
		return ch;
	}
	getSize() {
		if(!this.visible) {
			return new Vector2f(0,0);
		}
		return new Vector2f(this.width,this.height);
	}
	onClick(pos,mb,wself) {
	}
	onDrag(startpos,pos,mb,wself) {
	}
	onClickUp(startpos,pos,mb,wself) {
	}
	onScroll(pos,dir,wself) {
	}
	onCustom(c) {
	}
	onRender() {
	}
	getEditorFields() {
		let a = this.additionalEditorFields();
		let this_h = Object.create(null);
		this_h["style"] = "Style";
		this_h["id"] = "ID";
		this_h["x"] = "X";
		this_h["y"] = "Y";
		this_h["width"] = "Width";
		this_h["height"] = "Height";
		this_h["xa"] = "X align";
		this_h["ya"] = "Y align";
		this_h["hexpand"] = "Expand on X axis";
		this_h["vexpand"] = "Expand on Y axis";
		let h = this_h;
		let _g_h = h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g_key = key;
			let _g_value = _g_h[key];
			let s = _g_key;
			let v = _g_value;
			a.h[s] = v;
		}
		return a;
	}
	serialize() {
		let data = new haxe_ds_StringMap();
		let h = this.serializeAdditional().h;
		let _g_h = h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g_key = key;
			let _g_value = _g_h[key];
			let k = _g_key;
			let v = _g_value;
			let v1 = v;
			data.h[k] = v1;
		}
		let serializeValues_h = Object.create(null);
		serializeValues_h["x"] = Float;
		serializeValues_h["y"] = Float;
		serializeValues_h["xa"] = Float;
		serializeValues_h["ya"] = Float;
		serializeValues_h["vexpand"] = Float;
		serializeValues_h["hexpand"] = Float;
		serializeValues_h["width"] = Float;
		serializeValues_h["height"] = Float;
		serializeValues_h["id"] = String;
		serializeValues_h["children"] = Array;
		serializeValues_h["style"] = Style;
		let h1 = serializeValues_h;
		let _g_h1 = h1;
		let _g_keys1 = Object.keys(h1);
		let _g_length1 = _g_keys1.length;
		let _g_current1 = 0;
		while(_g_current1 < _g_length1) {
			let key = _g_keys1[_g_current1++];
			let _g_key = key;
			let _g_value = _g_h1[key];
			let name = _g_key;
			let type = _g_value;
			let rp = name;
			if(rp == "width") {
				rp = "ow";
			}
			if(rp == "height") {
				rp = "oh";
			}
			let v = Reflect.getProperty(this,rp);
			data.h[name] = v;
			if(((data.h[name]) instanceof Style)) {
				let _g = new haxe_ds_StringMap();
				_g.h["fgColor"] = this.style.fgColor.blit;
				_g.h["bgColor"] = this.style.bgColor.blit;
				let newData = _g;
				data.h[name] = newData;
			}
			if(name == "children") {
				let ncmd = [];
				let _g = 0;
				let _g1 = this.children;
				while(_g < _g1.length) {
					let widget = _g1[_g];
					++_g;
					ncmd.push(widget.serialize());
				}
				data.h[name] = ncmd;
			}
		}
		let v = this.getTypename();
		data.h["typeName"] = v;
		return data;
	}
	toJSON() {
		return haxe_format_JsonPrinter.print(this.serialize(),null,null);
	}
	static deserialize(data) {
		if(Object.prototype.hasOwnProperty.call(Values.typenames.h,data["typeName"])) {
			let ObjectType = Values.typenames.h[data["typeName"]];
			let obj = ObjectType();
			obj.deserializeAdditional(data);
			let deserializeValues_h = Object.create(null);
			deserializeValues_h["x"] = Float;
			deserializeValues_h["y"] = Float;
			deserializeValues_h["xa"] = Float;
			deserializeValues_h["ya"] = Float;
			deserializeValues_h["vexpand"] = Float;
			deserializeValues_h["hexpand"] = Float;
			deserializeValues_h["width"] = Float;
			deserializeValues_h["height"] = Float;
			deserializeValues_h["id"] = String;
			deserializeValues_h["style"] = Dynamic;
			deserializeValues_h["children"] = Dynamic;
			let h = deserializeValues_h;
			let _g_h = h;
			let _g_keys = Object.keys(h);
			let _g_length = _g_keys.length;
			let _g_current = 0;
			while(_g_current < _g_length) {
				let key = _g_keys[_g_current++];
				let _g_key = key;
				let _g_value = _g_h[key];
				let name = _g_key;
				let type = _g_value;
				if(js_Boot.__instanceof(data[name],type)) {
					if(name == "children") {
						obj.children = [];
						let _g = 0;
						let _g1 = js_Boot.__cast(data["children"] , Array);
						while(_g < _g1.length) {
							let i = _g1[_g];
							++_g;
							let w = Widget.deserialize(i);
							obj.addChild(w);
						}
					} else if(name == "style") {
						let f = data[name];
						let nstyle = new Style();
						nstyle.fgColor = Colors.fromBlit(f["fgColor"]);
						nstyle.bgColor = Colors.fromBlit(f["bgColor"]);
						obj.style = nstyle;
					} else {
						obj[name] = data[name];
					}
				}
			}
			return obj;
		} else {
			return data;
		}
	}
	static fromJSON(json) {
		return Widget.deserialize(new haxe_format_JsonParser(json).doParse());
	}
}
$hx_exports["Widget"] = Widget;
Widget.__name__ = true;
Object.assign(Widget.prototype, {
	__class__: Widget
	,x: null
	,y: null
	,xa: null
	,ya: null
	,vexpand: null
	,hexpand: null
	,width: null
	,height: null
	,ow: null
	,oh: null
	,children: null
	,visible: null
	,parent: null
	,style: null
	,wman: null
	,id: null
	,lsw: null
	,lsh: null
	,requestsRerender: null
});
class SimpleContainer extends Widget {
	constructor(widgets) {
		if(Widget._hx_skip_constructor) {
			super();
			return;
		}
		Widget._hx_skip_constructor = true;
		super();
		Widget._hx_skip_constructor = false;
		this._hx_constructor(widgets);
	}
	_hx_constructor(widgets) {
		this.offset = new Vector2f(0,0);
		super._hx_constructor();
		this.children = widgets;
	}
	getMostWidgetHeight() {
		let w = 0.0;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			w = Math.max(w,widget.fixedY(this.width,this.height,true) + widget.fixedHeight(this.width,this.height,true));
		}
		return w;
	}
	renderImpl(screenwidth,screenheight,width,height) {
		let rc = [];
		let _gthis = this;
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			let _this = widget.getPRenderCommands(width,height);
			let result = new Array(_this.length);
			let _g2 = 0;
			let _g3 = _this.length;
			while(_g2 < _g3) {
				let i = _g2++;
				let e = _this[i];
				e.x += _gthis.offset.x;
				e.y += _gthis.offset.y;
				result[i] = e;
			}
			rc = rc.concat(result);
		}
		return rc;
	}
	onClick(pos,mb,wself) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let xp = Vector2f.add(pos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let termSize = new Vector2f(this.lsw,this.lsh);
			let wwself = xp.x >= 0 && xp.y >= 0 && xp.x < e.fixedWidth(this.lsw,this.lsh,true) && xp.y < e.fixedHeight(this.lsw,this.lsh,true);
			let wwself1 = wwself;
			e.onClick(xp,mb,wwself);
			if(e.requestsRerender) {
				this.requestRerender();
			}
		}
	}
	onDrag(startpos,pos,mb,wself) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let sxp = Vector2f.add(startpos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let xp = Vector2f.add(pos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let termSize = new Vector2f(this.lsw,this.lsh);
			let wwself = xp.x >= 0 && xp.y >= 0 && xp.x < e.width && xp.y < e.height;
			e.onDrag(sxp,xp,mb,wwself);
			if(e.requestsRerender) {
				this.requestRerender();
			}
		}
	}
	onClickUp(startpos,pos,mb,wself) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let sxp = Vector2f.add(startpos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let xp = Vector2f.add(pos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let termSize = new Vector2f(this.lsw,this.lsh);
			let wwself = xp.x >= 0 && xp.y >= 0 && xp.x < e.width && xp.y < e.height;
			e.onClickUp(sxp,xp,mb,wwself);
			if(e.requestsRerender) {
				this.requestRerender();
			}
		}
	}
	onScroll(pos,dir,wself) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let e = _g1[_g];
			++_g;
			let xp = Vector2f.add(pos,this.offset).addInts(-e.fixedX(this.lsw,this.lsh,true),-e.fixedY(this.lsw,this.lsh,true)).addInts(-1,-1);
			let termSize = new Vector2f(this.lsw,this.lsh);
			let wwself = xp.x >= 0 && xp.y >= 0 && xp.x < e.width && xp.y < e.height;
			e.onScroll(xp,dir,wwself);
			if(e.requestsRerender) {
				this.requestRerender();
			}
		}
	}
	onCustom(c) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			widget.onCustom(c);
			if(widget.requestsRerender) {
				this.requestRerender();
			}
		}
	}
	onRender() {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let widget = _g1[_g];
			++_g;
			widget.onRender();
			widget.requestsRerender = false;
		}
	}
	deserializeAdditional(data) {
		return this;
	}
	serializeAdditional() {
		return new haxe_ds_StringMap();
	}
	additionalEditorFields() {
		return new haxe_ds_StringMap();
	}
	getTypename() {
		return "Container";
	}
}
$hx_exports["SimpleContainer"] = SimpleContainer;
SimpleContainer.__name__ = true;
SimpleContainer.__super__ = Widget;
Object.assign(SimpleContainer.prototype, {
	__class__: SimpleContainer
	,offset: null
});
class Button extends SimpleContainer {
	constructor(widgets,command) {
		Widget._hx_skip_constructor = true;
		super();
		Widget._hx_skip_constructor = false;
		this._hx_constructor(widgets,command);
	}
	_hx_constructor(widgets,command) {
		this.command = null;
		super._hx_constructor(widgets);
		this.command = command;
	}
	getTypename() {
		return "Button";
	}
	deserializeAdditional(data) {
		this.command = Command.deserialize(data.cmd);
		return this;
	}
	serializeAdditional() {
		let _g = new haxe_ds_StringMap();
		let value = this.command.serialize();
		_g.h["cmd"] = value;
		return _g;
	}
	additionalEditorFields() {
		let _g = new haxe_ds_StringMap();
		_g.h["command"] = "On Click";
		return _g;
	}
	onClick(pos,mb,wself) {
		Runner.log("Position: " + pos.x + ", " + pos.y + " Self: " + (wself == null ? "null" : "" + wself),{ fileName : "src/Button.hx", lineNumber : 247, className : "Button", methodName : "onClick"});
		if(wself) {
			this.command.execute(this,this.lsw,this.lsh);
		}
	}
}
$hx_exports["Button"] = Button;
Button.__name__ = true;
Button.__super__ = SimpleContainer;
Object.assign(Button.prototype, {
	__class__: Button
	,command: null
});
class Color {
	constructor(blitText,palNumber,bitASC) {
		this.blit = "f";
		this.palNumber = palNumber;
		this.bitASC = bitASC;
		this.blit = blitText;
	}
}
$hx_exports["Color"] = Color;
Color.__name__ = true;
Object.assign(Color.prototype, {
	__class__: Color
	,palNumber: null
	,bitASC: null
	,blit: null
});
class RGBColor {
	constructor(r,g,b) {
		this.red = r;
		this.green = g;
		this.blue = b;
	}
}
$hx_exports["RGBColor"] = RGBColor;
RGBColor.__name__ = true;
Object.assign(RGBColor.prototype, {
	__class__: RGBColor
	,red: null
	,green: null
	,blue: null
});
class Colors {
	static fromBlit(b) {
		switch(b) {
		case "0":
			return Colors.white;
		case "1":
			return Colors.orange;
		case "2":
			return Colors.magenta;
		case "3":
			return Colors.lightBlue;
		case "4":
			return Colors.yellow;
		case "5":
			return Colors.lime;
		case "6":
			return Colors.pink;
		case "7":
			return Colors.gray;
		case "8":
			return Colors.lightGray;
		case "9":
			return Colors.cyan;
		case "a":
			return Colors.purple;
		case "b":
			return Colors.blue;
		case "c":
			return Colors.brown;
		case "d":
			return Colors.green;
		case "e":
			return Colors.red;
		case "f":
			return Colors.black;
		default:
			return Colors.white;
		}
	}
}
$hx_exports["Colors"] = Colors;
Colors.__name__ = true;
var MouseButton = $hxEnums["MouseButton"] = { __ename__:true,__constructs__:null
	,NONE: {_hx_name:"NONE",_hx_index:0,__enum__:"MouseButton",toString:$estr}
	,LEFT: {_hx_name:"LEFT",_hx_index:1,__enum__:"MouseButton",toString:$estr}
	,MIDDLE: {_hx_name:"MIDDLE",_hx_index:2,__enum__:"MouseButton",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:3,__enum__:"MouseButton",toString:$estr}
};
MouseButton.__constructs__ = [MouseButton.NONE,MouseButton.LEFT,MouseButton.MIDDLE,MouseButton.RIGHT];
class Label extends Widget {
	constructor(x,y,text) {
		Widget._hx_skip_constructor = true;
		super();
		Widget._hx_skip_constructor = false;
		this._hx_constructor(x,y,text);
	}
	_hx_constructor(x,y,text) {
		this.text = "<empty>";
		super._hx_constructor();
		this.x = x;
		this.y = y;
		this.text = text;
		let s = Label_getTheoreticalWH(text);
		this.width = s[0];
		this.height = s[1];
	}
	renderImpl(screenwidth,screenheight,width,height) {
		let o = [];
		let cposx = 0;
		let cposy = 0;
		let _g = 0;
		let _g1 = this.text.length;
		while(_g < _g1) {
			let i = _g++;
			let char = this.text.charAt(i);
			if(char == "\n") {
				cposx = 0;
				++cposy;
			} else {
				o.push(new PositionedRenderCommand(cposx,cposy,char,this.id,this.style.fgColor,this.style.bgColor));
				++cposx;
			}
		}
		return o;
	}
	deserializeAdditional(data) {
		if(typeof(data.labelText) == "string") {
			this.text = data.labelText;
		}
		return this;
	}
	serializeAdditional() {
		let _g = new haxe_ds_StringMap();
		_g.h["labelText"] = this.text;
		return _g;
	}
	additionalEditorFields() {
		let _g = new haxe_ds_StringMap();
		_g.h["text"] = "Label";
		return _g;
	}
	getTypename() {
		return "Label";
	}
}
$hx_exports["Label"] = Label;
Label.__name__ = true;
Label.__super__ = Widget;
Object.assign(Label.prototype, {
	__class__: Label
	,text: null
});
function Label_getTheoreticalWH(str) {
	let cposx = 0;
	let cposy = 0;
	let maxw = 0;
	let maxh = 1;
	let _g = 0;
	let _g1 = str.length;
	while(_g < _g1) {
		let i = _g++;
		let char = str.charAt(i);
		if(char == "\n") {
			cposx = 0;
			++cposy;
			++maxh;
		} else {
			++cposx;
			maxw = Math.max(cposx,maxw) | 0;
		}
	}
	return [maxw,maxh];
}
Math.__name__ = true;
class TextArea extends Widget {
	constructor(x,y,placeholder) {
		Widget._hx_skip_constructor = true;
		super();
		Widget._hx_skip_constructor = false;
		this._hx_constructor(x,y,placeholder);
	}
	_hx_constructor(x,y,placeholder) {
		this.onTab = new Command();
		this.onSubmit = new Command();
		this.ctrlPressed = false;
		this.scroll = new Vector2f(0,0);
		this.cursorPos = new Vector2f(0,0);
		this.focused = false;
		this.isFocused = false;
		this.value = "";
		this.placeholder = "";
		super._hx_constructor();
		this.x = x;
		this.y = y;
		this.placeholder = placeholder;
		this.style.bgColor = Colors.gray;
	}
	onClick(pos,mb,wself) {
		if(this.focused && wself) {
			this.cursorPos.y = Math.min(pos.y,this.value.split("\n").length - 1);
			this.cursorPos.x = Math.min(pos.x,this.value.split("\n")[this.cursorPos.y | 0].length);
		}
		this.focused = wself;
		this.requestRerender();
	}
	onCustom(c) {
		if(!this.focused || c[0] != "key" && c[0] != "char") {
			return;
		}
		let cursorPosAsInt = 0;
		let _g = 0;
		let _g1 = this.cursorPos.y | 0;
		while(_g < _g1) {
			let i = _g++;
			cursorPosAsInt += this.value.split("\n")[i].length + 1;
		}
		cursorPosAsInt += this.cursorPos.x | 0;
		if(c[0] == "key_up") {
			if(c[1] == keys.control) {
				this.ctrlPressed = false;
			}
		}
		if(c[0] == "key") {
			if(c[1] == keys.control) {
				this.ctrlPressed = true;
			}
			if(this.ctrlPressed && c[1] == keys.u && this.focused) {
				this.value = "";
			}
			if(c[1] == keys.backspace && !(this.cursorPos.y < 1 && this.cursorPos.x < 1)) {
				this.value = this.value.substring(0,cursorPosAsInt - 1) + this.value.substring(cursorPosAsInt);
				this.cursorPos.x--;
				if(this.cursorPos.x < 0) {
					this.cursorPos.y--;
					this.cursorPos.x = this.value.split("\n")[this.cursorPos.y | 0].length;
				}
			}
			if(c[1] == keys.home) {
				this.cursorPos.x = 0;
			}
			if(c[1] == keys.end) {
				this.cursorPos.x = this.value.split("\n")[this.cursorPos.y | 0].length;
			}
			if(c[1] == keys.delete) {
				this.value = this.value.substring(0,cursorPosAsInt) + this.value.substring(cursorPosAsInt + 1);
			}
			if(c[1] == keys.left) {
				this.cursorPos.x--;
				if(this.cursorPos.x < 0) {
					if(this.cursorPos.y > 0) {
						this.cursorPos.y--;
						this.cursorPos.x = this.value.split("\n")[this.cursorPos.y | 0].length;
					} else {
						this.cursorPos.x++;
					}
				}
				this.cursorPos.y = Math.min(this.cursorPos.y,this.value.split("\n").length - 1);
				this.cursorPos.x = Math.min(this.cursorPos.x,this.value.split("\n")[this.cursorPos.y | 0].length - 1);
			}
			if(c[1] == keys.right) {
				this.cursorPos.x++;
				if(this.cursorPos.x > this.value.split("\n")[this.cursorPos.y | 0].length) {
					this.cursorPos.x--;
					if(this.value.split("\n").length > this.cursorPos.y + 1) {
						this.cursorPos.y++;
						this.cursorPos.x = 0;
					}
				}
				this.cursorPos.y = Math.min(this.cursorPos.y,this.value.split("\n").length - 1);
				this.cursorPos.x = Math.min(this.cursorPos.x,this.value.split("\n")[this.cursorPos.y | 0].length);
			}
			if(c[1] == keys.up) {
				this.cursorPos.y--;
				this.cursorPos.y = Math.min(this.cursorPos.y,this.value.split("\n").length - 1);
				this.cursorPos.x = Math.min(this.cursorPos.x,this.value.split("\n")[this.cursorPos.y | 0].length);
			}
			if(c[1] == keys.down) {
				this.cursorPos.y++;
				this.cursorPos.y = Math.min(this.cursorPos.y,this.value.split("\n").length - 1);
				this.cursorPos.x = Math.min(this.cursorPos.x,this.value.split("\n")[this.cursorPos.y | 0].length);
			}
			if(c[1] == keys.enter && this.height > 1) {
				this.value = this.value.substring(0,cursorPosAsInt) + "\n" + this.value.substring(cursorPosAsInt);
				this.cursorPos.y++;
				this.cursorPos.x = 0;
			} else if(c[1] == keys.enter && this.height <= 1) {
				this.onSubmit.execute(this,this.lsw,this.lsh);
			}
			this.requestRerender();
		} else if(c[0] == "char") {
			this.value = this.value.substring(0,cursorPosAsInt) + Std.string(c[1]) + this.value.substring(cursorPosAsInt);
			this.cursorPos.x++;
			this.requestRerender();
		}
	}
	onRender() {
		if(this.focused && this.cursorPos.x + this.scroll.x < this.fixedWidth(this.lsw,this.lsh) && this.cursorPos.y + this.scroll.y < this.fixedHeight(this.lsw,this.lsh)) {
			let ts = this.getWman().term.getSize();
			this.getWman().term.setCursorPos(this.fixedX(ts.x,ts.y,false) + this.cursorPos.x + this.scroll.x + 1 | 0,this.fixedY(ts.x,ts.y,false) + this.cursorPos.y + this.scroll.y + 1 | 0);
			this.getWman().term.setCursorBlink(true);
		}
	}
	renderImpl(screenwidth,screenheight,width,height) {
		this.cursorPos.y = Math.min(this.cursorPos.y,this.value.split("\n").length - 1);
		this.cursorPos.x = Math.min(this.cursorPos.x,this.value.split("\n")[this.cursorPos.y | 0].length);
		let text = this.value.length > 0 ? this.value : this.placeholder;
		let o = [];
		let cposx = 0;
		let cposy = 0;
		let _g = 0;
		let _g1 = text.length;
		while(_g < _g1) {
			let i = _g++;
			let char = text.charAt(i);
			if(char == "\n") {
				cposx = 0;
				++cposy;
			} else {
				o.push(new PositionedRenderCommand(cposx + this.scroll.x,cposy + this.scroll.y,char,this.id,this.value.length > 0 ? this.style.fgColor : Colors.lightGray,this.style.bgColor));
				++cposx;
			}
		}
		return o;
	}
	getTypename() {
		return "TextArea";
	}
	serializeAdditional() {
		let _g = new haxe_ds_StringMap();
		_g.h["placeholder"] = this.placeholder;
		return _g;
	}
	deserializeAdditional(dt) {
		let data = dt;
		this.placeholder = data["placeholder"];
		return this;
	}
	additionalEditorFields() {
		let _g = new haxe_ds_StringMap();
		_g.h["placeholder"] = "Placeholder";
		return _g;
	}
}
$hx_exports["TextArea"] = TextArea;
TextArea.__name__ = true;
TextArea.__super__ = Widget;
Object.assign(TextArea.prototype, {
	__class__: TextArea
	,placeholder: null
	,value: null
	,isFocused: null
	,focused: null
	,cursorPos: null
	,scroll: null
	,ctrlPressed: null
	,onSubmit: null
	,onTab: null
});
class ScrollContainer extends SimpleContainer {
	constructor(widgets) {
		super(widgets);
	}
	getTypename() {
		return "ScrollContainer";
	}
	onScroll(pos,dir,wself) {
		if(!wself) {
			return;
		}
		let tmp = Math.max(this.offset.y += -dir,-(this.getMostWidgetHeight() - this.fixedHeight(this.lsw,this.lsh)));
		this.offset.y = Math.min(tmp,0);
		this.requestRerender();
	}
}
$hx_exports["ScrollContainer"] = ScrollContainer;
ScrollContainer.__name__ = true;
ScrollContainer.__super__ = SimpleContainer;
Object.assign(ScrollContainer.prototype, {
	__class__: ScrollContainer
});
class Values {
}
$hx_exports["Values"] = Values;
Values.__name__ = true;
class CCOS {
	static pullEvent() {
		__lua__("\n        if arcos then return arcos.ev() else return os.pullEvent() end\n        ");
		return null;
	}
}
CCOS.__name__ = true;
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class Main {
	static main() {
	}
}
Main.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
}
Reflect.__name__ = true;
class RenderCommand {
	constructor(char,belongsToID,fgColor,bgColor) {
		if(RenderCommand._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(char,belongsToID,fgColor,bgColor);
	}
	_hx_constructor(char,belongsToID,fgColor,bgColor) {
		this.bgColor = Colors.black;
		this.fgColor = Colors.white;
		this.char = char;
		this.belongsToID = belongsToID;
		if(fgColor != null) {
			this.fgColor = fgColor;
		}
		if(bgColor != null) {
			this.bgColor = bgColor;
		}
	}
}
$hx_exports["RenderCommand"] = RenderCommand;
RenderCommand.__name__ = true;
Object.assign(RenderCommand.prototype, {
	__class__: RenderCommand
	,char: null
	,belongsToID: null
	,fgColor: null
	,bgColor: null
});
class PositionedRenderCommand extends RenderCommand {
	constructor(x,y,char,belongsToID,fgColor,bgColor) {
		RenderCommand._hx_skip_constructor = true;
		super();
		RenderCommand._hx_skip_constructor = false;
		this._hx_constructor(x,y,char,belongsToID,fgColor,bgColor);
	}
	_hx_constructor(x,y,char,belongsToID,fgColor,bgColor) {
		this.x = x;
		this.y = y;
		super._hx_constructor(char,belongsToID,fgColor,bgColor);
	}
}
$hx_exports["PositionedRenderCommand"] = PositionedRenderCommand;
PositionedRenderCommand.__name__ = true;
PositionedRenderCommand.__super__ = RenderCommand;
Object.assign(PositionedRenderCommand.prototype, {
	__class__: PositionedRenderCommand
	,x: null
	,y: null
});
class Buffer {
	constructor(width,height) {
		this.matrix = [];
		this.height = 2;
		this.width = 2;
		this.width = width;
		this.height = height;
		this.reinitBuffer();
	}
	reinitBuffer(bgcolor) {
		if(bgcolor != null) {
			bgcolor = Colors.black;
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.height;
		while(_g1 < _g2) {
			let x = _g1++;
			let _g2 = [];
			let _g3 = 0;
			let _g4 = this.width;
			while(_g3 < _g4) {
				let y = _g3++;
				_g2.push(new RenderCommand(" ","Renderer"));
			}
			_g.push(_g2);
		}
		this.matrix = _g;
	}
	addPRC(rc) {
		if(this.matrix.length > (rc.y | 0) && rc.y >= 0 && rc.x >= 0) {
			if(this.matrix[rc.y | 0].length > (rc.x | 0)) {
				this.matrix[rc.y | 0][rc.x | 0] = rc;
			}
		}
	}
	draw(term) {
		term.setCursorBlink(false);
		let _g_current = 0;
		let _g_array = this.matrix;
		while(_g_current < _g_array.length) {
			let _g_value = _g_array[_g_current];
			let _g_key = _g_current++;
			let index = _g_key;
			let array = _g_value;
			let t = "";
			let fg = "";
			let bg = "";
			let _g = 0;
			while(_g < array.length) {
				let command = array[_g];
				++_g;
				t += command.char;
				fg += command.fgColor.blit;
				bg += command.bgColor.blit;
			}
			term.setCursorPos(1,index + 1);
			term.blit(t,fg,bg);
		}
	}
	blitBuffer(buffer,ox,oy) {
		let _g_current = 0;
		let _g_array = buffer.matrix;
		while(_g_current < _g_array.length) {
			let _g_value = _g_array[_g_current];
			let _g_key = _g_current++;
			let iy = _g_key;
			let line = _g_value;
			let _g_current1 = 0;
			let _g_array1 = line;
			while(_g_current1 < _g_array1.length) {
				let _g_value = _g_array1[_g_current1];
				let _g_key = _g_current1++;
				let ix = _g_key;
				let command = _g_value;
				let fixedX = ix + ox;
				let fixedY = iy + oy;
				if(this.matrix.length > fixedY && this.matrix[fixedY | 0].length > fixedX && fixedY >= 0 && fixedX >= 0) {
					this.matrix[fixedY | 0][fixedX | 0] = command;
				}
			}
		}
	}
}
$hx_exports["Buffer"] = Buffer;
Buffer.__name__ = true;
Object.assign(Buffer.prototype, {
	__class__: Buffer
	,width: null
	,height: null
	,matrix: null
});
class Renderer {
	constructor(terminal) {
		this.currentBuffer = false;
		this.buffer1 = new Buffer(0,0);
		this.term = terminal;
	}
	renderToBuffer(scr,ox,oy,buffer) {
		scr.width = buffer.width;
		scr.height = buffer.height;
		scr.x = 0;
		scr.xa = 0;
		scr.y = 0;
		scr.ya = 0;
		scr.parent = null;
		let _g = 0;
		let _g1 = scr.getPRenderCommands(buffer.width,buffer.height,false);
		while(_g < _g1.length) {
			let rc = _g1[_g];
			++_g;
			rc.x += ox;
			rc.y += oy;
			buffer.addPRC(rc);
		}
	}
	render(scr) {
		this.buffer1.reinitBuffer();
		this.renderToBuffer(scr,0,0,this.buffer1);
		this.buffer1.draw(this.term);
	}
	resize(x,y) {
		this.buffer1.width = x + 1 | 0;
		this.buffer1.height = y + 1 | 0;
		this.buffer1.reinitBuffer();
	}
}
$hx_exports["Renderer"] = Renderer;
Renderer.__name__ = true;
Object.assign(Renderer.prototype, {
	__class__: Renderer
	,buffer1: null
	,currentBuffer: null
	,term: null
});
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		let v = parseInt(x);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
}
Std.__name__ = true;
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = true;
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
});
class StringTools {
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
}
StringTools.__name__ = true;
var ValueType = $hxEnums["ValueType"] = { __ename__:true,__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
class Type {
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
}
Type.__name__ = true;
class Runner {
	constructor(term,root,peripheralName) {
		this.cs = new Vector2f(0,0);
		this.renderer = new Renderer(null);
		this.peripheralName = null;
		this.root = new ScreenManager(null);
		this.term = null;
		this.root.term = term;
		this.root.addScreen(root);
		this.term = term;
		this.peripheralName = peripheralName;
		this.renderer.term = this.term;
		Runner.log("Created runner",{ fileName : "src/UI.hx", lineNumber : 60, className : "Runner", methodName : "new"});
	}
	run() {
		this.renderer.resize(this.term.getSize().x - 1,this.term.getSize().y - 1);
		this.renderer.render(this.root.current());
	}
	render() {
		this.renderer.render(this.root.current());
		this.root.current().onRender();
	}
	event(ev) {
		if(this.peripheralName != null && ev[0] == "monitor_resize") {
			this.renderer.resize(this.term.getSize().x - 1,this.term.getSize().y - 1);
			this.render();
		}
		if(this.peripheralName == null && ev[0] == "term_resize") {
			this.renderer.resize(this.term.getSize().x - 1,this.term.getSize().y - 1);
			this.render();
		}
		if(this.peripheralName != null && ev[0] == "monitor_touch" && ev[1] == this.peripheralName) {
			this.root.current().onClick(new Vector2f(ev[2],ev[3]),MouseButton.LEFT,true);
			this.root.current().onClickUp(new Vector2f(ev[2],ev[3]),new Vector2f(ev[2],ev[3]),MouseButton.LEFT,true);
		}
		if(this.peripheralName == null) {
			switch(ev[0]) {
			case "mouse_click":
				this.cs = new Vector2f(ev[2],ev[3]);
				this.root.current().onClick(this.cs,ev[1],true);
				break;
			case "mouse_drag":
				this.root.current().onDrag(this.cs,new Vector2f(ev[2],ev[3]),ev[1],true);
				break;
			case "mouse_scroll":
				this.root.current().onScroll(new Vector2f(ev[2],ev[3]),ev[1],true);
				break;
			case "mouse_up":
				this.root.current().onClickUp(this.cs,new Vector2f(ev[2],ev[3]),ev[1],true);
				break;
			}
		}
		this.root.current().onCustom(ev);
		if(this.root.current().requestsRerender) {
			this.render();
			this.root.current().requestsRerender = false;
		}
	}
	static log(t,posInfos) {
		try {
			__lua__("peripheral.wrap(\"back\").transmit(630, 630, t)");
		} catch( _g ) {
			__lua__("\n            local fear, err = fs.open(\"log.txt\", \"a\")\n            if fear then fear.write(t .. \"\\n\") fear.close() end\n            ");
		}
	}
}
$hx_exports["Runner"] = Runner;
Runner.__name__ = true;
Object.assign(Runner.prototype, {
	__class__: Runner
	,term: null
	,root: null
	,peripheralName: null
	,renderer: null
	,cs: null
});
class UILoader {
	constructor(ui) {
		this.uiData = new haxe_format_JsonParser(ui).doParse();
	}
}
$hx_exports["UILoader"] = UILoader;
UILoader.__name__ = true;
Object.assign(UILoader.prototype, {
	__class__: UILoader
	,uiData: null
});
class ScreenManager {
	constructor(terminal) {
		this.term = null;
		this.currentScreen = 0;
		this.screens = [];
		this.term = terminal;
	}
	addScreen(scr) {
		scr.x = 0;
		scr.y = 0;
		scr.width = this.term.getSize().x | 0;
		scr.height = this.term.getSize().y | 0;
		scr.wman = this;
		this.screens.push(scr);
	}
	rmScreen(scr) {
		HxOverrides.remove(this.screens,scr);
	}
	current() {
		if(this.screens.length <= this.currentScreen) {
			return new Label(1,1,"No screen created.");
		}
		this.screens[this.currentScreen].x = 0;
		this.screens[this.currentScreen].y = 0;
		let tmp = this.term.getSize().x | 0;
		this.screens[this.currentScreen].width = tmp;
		let tmp1 = this.term.getSize().y | 0;
		this.screens[this.currentScreen].height = tmp1;
		this.screens[this.currentScreen].wman = this;
		return this.screens[this.currentScreen];
	}
	toJSON() {
		let _this = this.screens;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = _this[i].serialize();
		}
		return haxe_format_JsonPrinter.print(result,null,null);
	}
	static fromJSON(term,json) {
		let obj = new haxe_format_JsonParser(json).doParse();
		let sm = new ScreenManager(term);
		if(((obj) instanceof Array)) {
			sm.screens = obj.map(function(e) {
				return Widget.deserialize(e);
			});
		} else {
			sm.screens = [Widget.deserialize(obj)];
		}
		return sm;
	}
}
$hx_exports["ScreenManager"] = ScreenManager;
ScreenManager.__name__ = true;
Object.assign(ScreenManager.prototype, {
	__class__: ScreenManager
	,screens: null
	,currentScreen: null
	,term: null
});
class Vector2f {
	constructor(x,y) {
		this.y = 0.0;
		this.x = 0.0;
		this.x = x;
		this.y = y;
	}
	addInts(x,y) {
		return new Vector2f(this.x + x,this.y + y);
	}
	static add(vec1,vec) {
		return new Vector2f(vec1.x + vec.x,vec1.y + vec.y);
	}
}
$hx_exports["Vector2f"] = Vector2f;
Vector2f.__name__ = true;
Object.assign(Vector2f.prototype, {
	__class__: Vector2f
	,x: null
	,y: null
});
class Style {
	constructor() {
		this.fgColor = Colors.white;
		this.bgColor = Colors.black;
	}
}
$hx_exports["Style"] = Style;
Style.__name__ = true;
Object.assign(Style.prototype, {
	__class__: Style
	,bgColor: null
	,fgColor: null
});
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
	,__properties__: {get_native: "get_native",get_message: "get_message"}
});
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
	,id: null
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_format_JsonParser {
	constructor(str) {
		this.str = str;
		this.pos = 0;
	}
	doParse() {
		let result = this.parseRec();
		let c;
		while(true) {
			c = this.str.charCodeAt(this.pos++);
			let c1 = c;
			if(!(c1 == c1)) {
				break;
			}
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				this.invalidChar();
			}
		}
		return result;
	}
	parseRec() {
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			case 34:
				return this.parseString();
			case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				let c1 = c;
				let start = this.pos - 1;
				let minus = c1 == 45;
				let digit = !minus;
				let zero = c1 == 48;
				let point = false;
				let e = false;
				let pm = false;
				let end = false;
				do {
					c1 = this.str.charCodeAt(this.pos++);
					switch(c1) {
					case 43:case 45:
						if(!e || pm) {
							this.invalidNumber(start);
						}
						digit = false;
						pm = true;
						break;
					case 46:
						if(minus || point || e) {
							this.invalidNumber(start);
						}
						digit = false;
						point = true;
						break;
					case 48:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
							zero = true;
						}
						digit = true;
						break;
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						if(zero && !point) {
							this.invalidNumber(start);
						}
						if(minus) {
							minus = false;
						}
						digit = true;
						zero = false;
						break;
					case 69:case 101:
						if(minus || zero || e) {
							this.invalidNumber(start);
						}
						digit = false;
						e = true;
						break;
					default:
						if(!digit) {
							this.invalidNumber(start);
						}
						this.pos--;
						end = true;
					}
				} while(!end);
				let f = parseFloat(HxOverrides.substr(this.str,start,this.pos - start));
				if(point) {
					return f;
				} else {
					let i = f | 0;
					if(i == f) {
						return i;
					} else {
						return f;
					}
				}
				break;
			case 91:
				let arr = [];
				let comma = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 44:
						if(comma) {
							comma = false;
						} else {
							this.invalidChar();
						}
						break;
					case 93:
						if(comma == false) {
							this.invalidChar();
						}
						return arr;
					default:
						if(comma) {
							this.invalidChar();
						}
						this.pos--;
						arr.push(this.parseRec());
						comma = true;
					}
				}
				break;
			case 102:
				let save = this.pos;
				if(this.str.charCodeAt(this.pos++) != 97 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 115 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save;
					this.invalidChar();
				}
				return false;
			case 110:
				let save1 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 108 || this.str.charCodeAt(this.pos++) != 108) {
					this.pos = save1;
					this.invalidChar();
				}
				return null;
			case 116:
				let save2 = this.pos;
				if(this.str.charCodeAt(this.pos++) != 114 || this.str.charCodeAt(this.pos++) != 117 || this.str.charCodeAt(this.pos++) != 101) {
					this.pos = save2;
					this.invalidChar();
				}
				return true;
			case 123:
				let obj = { };
				let field = null;
				let comma1 = null;
				while(true) {
					let c = this.str.charCodeAt(this.pos++);
					switch(c) {
					case 9:case 10:case 13:case 32:
						break;
					case 34:
						if(field != null || comma1) {
							this.invalidChar();
						}
						field = this.parseString();
						break;
					case 44:
						if(comma1) {
							comma1 = false;
						} else {
							this.invalidChar();
						}
						break;
					case 58:
						if(field == null) {
							this.invalidChar();
						}
						obj[field] = this.parseRec();
						field = null;
						comma1 = true;
						break;
					case 125:
						if(field != null || comma1 == false) {
							this.invalidChar();
						}
						return obj;
					default:
						this.invalidChar();
					}
				}
				break;
			default:
				this.invalidChar();
			}
		}
	}
	parseString() {
		let start = this.pos;
		let buf = null;
		let prev = -1;
		while(true) {
			let c = this.str.charCodeAt(this.pos++);
			if(c == 34) {
				break;
			}
			if(c == 92) {
				if(buf == null) {
					buf = new StringBuf();
				}
				let s = this.str;
				let len = this.pos - start - 1;
				buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
				c = this.str.charCodeAt(this.pos++);
				if(c != 117 && prev != -1) {
					buf.b += String.fromCodePoint(65533);
					prev = -1;
				}
				switch(c) {
				case 34:case 47:case 92:
					buf.b += String.fromCodePoint(c);
					break;
				case 98:
					buf.b += String.fromCodePoint(8);
					break;
				case 102:
					buf.b += String.fromCodePoint(12);
					break;
				case 110:
					buf.b += String.fromCodePoint(10);
					break;
				case 114:
					buf.b += String.fromCodePoint(13);
					break;
				case 116:
					buf.b += String.fromCodePoint(9);
					break;
				case 117:
					let uc = Std.parseInt("0x" + HxOverrides.substr(this.str,this.pos,4));
					this.pos += 4;
					if(prev != -1) {
						if(uc < 56320 || uc > 57343) {
							buf.b += String.fromCodePoint(65533);
							prev = -1;
						} else {
							buf.b += String.fromCodePoint(((prev - 55296 << 10) + (uc - 56320) + 65536));
							prev = -1;
						}
					} else if(uc >= 55296 && uc <= 56319) {
						prev = uc;
					} else {
						buf.b += String.fromCodePoint(uc);
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid escape sequence \\" + String.fromCodePoint(c) + " at position " + (this.pos - 1));
				}
				start = this.pos;
			} else if(c != c) {
				throw haxe_Exception.thrown("Unclosed string");
			}
		}
		if(prev != -1) {
			buf.b += String.fromCodePoint(65533);
			prev = -1;
		}
		if(buf == null) {
			return HxOverrides.substr(this.str,start,this.pos - start - 1);
		} else {
			let s = this.str;
			let len = this.pos - start - 1;
			buf.b += len == null ? HxOverrides.substr(s,start,null) : HxOverrides.substr(s,start,len);
			return buf.b;
		}
	}
	invalidChar() {
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.str.charCodeAt(this.pos) + " at position " + this.pos);
	}
	invalidNumber(start) {
		throw haxe_Exception.thrown("Invalid number at position " + start + ": " + HxOverrides.substr(this.str,start,this.pos - start));
	}
}
haxe_format_JsonParser.__name__ = true;
Object.assign(haxe_format_JsonParser.prototype, {
	__class__: haxe_format_JsonParser
	,str: null
	,pos: null
});
class haxe_format_JsonPrinter {
	constructor(replacer,space) {
		this.replacer = replacer;
		this.indent = space;
		this.pretty = space != null;
		this.nind = 0;
		this.buf = new StringBuf();
	}
	write(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		let _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			let v1 = isFinite(v) ? Std.string(v) : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			let c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				let v1 = v;
				this.buf.b += String.fromCodePoint(91);
				let len = v1.length;
				let last = len - 1;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let i = _g++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v);
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				let v1 = v;
				let o = { };
				let h = v1.h;
				let _g_h = h;
				let _g_keys = Object.keys(h);
				let _g_length = _g_keys.length;
				let _g_current = 0;
				while(_g_current < _g_length) {
					let k = _g_keys[_g_current++];
					o[k] = v1.h[k];
				}
				let v2 = o;
				this.fieldsString(v2,Reflect.fields(v2));
			} else if(c == Date) {
				let v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.classString(v);
			}
			break;
		case 7:
			let _g1 = _g.e;
			let i = v._hx_index;
			this.buf.b += Std.string(i == null ? "null" : "" + i);
			break;
		case 8:
			this.buf.b += "\"???\"";
			break;
		}
	}
	classString(v) {
		this.fieldsString(v,Type.getInstanceFields(js_Boot.getClass(v)));
	}
	fieldsString(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		let len = fields.length;
		let empty = true;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let f = fields[i];
			let value = Reflect.field(v,f);
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(empty) {
				this.nind++;
				empty = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
		}
		if(!empty) {
			this.nind--;
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				let v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v);
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	quote(s) {
		this.buf.b += String.fromCodePoint(34);
		let i = 0;
		let length = s.length;
		while(i < length) {
			let c = s.charCodeAt(i++);
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	static print(o,replacer,space) {
		let printer = new haxe_format_JsonPrinter(replacer,space);
		printer.write("",o);
		return printer.buf.b;
	}
}
haxe_format_JsonPrinter.__name__ = true;
Object.assign(haxe_format_JsonPrinter.prototype, {
	__class__: haxe_format_JsonPrinter
	,buf: null
	,replacer: null
	,indent: null
	,pretty: null
	,nind: null
});
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class hxease_IEasing {
}
hxease_IEasing.__name__ = true;
hxease_IEasing.__isInterface__ = true;
Object.assign(hxease_IEasing.prototype, {
	__class__: hxease_IEasing
	,calculate: null
});
class hxease_BackEaseIn {
	constructor(overshoot) {
		this.overshoot = overshoot;
	}
	calculate(ratio) {
		if(ratio == 1) {
			return 1;
		}
		return ratio * ratio * ((this.overshoot + 1.0) * ratio - this.overshoot);
	}
}
hxease_BackEaseIn.__name__ = true;
hxease_BackEaseIn.__interfaces__ = [hxease_IEasing];
Object.assign(hxease_BackEaseIn.prototype, {
	__class__: hxease_BackEaseIn
	,overshoot: null
});
class hxease_BackEaseInOut {
	constructor(overshoot) {
		this.overshoot = overshoot;
	}
	calculate(ratio) {
		let over = this.overshoot;
		if((ratio *= 2) < 1) {
			return 0.5 * (ratio * ratio * (((over *= 1.525) + 1) * ratio - over));
		}
		return 0.5 * ((ratio -= 2) * ratio * (((over *= 1.525) + 1) * ratio + over) + 2);
	}
}
hxease_BackEaseInOut.__name__ = true;
hxease_BackEaseInOut.__interfaces__ = [hxease_IEasing];
Object.assign(hxease_BackEaseInOut.prototype, {
	__class__: hxease_BackEaseInOut
	,overshoot: null
});
class hxease_BackEaseOut {
	constructor(overshoot) {
		this.overshoot = overshoot;
	}
	calculate(ratio) {
		if(ratio == 0) {
			return 0;
		}
		return --ratio * ratio * ((this.overshoot + 1) * ratio + this.overshoot) + 1;
	}
}
hxease_BackEaseOut.__name__ = true;
hxease_BackEaseOut.__interfaces__ = [hxease_IEasing];
Object.assign(hxease_BackEaseOut.prototype, {
	__class__: hxease_BackEaseOut
	,overshoot: null
});
class hxease_Back {
}
hxease_Back.__name__ = true;
class hxease_LinearEaseNone {
	constructor() {
	}
	calculate(ratio) {
		return ratio;
	}
}
hxease_LinearEaseNone.__name__ = true;
hxease_LinearEaseNone.__interfaces__ = [hxease_IEasing];
Object.assign(hxease_LinearEaseNone.prototype, {
	__class__: hxease_LinearEaseNone
});
class hxease_LinearEaseStep {
	constructor() {
	}
	calculate(ratio) {
		if(ratio < 1) {
			return 0;
		} else {
			return 1;
		}
	}
}
hxease_LinearEaseStep.__name__ = true;
hxease_LinearEaseStep.__interfaces__ = [hxease_IEasing];
Object.assign(hxease_LinearEaseStep.prototype, {
	__class__: hxease_LinearEaseStep
});
class hxease_Linear {
}
hxease_Linear.__name__ = true;
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class typedefs_Terminal {
	constructor() {
		if(typedefs_Terminal._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.size = new Vector2f(51,19);
	}
}
$hx_exports["typedefs"]["Terminal"] = typedefs_Terminal;
typedefs_Terminal.__name__ = true;
Object.assign(typedefs_Terminal.prototype, {
	__class__: typedefs_Terminal
	,size: null
});
class typedefs_Simpleterminal extends typedefs_Terminal {
	constructor(pf) {
		typedefs_Terminal._hx_skip_constructor = true;
		super();
		typedefs_Terminal._hx_skip_constructor = false;
		this._hx_constructor(pf);
	}
	_hx_constructor(pf) {
		this.apalette = [new RGBColor(236,239,244),new RGBColor(0,0,0),new RGBColor(180,142,173),new RGBColor(0,0,0),new RGBColor(235,203,139),new RGBColor(163,190,140),new RGBColor(0,0,0),new RGBColor(76,86,106),new RGBColor(216,222,233),new RGBColor(136,192,208),new RGBColor(0,0,0),new RGBColor(129,161,193),new RGBColor(0,0,0),new RGBColor(163,190,140),new RGBColor(191,97,106),new RGBColor(59,66,82)];
		super._hx_constructor();
		this.printFunction = pf;
		this.apalette = typedefs_Simpleterminal.apalettea;
	}
	get_palette() {
		return this.apalette;
	}
	write(s) {
		this.printFunction(s);
	}
	clear() {
		this.printFunction("\x1B[2J");
	}
	setTextColor(col) {
		this.printFunction("\x1B[38;2;" + this.apalette[col.palNumber].red + ";" + this.apalette[col.palNumber].green + ";" + this.apalette[col.palNumber].blue + "m");
	}
	setBackgroundColor(col) {
		this.printFunction("\x1B[48;2;" + this.apalette[col.palNumber].red + ";" + this.apalette[col.palNumber].green + ";" + this.apalette[col.palNumber].blue + "m");
	}
	setCursorPos(x,y) {
		this.printFunction("\x1B[" + y + ";" + x + "H");
	}
	set_palette(newc) {
		let i = 0;
		let _g = 0;
		while(_g < newc.length) {
			let color = newc[_g];
			++_g;
			++i;
			this.apalette[i - 1] = color;
		}
		return this.apalette;
	}
	setPaletteColor(paln,r,g,b) {
		let apaln = Math.log(paln) | 0;
		this.apalette[apaln] = new RGBColor(r | 0,g | 0,b | 0);
	}
	getSize() {
		return this.size;
	}
	blit(a,b,c) {
		let _g = 0;
		let _g1 = a.length;
		while(_g < _g1) {
			let i = _g++;
			let c = a.charAt(i);
			let fg = Colors.fromBlit(b.charAt(i));
			let bg = Colors.fromBlit(c.charAt(i));
			this.setTextColor(fg);
			this.setBackgroundColor(bg);
			this.write(c);
		}
	}
	setCursorBlink(b) {
	}
}
$hx_exports["typedefs"]["Simpleterminal"] = typedefs_Simpleterminal;
typedefs_Simpleterminal.__name__ = true;
typedefs_Simpleterminal.__super__ = typedefs_Terminal;
Object.assign(typedefs_Simpleterminal.prototype, {
	__class__: typedefs_Simpleterminal
	,apalette: null
	,printFunction: null
	,__properties__: {set_palette: "set_palette",get_palette: "get_palette"}
});
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
	String.__name__ = true;
	Array.__name__ = true;
	Date.prototype.__class__ = Date;
	Date.__name__ = "Date";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
Widget._hx_skip_constructor = false;
Colors.white = new Color("0",0,1);
Colors.orange = new Color("1",1,2);
Colors.magenta = new Color("2",2,4);
Colors.lightBlue = new Color("3",3,8);
Colors.yellow = new Color("4",4,16);
Colors.lime = new Color("5",5,32);
Colors.pink = new Color("6",6,64);
Colors.gray = new Color("7",7,128);
Colors.lightGray = new Color("8",8,256);
Colors.cyan = new Color("9",9,512);
Colors.purple = new Color("a",10,1024);
Colors.blue = new Color("b",11,2048);
Colors.brown = new Color("c",12,4096);
Colors.green = new Color("d",13,8192);
Colors.red = new Color("e",14,16384);
Colors.black = new Color("f",15,32768);
Values.typenames = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	_g.h["Label"] = function() {
		let o = new Label(0,0,"");
		return o;
	};
	_g.h["Container"] = function() {
		return new SimpleContainer([]);
	};
	_g.h["Button"] = function() {
		return new Button([],new Command());
	};
	_g.h["TextArea"] = function() {
		return new TextArea(0,0,"");
	};
	_g.h["ScrollContainer"] = function() {
		return new ScrollContainer([]);
	};
	$r = _g;
	return $r;
}(this));
RenderCommand._hx_skip_constructor = false;
hxease_Back.DEFAULT_OVERSHOOT = 1.70158;
hxease_Back.easeIn = new hxease_BackEaseIn(1.70158);
hxease_Back.easeInOut = new hxease_BackEaseInOut(1.70158);
hxease_Back.easeOut = new hxease_BackEaseOut(1.70158);
hxease_Linear.easeNone = new hxease_LinearEaseNone();
hxease_Linear.easeStep = new hxease_LinearEaseStep();
typedefs_Terminal._hx_skip_constructor = false;
typedefs_Simpleterminal.apalettea = [new RGBColor(236,239,244),new RGBColor(0,0,0),new RGBColor(180,142,173),new RGBColor(0,0,0),new RGBColor(235,203,139),new RGBColor(163,190,140),new RGBColor(0,0,0),new RGBColor(76,86,106),new RGBColor(146,154,170),new RGBColor(136,192,208),new RGBColor(0,0,0),new RGBColor(129,161,193),new RGBColor(0,0,0),new RGBColor(163,190,140),new RGBColor(191,97,106),new RGBColor(59,66,82)];
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);;
export default exports;
