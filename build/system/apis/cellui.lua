-- Generated by Haxe 4.3.6
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    local res = {}
    local idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
_hx_exports["typedefs"] = _hx_exports["typedefs"] or _hx_e()
local Array = _hx_e()
local Transition = _hx_e()
local Command = _hx_e()
local Widget = _hx_e()
local SimpleContainer = _hx_e()
local Button = _hx_e()
local Color = _hx_e()
local RGBColor = _hx_e()
local Colors = _hx_e()
local MouseButton = _hx_e()
local Label = _hx_e()
___Label_Label_Fields_ = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local Math = _hx_e()
__lua_PairTools = _hx_e()
local TextArea = _hx_e()
local ScrollContainer = _hx_e()
local Values = _hx_e()
local Date = _hx_e()
local CCOS = _hx_e()
local Lambda = _hx_e()
local Main = _hx_e()
local Reflect = _hx_e()
local RenderCommand = _hx_e()
local PositionedRenderCommand = _hx_e()
local Buffer = _hx_e()
local Renderer = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
local Runner = _hx_e()
local UILoader = _hx_e()
local ScreenManager = _hx_e()
local Vector2f = _hx_e()
local Style = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Exception = _hx_e()
__haxe_Json = _hx_e()
__haxe_NativeStackTrace = _hx_e()
__haxe_ValueException = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_exceptions_PosException = _hx_e()
__haxe_exceptions_NotImplementedException = _hx_e()
__haxe_format_JsonParser = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__haxe_macro_Error = _hx_e()
__hxease_IEasing = _hx_e()
__hxease_BackEaseIn = _hx_e()
__hxease_BackEaseInOut = _hx_e()
__hxease_BackEaseOut = _hx_e()
__hxease_Back = _hx_e()
__hxease_LinearEaseNone = _hx_e()
__hxease_LinearEaseStep = _hx_e()
__hxease_Linear = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_Thread = _hx_e()
__typedefs_Terminal = _hx_e()
__typedefs_Simpleterminal = _hx_e()
__typedefs_CCTerminal = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g = 0;
  while (_g < a.length) do _hx_do_first_1 = false;
    
    local i = a[_g];
    _g = _g + 1;
    ret:push(i);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  local _g_array = self;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    _g_current = _g_current + 1;
    local i = _g_array[_g_current - 1];
    _G.table.insert(tbl, Std.string(i));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do _hx_do_first_1 = false;
    
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do _hx_do_first_1 = false;
    
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do _hx_do_first_2 = false;
      
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do _hx_do_first_1 = false;
    
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do _hx_do_first_2 = false;
        
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do _hx_do_first_1 = false;
    
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do _hx_do_first_1 = false;
        
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

Transition.new = function(direction,anim,curve,duration) 
  local self = _hx_new(Transition.prototype)
  Transition.super(self,direction,anim,curve,duration)
  return self
end
Transition.super = function(self,direction,anim,curve,duration) 
  self.duration = 1000;
  self.curve = "easein";
  self.anim = "over";
  self.direction = "left";
  if (direction ~= nil) then 
    self.direction = direction;
  end;
  if (anim ~= nil) then 
    self.anim = anim;
  end;
  if (curve ~= nil) then 
    self.curve = curve;
  end;
  if (duration ~= nil) then 
    self.duration = duration;
  end;
end
_hx_exports["Transition"] = Transition
Transition.__name__ = true
Transition.prototype = _hx_e();
Transition.prototype.direction= nil;
Transition.prototype.anim= nil;
Transition.prototype.curve= nil;
Transition.prototype.duration= nil;
Transition.prototype.run = function(self,callback,min,max) 
  local l = max - min;
  local divider = 2;
  local el = l / divider;
  local la = self.duration / el;
  local _g_min = 0;
  local _g_max = Std.int(la);
  while (_g_min < _g_max) do _hx_do_first_1 = false;
    
    _g_min = _g_min + 1;
    local i = _g_min - 1;
    callback((self:getValue(i / l) * l) + min);
    sleep((self.duration / 1000) / la);
  end;
end
Transition.prototype.copy = function(self) 
  do return Transition.new(self.direction, self.anim, self.curve, self.duration) end
end
Transition.prototype.runForScreens = function(self,callback,screenwidth,screenheight) 
  local _gthis = self;
  local cb = function(n) 
    local e = Std.int(n);
    local _g = _gthis.anim;
    if (_g) == "over" then 
      local _g = _gthis.direction;
      if (_g) == "bottom" then 
        callback(0, 0, 0, e - screenheight, false, n / screenheight);
      elseif (_g) == "left" then 
        callback(0, 0, e - screenwidth, 0, false, n / screenwidth);
      elseif (_g) == "right" then 
        callback(0, 0, screenwidth - e, 0, false, n / screenwidth);
      elseif (_g) == "top" then 
        callback(0, 0, 0, screenheight - e, false, n / screenheight); end;
    elseif (_g) == "slide" then 
      local _g = _gthis.direction;
      if (_g) == "bottom" then 
        callback(0, e, 0, e - screenheight, false, n / screenheight);
      elseif (_g) == "left" then 
        callback(e, 0, e - screenwidth, 0, false, n / screenwidth);
      elseif (_g) == "right" then 
        callback(-e, 0, screenwidth - e, 0, false, n / screenwidth);
      elseif (_g) == "top" then 
        callback(0, -e, 0, screenheight - e, false, n / screenheight); end;
    elseif (_g) == "under" then 
      local _g = _gthis.direction;
      if (_g) == "bottom" then 
        callback(0, e, 0, 0, true, n / screenheight);
      elseif (_g) == "left" then 
        callback(e, 0, 0, 0, true, n / screenwidth);
      elseif (_g) == "right" then 
        callback(-e, 0, 0, 0, true, n / screenwidth);
      elseif (_g) == "top" then 
        callback(0, -e, 0, 0, true, n / screenheight); end; end;
  end;
  local _g = self.direction;
  if (_g) == "bottom" or (_g) == "top" then 
    self:run(cb, 0, screenheight);
  elseif (_g) == "left" or (_g) == "right" then 
    self:run(cb, 0, screenwidth); end;
end
Transition.prototype.getValue = function(self,ratioa) 
  local ratio = ratioa * 1.5;
  local _g = self.curve;
  if (_g) == "ease" then 
    do return __hxease_BackEaseInOut.new(0):calculate(ratio) end;
  elseif (_g) == "easein" then 
    do return __hxease_BackEaseIn.new(0):calculate(ratio) end;
  elseif (_g) == "easeout" then 
    do return __hxease_BackEaseOut.new(0):calculate(ratio) end;else
  do return __hxease_LinearEaseNone.new():calculate(ratio) end; end;
end

Transition.prototype.__class__ =  Transition

Command.new = function(type,value,transition) 
  local self = _hx_new(Command.prototype)
  Command.super(self,type,value,transition)
  return self
end
Command.super = function(self,type,value,transition) 
  self.transition = Transition.new("left", "over", "easein");
  self.value = "-- Target is the widget which runs this command\nlocal target = { ... }";
  self.type = "execLua";
  if (type ~= nil) then 
    self.type = type;
  end;
  if (value ~= nil) then 
    self.value = value;
  end;
  if (transition ~= nil) then 
    self.transition = transition;
  end;
end
_hx_exports["Command"] = Command
Command.__name__ = true
Command.deserialize = function(d) 
  local o = d;
  if (not ((function() 
    local _hx_1
    if ((_G.type(o) == "function") and not ((function() 
      local _hx_2
      if (_G.type(o) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = o.__name__; end
      return _hx_2
    end )() or (function() 
      local _hx_3
      if (_G.type(o) ~= "table") then 
      _hx_3 = false; else 
      _hx_3 = o.__ename__; end
      return _hx_3
    end )())) then 
    _hx_1 = false; elseif ((_G.type(o) == "string") and (String.prototype.type ~= nil)) then 
    _hx_1 = true; elseif (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__.type ~= nil; else 
    _hx_1 = o.type ~= nil; end
    return _hx_1
  end )()) or (Reflect.field(d, "type") ~= "Command")) then 
    _G.error(__haxe_Exception.new("Not a command."),0);
  end;
  local t = Reflect.field(d, "transition");
  do return Command.new(Reflect.field(d, "ctype"), Reflect.field(d, "value"), Transition.new(Reflect.field(t, "dir"), Reflect.field(t, "anim"), Reflect.field(t, "curve"), Reflect.field(t, "duration"))) end;
end
Command.prototype = _hx_e();
Command.prototype.type= nil;
Command.prototype.value= nil;
Command.prototype.transition= nil;
Command.prototype.serialize = function(self) 
  do return _hx_o({__fields__={type=true,ctype=true,value=true,transition=true},type="Command",ctype=self.type,value=self.value,transition=_hx_o({__fields__={dir=true,anim=true,curve=true,duration=true},dir=self.transition.direction,anim=self.transition.anim,curve=self.transition.curve,duration=self.transition.duration})}) end
end
Command.prototype.execute = function(self,runner,screenwidth,screenheight) 
  local _g = self.type;
  if (_g) == "execLua" then 
    local _hx_1_l_func, _hx_1_l_message = _G.load(self.value);
    local tmp = _hx_1_l_func == nil;
    l.func(runner);
  elseif (_g) == "goToScreen" then 
    local s1 = Buffer.new(Std.int(screenwidth), Std.int(screenheight));
    local s2 = Buffer.new(Std.int(screenwidth), Std.int(screenheight));
    local _g = 0;
    local _g1 = runner:getWman():current():getPRenderCommands(screenwidth, screenheight, false);
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local command = _g1[_g];
      _g = _g + 1;
      s1:addPRC(command);
    end;
    runner:getWman().screens[Std.parseInt(self.value)].x = 0;
    runner:getWman().screens[Std.parseInt(self.value)].y = 0;
    runner:getWman().screens[Std.parseInt(self.value)].width = Std.int(runner:getWman().term:getSize().x);
    runner:getWman().screens[Std.parseInt(self.value)].height = Std.int(runner:getWman().term:getSize().y);
    local _g = 0;
    local _g1 = runner:getWman().screens[Std.parseInt(self.value)]:getPRenderCommands(screenwidth, screenheight, false);
    while (_g < _g1.length) do _hx_do_first_1 = false;
      
      local command = _g1[_g];
      _g = _g + 1;
      s2:addPRC(command);
    end;
    self.transition:runForScreens(function(prevx,prevy,newx,newy,firstOnTop,progress) 
      local b = Buffer.new(Std.int(screenwidth), Std.int(screenheight));
      if (firstOnTop) then 
        b:blitBuffer(s2, newx, newy);
        b:blitBuffer(s1, prevx, prevy);
      else
        b:blitBuffer(s1, prevx, prevy);
        b:blitBuffer(s2, newx, newy);
      end;
      b:draw(runner:getWman().term);
    end, Std.int(screenwidth), Std.int(screenheight));
    runner:getWman().currentScreen = Std.parseInt(self.value);
    runner:requestRerender();
    runner:requestRerender(); end;
end

Command.prototype.__class__ =  Command

Widget.new = function() 
  local self = _hx_new(Widget.prototype)
  Widget.super(self)
  return self
end
Widget.super = function(self) 
  self.requestsRerender = false;
  self.lsh = 0.0;
  self.lsw = 0.0;
  self.id = Std.string(_G.math.random() * 1000000000);
  self.wman = nil;
  self.style = Style.new();
  self.parent = nil;
  self.visible = true;
  self.children = _hx_tab_array({}, 0);
  self.oh = 1;
  self.ow = 10;
  self.height = 1;
  self.width = 10;
  self.hexpand = 0;
  self.vexpand = 0;
  self.ya = 0;
  self.xa = 0;
  self.y = 0;
  self.x = 0;
end
_hx_exports["Widget"] = Widget
Widget.__name__ = true
Widget.deserialize = function(data) 
  local this1 = Values.typenames;
  local key = Reflect.field(data, "typeName");
  if (this1.h[key] ~= nil) then 
    local this1 = Values.typenames;
    local key = Reflect.field(data, "typeName");
    local ret = this1.h[key];
    local ObjectType = (function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )();
    local obj = ObjectType();
    obj:deserializeAdditional(data);
    local _g = __haxe_ds_StringMap.new();
    local value = Float;
    if (value == nil) then 
      _g.h.x = __haxe_ds_StringMap.tnull;
    else
      _g.h.x = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.y = __haxe_ds_StringMap.tnull;
    else
      _g.h.y = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.xa = __haxe_ds_StringMap.tnull;
    else
      _g.h.xa = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.ya = __haxe_ds_StringMap.tnull;
    else
      _g.h.ya = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.vexpand = __haxe_ds_StringMap.tnull;
    else
      _g.h.vexpand = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.hexpand = __haxe_ds_StringMap.tnull;
    else
      _g.h.hexpand = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.width = __haxe_ds_StringMap.tnull;
    else
      _g.h.width = value;
    end;
    local value = Float;
    if (value == nil) then 
      _g.h.height = __haxe_ds_StringMap.tnull;
    else
      _g.h.height = value;
    end;
    local value = String;
    if (value == nil) then 
      _g.h.id = __haxe_ds_StringMap.tnull;
    else
      _g.h.id = value;
    end;
    local value = Dynamic;
    if (value == nil) then 
      _g.h.style = __haxe_ds_StringMap.tnull;
    else
      _g.h.style = value;
    end;
    local value = Dynamic;
    if (value == nil) then 
      _g.h.children = __haxe_ds_StringMap.tnull;
    else
      _g.h.children = value;
    end;
    local deserializeValues = _g;
    local map = deserializeValues;
    local _g_map = map;
    local _g_keys = map:keys();
    while (_g_keys:hasNext()) do _hx_do_first_1 = false;
      
      local key = _g_keys:next();
      local _g_value = _g_map:get(key);
      local _g_key = key;
      local name = _g_key;
      local type = _g_value;
      if (__lua_Boot.__instanceof(Reflect.field(data, name), type)) then 
        if (name == "children") then 
          obj.children = _hx_tab_array({}, 0);
          local _g = 0;
          local _g1 = __lua_Boot.__cast(Reflect.field(data, "children") , Array);
          while (_g < _g1.length) do _hx_do_first_2 = false;
            
            local i = _g1[_g];
            _g = _g + 1;
            local w = Widget.deserialize(i);
            obj:addChild(w);
          end;
        else
          if (name == "style") then 
            local f = Reflect.field(data, name);
            local nstyle = Style.new();
            nstyle.fgColor = Colors.fromBlit(Reflect.field(f, "fgColor"));
            nstyle.bgColor = Colors.fromBlit(Reflect.field(f, "bgColor"));
            obj.style = nstyle;
          else
            obj[name] = Reflect.field(data, name);
          end;
        end;
      end;
    end;
    do return obj end;
  else
    do return data end;
  end;
end
Widget.fromJSON = function(json) 
  do return Widget.deserialize(__haxe_Json.parse(json)) end;
end
Widget.prototype = _hx_e();
Widget.prototype.x= nil;
Widget.prototype.y= nil;
Widget.prototype.xa= nil;
Widget.prototype.ya= nil;
Widget.prototype.vexpand= nil;
Widget.prototype.hexpand= nil;
Widget.prototype.width= nil;
Widget.prototype.height= nil;
Widget.prototype.ow= nil;
Widget.prototype.oh= nil;
Widget.prototype.children= nil;
Widget.prototype.visible= nil;
Widget.prototype.parent= nil;
Widget.prototype.style= nil;
Widget.prototype.wman= nil;
Widget.prototype.id= nil;
Widget.prototype.lsw= nil;
Widget.prototype.lsh= nil;
Widget.prototype.requestsRerender= nil;
Widget.prototype.requestRerender = function(self) 
  self.requestsRerender = true;
end
Widget.prototype.getWman = function(self) 
  if (self.wman ~= nil) then 
    do return self.wman end;
  else
    if (self.parent ~= nil) then 
      do return self.parent:getWman() end;
    else
      do return ScreenManager.new(nil) end;
    end;
  end;
end
Widget.prototype.fixedWidth = function(self,screenwidth,screenheight,ignoreParent) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  do return _G.math.floor((self.width + (self.hexpand * (function() 
    local _hx_1
    if (ignoreParent) then 
    _hx_1 = screenwidth; else 
    _hx_1 = self.parent:fixedWidth(screenwidth, screenheight); end
    return _hx_1
  end )())) + 0.5) end
end
Widget.prototype.fixedHeight = function(self,screenwidth,screenheight,ignoreParent) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  do return _G.math.floor((self.height + (self.vexpand * (function() 
    local _hx_1
    if (ignoreParent) then 
    _hx_1 = screenheight; else 
    _hx_1 = self.parent.height; end
    return _hx_1
  end )())) + 0.5) end
end
Widget.prototype.getPRenderCommands = function(self,screenwidth,screenheight,respectPosition) 
  if (respectPosition == nil) then 
    respectPosition = true;
  end;
  self.lsw = screenwidth;
  self.lsh = screenheight;
  if (not self.visible) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local oldw = (self.width + 1) - 1;
  local oldh = (self.height + 1) - 1;
  self.ow = oldw;
  self.oh = oldh;
  local fwidth = self:fixedWidth(screenwidth, screenheight);
  local fheight = self:fixedHeight(screenwidth, screenheight);
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local c = _g1[_g];
    _g = _g + 1;
    c.parent = self;
  end;
  local rc = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = fwidth;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local _g = 0;
    local _g1 = fheight;
    while (_g < _g1) do _hx_do_first_2 = false;
      
      _g = _g + 1;
      local ix = _g - 1;
      rc:push(PositionedRenderCommand.new(i, ix, " ", self.id, self.style.fgColor, self.style.bgColor));
    end;
  end;
  local _g = 0;
  local _g1 = self:renderImpl(screenwidth, screenheight, fwidth, fheight);
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local i = _g1[_g];
    _g = _g + 1;
    rc:push(i);
  end;
  local nrc = _hx_tab_array({}, 0);
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < rc.length) do _hx_do_first_1 = false;
    repeat 
    local command = rc[_g];
    _g = _g + 1;
    if ((((command.x >= fwidth) or (command.y >= fheight)) or (command.x < 0)) or (command.y < 0)) then 
      break;
    end;
    if (respectPosition) then 
      command.x = _G.math.floor(self:fixedXC(command.x, screenwidth, screenheight, true, true));
      command.y = _G.math.floor(self:fixedYC(command.y, screenwidth, screenheight, true, true));
    end;
    nrc:push(command);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  self.width = oldw;
  self.height = oldh;
  do return nrc end
end
Widget.prototype.fixedX = function(self,screenwidth,screenheight,ignoreParent) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  local x = self:fixedXC(0, screenwidth, screenheight, ignoreParent, true);
  do return x end
end
Widget.prototype.fixedY = function(self,screenwidth,screenheight,ignoreParent) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  local x = self:fixedYC(0, screenwidth, screenheight, ignoreParent, true);
  do return x end
end
Widget.prototype.fixedXC = function(self,xc,screenwidth,screenheight,ignoreParent,includeThis) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  if (not ignoreParent) then 
    screenwidth = self.parent:fixedWidth(screenwidth, screenheight);
    screenheight = self.parent:fixedHeight(screenwidth, screenheight);
  end;
  do return _G.math.floor((((xc + (function() 
    local _hx_1
    if (includeThis) then 
    _hx_1 = self.x; else 
    _hx_1 = 0; end
    return _hx_1
  end )()) + (self.xa * screenwidth)) + (function() 
    local _hx_2
    if (ignoreParent) then 
    _hx_2 = 0; else 
    _hx_2 = self.parent:fixedX(screenwidth, screenheight); end
    return _hx_2
  end )()) - (self.xa * self:fixedWidth(screenwidth, screenheight))) end
end
Widget.prototype.fixedYC = function(self,yc,screenwidth,screenheight,ignoreParent,includeThis) 
  if (ignoreParent == nil) then 
    ignoreParent = false;
  end;
  if (self.parent == nil) then 
    ignoreParent = true;
  end;
  if (not ignoreParent) then 
    screenwidth = self.parent:fixedWidth(screenwidth, screenheight);
    screenheight = self.parent:fixedHeight(screenwidth, screenheight);
  end;
  do return _G.math.floor((((yc + (function() 
    local _hx_1
    if (includeThis) then 
    _hx_1 = self.y; else 
    _hx_1 = 0; end
    return _hx_1
  end )()) + (self.ya * screenheight)) + (function() 
    local _hx_2
    if (ignoreParent) then 
    _hx_2 = 0; else 
    _hx_2 = self.parent:fixedY(screenwidth, screenheight); end
    return _hx_2
  end )()) - (self.ya * self:fixedHeight(screenwidth, screenheight))) end
end
Widget.prototype.addChild = function(self,child) 
  child.parent = self;
  self.children:push(child);
end
Widget.prototype.remChild = function(self,child) 
  child.parent = nil;
  self.children:remove(child);
end
Widget.prototype.getChildByID = function(self,id) 
  local _g = 0;
  local _g1 = self:recFilterChildren(function(w) 
    do return w.id == id end;
  end);
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    do return widget end;
  end;
  _G.error(__haxe_Exception.new(Std.string("Cannot find child with id ") .. Std.string(id)),0);
end
Widget.prototype.recFilterChildren = function(self,filter) 
  local ch = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    if (filter(widget)) then 
      ch:push(widget);
    end;
    ch = ch:concat(widget:recFilterChildren(filter));
  end;
  ch:reverse();
  do return ch end
end
Widget.prototype.recFilterChildrenUF = function(self,filter) 
  local ch = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    local cha = widget:recFilterChildrenUF(filter);
    local r = widget;
    r.children = cha;
    if (filter(widget)) then 
      ch:push(widget);
    end;
  end;
  ch:reverse();
  do return ch end
end
Widget.prototype.getTypename= nil;
Widget.prototype.getSize = function(self) 
  if (not self.visible) then 
    do return Vector2f.new(0, 0) end;
  end;
  do return Vector2f.new(self.width, self.height) end
end
Widget.prototype.renderImpl= nil;
Widget.prototype.onClick = function(self,pos,mb,wself) 
end
Widget.prototype.onDrag = function(self,startpos,pos,mb,wself) 
end
Widget.prototype.onClickUp = function(self,startpos,pos,mb,wself) 
end
Widget.prototype.onScroll = function(self,pos,dir,wself) 
end
Widget.prototype.onCustom = function(self,c) 
end
Widget.prototype.onRender = function(self) 
end
Widget.prototype.deserializeAdditional= nil;
Widget.prototype.additionalEditorFields= nil;
Widget.prototype.getEditorFields = function(self) 
  local a = self:additionalEditorFields();
  local _g = __haxe_ds_StringMap.new();
  _g.h.style = "Style";
  _g.h.id = "ID";
  _g.h.x = "X";
  _g.h.y = "Y";
  _g.h.width = "Width";
  _g.h.height = "Height";
  _g.h.xa = "X align";
  _g.h.ya = "Y align";
  _g.h.hexpand = "Expand on X axis";
  _g.h.vexpand = "Expand on Y axis";
  local map = _g;
  local _g_map = map;
  local _g_keys = map:keys();
  while (_g_keys:hasNext()) do _hx_do_first_1 = false;
    
    local key = _g_keys:next();
    local _g_value = _g_map:get(key);
    local _g_key = key;
    local s = _g_key;
    local v = _g_value;
    if (v == nil) then 
      a.h[s] = __haxe_ds_StringMap.tnull;
    else
      a.h[s] = v;
    end;
  end;
  do return a end
end
Widget.prototype.serializeAdditional= nil;
Widget.prototype.serialize = function(self) 
  local data = __haxe_ds_StringMap.new();
  local map = self:serializeAdditional();
  local _g_map = map;
  local _g_keys = map:keys();
  while (_g_keys:hasNext()) do _hx_do_first_1 = false;
    
    local key = _g_keys:next();
    local _g_value = _g_map:get(key);
    local _g_key = key;
    local k = _g_key;
    local v = _g_value;
    local v = v;
    local value = v;
    if (value == nil) then 
      data.h[k] = __haxe_ds_StringMap.tnull;
    else
      data.h[k] = value;
    end;
  end;
  local _g = __haxe_ds_StringMap.new();
  local value = Float;
  if (value == nil) then 
    _g.h.x = __haxe_ds_StringMap.tnull;
  else
    _g.h.x = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.y = __haxe_ds_StringMap.tnull;
  else
    _g.h.y = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.xa = __haxe_ds_StringMap.tnull;
  else
    _g.h.xa = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.ya = __haxe_ds_StringMap.tnull;
  else
    _g.h.ya = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.vexpand = __haxe_ds_StringMap.tnull;
  else
    _g.h.vexpand = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.hexpand = __haxe_ds_StringMap.tnull;
  else
    _g.h.hexpand = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.width = __haxe_ds_StringMap.tnull;
  else
    _g.h.width = value;
  end;
  local value = Float;
  if (value == nil) then 
    _g.h.height = __haxe_ds_StringMap.tnull;
  else
    _g.h.height = value;
  end;
  local value = String;
  if (value == nil) then 
    _g.h.id = __haxe_ds_StringMap.tnull;
  else
    _g.h.id = value;
  end;
  local value = Array;
  if (value == nil) then 
    _g.h.children = __haxe_ds_StringMap.tnull;
  else
    _g.h.children = value;
  end;
  local value = Style;
  if (value == nil) then 
    _g.h.style = __haxe_ds_StringMap.tnull;
  else
    _g.h.style = value;
  end;
  local serializeValues = _g;
  local map = serializeValues;
  local _g_map = map;
  local _g_keys = map:keys();
  while (_g_keys:hasNext()) do _hx_do_first_1 = false;
    
    local key = _g_keys:next();
    local _g_value = _g_map:get(key);
    local _g_key = key;
    local name = _g_key;
    local type = _g_value;
    local rp = name;
    if (rp == "width") then 
      rp = "ow";
    end;
    if (rp == "height") then 
      rp = "oh";
    end;
    local v = Reflect.getProperty(self, rp);
    local value = v;
    if (value == nil) then 
      data.h[name] = __haxe_ds_StringMap.tnull;
    else
      data.h[name] = value;
    end;
    local ret = data.h[name];
    if (__lua_Boot.__instanceof((function() 
      local _hx_1
      if (ret == __haxe_ds_StringMap.tnull) then 
      _hx_1 = nil; else 
      _hx_1 = ret; end
      return _hx_1
    end )(), Style)) then 
      local _g = __haxe_ds_StringMap.new();
      local value = self.style.fgColor.blit;
      if (value == nil) then 
        _g.h.fgColor = __haxe_ds_StringMap.tnull;
      else
        _g.h.fgColor = value;
      end;
      local value = self.style.bgColor.blit;
      if (value == nil) then 
        _g.h.bgColor = __haxe_ds_StringMap.tnull;
      else
        _g.h.bgColor = value;
      end;
      local newData = _g;
      local value = newData;
      if (value == nil) then 
        data.h[name] = __haxe_ds_StringMap.tnull;
      else
        data.h[name] = value;
      end;
    end;
    if (name == "children") then 
      local ncmd = _hx_tab_array({}, 0);
      local _g = 0;
      local _g1 = self.children;
      while (_g < _g1.length) do _hx_do_first_2 = false;
        
        local widget = _g1[_g];
        _g = _g + 1;
        ncmd:push(widget:serialize());
      end;
      local value = ncmd;
      if (value == nil) then 
        data.h[name] = __haxe_ds_StringMap.tnull;
      else
        data.h[name] = value;
      end;
    end;
  end;
  local v = self:getTypename();
  local value = v;
  if (value == nil) then 
    data.h.typeName = __haxe_ds_StringMap.tnull;
  else
    data.h.typeName = value;
  end;
  do return data end
end
Widget.prototype.toJSON = function(self) 
  do return __haxe_Json.stringify(self:serialize()) end
end

Widget.prototype.__class__ =  Widget

SimpleContainer.new = function(widgets) 
  local self = _hx_new(SimpleContainer.prototype)
  SimpleContainer.super(self,widgets)
  return self
end
SimpleContainer.super = function(self,widgets) 
  self.offset = Vector2f.new(0, 0);
  Widget.super(self);
  if (_hx_bind(widgets,widgets.push) == nil) then 
    local length = nil;
    local tab = __lua_PairTools.copy(widgets);
    local length = length;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        widgets = _hx_tab_array(tab, length);
      else
        widgets = _hx_tab_array({}, 0);
      end;
    else
      widgets = _hx_tab_array(tab, length);
    end;
  end;
  self.children = widgets;
end
_hx_exports["SimpleContainer"] = SimpleContainer
SimpleContainer.__name__ = true
SimpleContainer.prototype = _hx_e();
SimpleContainer.prototype.offset= nil;
SimpleContainer.prototype.getMostWidgetHeight = function(self) 
  local w = 0.0;
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    w = Math.max(w, widget:fixedY(self.width, self.height, true) + widget:fixedHeight(self.width, self.height, true));
  end;
  do return w end
end
SimpleContainer.prototype.renderImpl = function(self,screenwidth,screenheight,width,height) 
  local _gthis = self;
  local rc = _hx_tab_array({}, 0);
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    local _g = _hx_tab_array({}, 0);
    local _g1 = 0;
    local _g2 = widget:getPRenderCommands(width, height);
    while (_g1 < _g2.length) do _hx_do_first_2 = false;
      
      local i = _g2[_g1];
      _g1 = _g1 + 1;
      local i1 = i;
      i1.x = i1.x + _gthis.offset.x;
      local i1 = i;
      i1.y = i1.y + _gthis.offset.y;
      _g:push(i);
    end;
    rc = rc:concat(_g);
  end;
  do return rc end
end
SimpleContainer.prototype.onClick = function(self,pos,mb,wself) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local e = _g1[_g];
    _g = _g + 1;
    local xp = Vector2f.add(pos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local termSize = Vector2f.new(self.lsw, self.lsh);
    local wwself = (((xp.x >= 0) and (xp.y >= 0)) and (xp.x < e:fixedWidth(self.lsw, self.lsh, true))) and (xp.y < e:fixedHeight(self.lsw, self.lsh, true));
    local wwself1 = wwself;
    e:onClick(xp, mb, wwself);
    if (e.requestsRerender) then 
      self:requestRerender();
    end;
  end;
end
SimpleContainer.prototype.onDrag = function(self,startpos,pos,mb,wself) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local e = _g1[_g];
    _g = _g + 1;
    local sxp = Vector2f.add(startpos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local xp = Vector2f.add(pos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local termSize = Vector2f.new(self.lsw, self.lsh);
    local wwself = (((xp.x >= 0) and (xp.y >= 0)) and (xp.x < e.width)) and (xp.y < e.height);
    e:onDrag(sxp, xp, mb, wwself);
    if (e.requestsRerender) then 
      self:requestRerender();
    end;
  end;
end
SimpleContainer.prototype.onClickUp = function(self,startpos,pos,mb,wself) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local e = _g1[_g];
    _g = _g + 1;
    local sxp = Vector2f.add(startpos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local xp = Vector2f.add(pos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local termSize = Vector2f.new(self.lsw, self.lsh);
    local wwself = (((xp.x >= 0) and (xp.y >= 0)) and (xp.x < e.width)) and (xp.y < e.height);
    e:onClickUp(sxp, xp, mb, wwself);
    if (e.requestsRerender) then 
      self:requestRerender();
    end;
  end;
end
SimpleContainer.prototype.onScroll = function(self,pos,dir,wself) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local e = _g1[_g];
    _g = _g + 1;
    local xp = Vector2f.add(pos, self.offset):addInts(-e:fixedX(self.lsw, self.lsh, true), -e:fixedY(self.lsw, self.lsh, true)):addInts(-1, -1);
    local termSize = Vector2f.new(self.lsw, self.lsh);
    local wwself = (((xp.x >= 0) and (xp.y >= 0)) and (xp.x < e.width)) and (xp.y < e.height);
    e:onScroll(xp, dir, wwself);
    if (e.requestsRerender) then 
      self:requestRerender();
    end;
  end;
end
SimpleContainer.prototype.onCustom = function(self,c) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    widget:onCustom(c);
    if (widget.requestsRerender) then 
      self:requestRerender();
    end;
  end;
end
SimpleContainer.prototype.onRender = function(self) 
  local _g = 0;
  local _g1 = self.children;
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local widget = _g1[_g];
    _g = _g + 1;
    widget:onRender();
    widget.requestsRerender = false;
  end;
end
SimpleContainer.prototype.deserializeAdditional = function(self,data) 
  do return self end
end
SimpleContainer.prototype.serializeAdditional = function(self) 
  do return __haxe_ds_StringMap.new() end
end
SimpleContainer.prototype.additionalEditorFields = function(self) 
  do return __haxe_ds_StringMap.new() end
end
SimpleContainer.prototype.getTypename = function(self) 
  do return "Container" end
end

SimpleContainer.prototype.__class__ =  SimpleContainer
SimpleContainer.__super__ = Widget
setmetatable(SimpleContainer.prototype,{__index=Widget.prototype})

Button.new = function(widgets,command) 
  local self = _hx_new(Button.prototype)
  Button.super(self,widgets,command)
  return self
end
Button.super = function(self,widgets,command) 
  self.command = nil;
  SimpleContainer.super(self,widgets);
  self.command = command;
end
_hx_exports["Button"] = Button
Button.__name__ = true
Button.prototype = _hx_e();
Button.prototype.command= nil;
Button.prototype.getTypename = function(self) 
  do return "Button" end
end
Button.prototype.deserializeAdditional = function(self,data) 
  self.command = Command.deserialize(data.cmd);
  do return self end
end
Button.prototype.serializeAdditional = function(self) 
  local _g = __haxe_ds_StringMap.new();
  local value = self.command:serialize();
  if (value == nil) then 
    _g.h.cmd = __haxe_ds_StringMap.tnull;
  else
    _g.h.cmd = value;
  end;
  do return _g end
end
Button.prototype.additionalEditorFields = function(self) 
  local _g = __haxe_ds_StringMap.new();
  _g.h.command = "On Click";
  do return _g end
end
Button.prototype.onClick = function(self,pos,mb,wself) 
  Runner.log(Std.string(Std.string(Std.string(Std.string(Std.string("Position: ") .. Std.string(pos.x)) .. Std.string(", ")) .. Std.string(pos.y)) .. Std.string(" Self: ")) .. Std.string(Std.string(wself)), _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/Button.hx",lineNumber=247,className="Button",methodName="onClick"}));
  if (wself) then 
    self.command:execute(self, self.lsw, self.lsh);
  end;
end

Button.prototype.__class__ =  Button
Button.__super__ = SimpleContainer
setmetatable(Button.prototype,{__index=SimpleContainer.prototype})

Color.new = function(blitText,palNumber,bitASC) 
  local self = _hx_new(Color.prototype)
  Color.super(self,blitText,palNumber,bitASC)
  return self
end
Color.super = function(self,blitText,palNumber,bitASC) 
  self.blit = "f";
  self.palNumber = palNumber;
  self.bitASC = bitASC;
  self.blit = blitText;
end
_hx_exports["Color"] = Color
Color.__name__ = true
Color.prototype = _hx_e();
Color.prototype.palNumber= nil;
Color.prototype.bitASC= nil;
Color.prototype.blit= nil;

Color.prototype.__class__ =  Color

RGBColor.new = function(r,g,b) 
  local self = _hx_new(RGBColor.prototype)
  RGBColor.super(self,r,g,b)
  return self
end
RGBColor.super = function(self,r,g,b) 
  self.red = r;
  self.green = g;
  self.blue = b;
end
_hx_exports["RGBColor"] = RGBColor
RGBColor.__name__ = true
RGBColor.prototype = _hx_e();
RGBColor.prototype.red= nil;
RGBColor.prototype.green= nil;
RGBColor.prototype.blue= nil;

RGBColor.prototype.__class__ =  RGBColor

Colors.new = {}
_hx_exports["Colors"] = Colors
Colors.__name__ = true
Colors.fromBlit = function(b) 
  local b = b;
  if (b) == "0" then 
    do return Colors.white end;
  elseif (b) == "1" then 
    do return Colors.orange end;
  elseif (b) == "2" then 
    do return Colors.magenta end;
  elseif (b) == "3" then 
    do return Colors.lightBlue end;
  elseif (b) == "4" then 
    do return Colors.yellow end;
  elseif (b) == "5" then 
    do return Colors.lime end;
  elseif (b) == "6" then 
    do return Colors.pink end;
  elseif (b) == "7" then 
    do return Colors.gray end;
  elseif (b) == "8" then 
    do return Colors.lightGray end;
  elseif (b) == "9" then 
    do return Colors.cyan end;
  elseif (b) == "a" then 
    do return Colors.purple end;
  elseif (b) == "b" then 
    do return Colors.blue end;
  elseif (b) == "c" then 
    do return Colors.brown end;
  elseif (b) == "d" then 
    do return Colors.green end;
  elseif (b) == "e" then 
    do return Colors.red end;
  elseif (b) == "f" then 
    do return Colors.black end;else
  do return Colors.white end; end;
end
_hxClasses["MouseButton"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="NONE","LEFT","MIDDLE","RIGHT"},4)}
MouseButton = _hxClasses["MouseButton"];
MouseButton.NONE = _hx_tab_array({[0]="NONE",0,__enum__ = MouseButton},2)

MouseButton.LEFT = _hx_tab_array({[0]="LEFT",1,__enum__ = MouseButton},2)

MouseButton.MIDDLE = _hx_tab_array({[0]="MIDDLE",2,__enum__ = MouseButton},2)

MouseButton.RIGHT = _hx_tab_array({[0]="RIGHT",3,__enum__ = MouseButton},2)


Label.new = function(x,y,text) 
  local self = _hx_new(Label.prototype)
  Label.super(self,x,y,text)
  return self
end
Label.super = function(self,x,y,text) 
  self.text = "<empty>";
  Widget.super(self);
  self.x = x;
  self.y = y;
  self.text = text;
  local s = ___Label_Label_Fields_.getTheoreticalWH(text);
  self.width = s[0];
  self.height = s[1];
end
_hx_exports["Label"] = Label
Label.__name__ = true
Label.prototype = _hx_e();
Label.prototype.text= nil;
Label.prototype.renderImpl = function(self,screenwidth,screenheight,width,height) 
  local o = _hx_tab_array({}, 0);
  local cposx = 0;
  local cposy = 0;
  local _g = 0;
  local _g1 = #self.text;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local char = _G.string.sub(self.text, i + 1, i + 1);
    if (char == "\n") then 
      cposx = 0;
      cposy = cposy + 1;
    else
      o:push(PositionedRenderCommand.new(cposx, cposy, char, self.id, self.style.fgColor, self.style.bgColor));
      cposx = cposx + 1;
    end;
  end;
  do return o end
end
Label.prototype.deserializeAdditional = function(self,data) 
  if (__lua_Boot.__instanceof(data.labelText, String)) then 
    self.text = data.labelText;
  end;
  do return self end
end
Label.prototype.serializeAdditional = function(self) 
  local _g = __haxe_ds_StringMap.new();
  local value = self.text;
  if (value == nil) then 
    _g.h.labelText = __haxe_ds_StringMap.tnull;
  else
    _g.h.labelText = value;
  end;
  do return _g end
end
Label.prototype.additionalEditorFields = function(self) 
  local _g = __haxe_ds_StringMap.new();
  _g.h.text = "Label";
  do return _g end
end
Label.prototype.getTypename = function(self) 
  do return "Label" end
end

Label.prototype.__class__ =  Label
Label.__super__ = Widget
setmetatable(Label.prototype,{__index=Widget.prototype})

___Label_Label_Fields_.new = {}
___Label_Label_Fields_.__name__ = true
___Label_Label_Fields_.getTheoreticalWH = function(str) 
  local cposx = 0;
  local cposy = 0;
  local maxw = 0;
  local maxh = 1;
  local _g = 0;
  local _g1 = #str;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local char = _G.string.sub(str, i + 1, i + 1);
    if (char == "\n") then 
      cposx = 0;
      cposy = cposy + 1;
      maxh = maxh + 1;
    else
      cposx = cposx + 1;
      maxw = Std.int(Math.max(cposx, maxw));
    end;
  end;
  do return _hx_tab_array({[0]=maxw, maxh}, 2) end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "function") and not ((function() 
        local _hx_2
        if (_G.type(o) ~= "table") then 
        _hx_2 = false; else 
        _hx_2 = o.__name__; end
        return _hx_2
      end )() or (function() 
        local _hx_3
        if (_G.type(o) ~= "table") then 
        _hx_3 = false; else 
        _hx_3 = o.__ename__; end
        return _hx_3
      end )())) then 
      _hx_1 = false; elseif ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do _hx_do_first_1 = false;
    
    local p = String.prototype.indexOf(self, str, ret + 1);
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do _hx_do_first_1 = false;
    
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local sign, numString = _G.string.match(x, "^%s*([%-+]?)0[xX]([%da-fA-F]*)");
  if (numString ~= nil) then 
    if (sign == "-") then 
      do return -_G.tonumber(numString, 16) end;
    else
      do return _G.tonumber(numString, 16) end;
    end;
  end;
  local intMatch = _G.string.match(x, "^%s*[%-+]?%d*");
  if (intMatch == nil) then 
    do return nil end;
  end;
  do return _G.tonumber(intMatch) end;
end
Std.parseFloat = function(x) 
  if ((x == nil) or (x == "")) then 
    do return (0/0) end;
  end;
  local digitMatch = _G.string.match(x, "^%s*[%.%-+]?[0-9]%d*");
  if (digitMatch == nil) then 
    do return (0/0) end;
  end;
  x = String.prototype.substr(x, #digitMatch);
  local decimalMatch = _G.string.match(x, "^%.%d*");
  if (decimalMatch == nil) then 
    decimalMatch = "";
  end;
  x = String.prototype.substr(x, #decimalMatch);
  local eMatch = _G.string.match(x, "^[eE][+%-]?%d+");
  if (eMatch == nil) then 
    eMatch = "";
  end;
  local result = _G.tonumber(Std.string(Std.string(digitMatch) .. Std.string(decimalMatch)) .. Std.string(eMatch));
  if (result ~= nil) then 
    do return result end;
  else
    do return (0/0) end;
  end;
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

__lua_PairTools.new = {}
__lua_PairTools.__name__ = true
__lua_PairTools.copy = function(table1) 
  local ret = ({});
  for k,v in _G.pairs(table1) do ret[k] = v end;
  do return ret end;
end

TextArea.new = function(x,y,placeholder) 
  local self = _hx_new(TextArea.prototype)
  TextArea.super(self,x,y,placeholder)
  return self
end
TextArea.super = function(self,x,y,placeholder) 
  self.onTab = Command.new();
  self.onSubmit = Command.new();
  self.ctrlPressed = false;
  self.scroll = Vector2f.new(0, 0);
  self.cursorPos = Vector2f.new(0, 0);
  self.focused = false;
  self.isFocused = false;
  self.value = "";
  self.placeholder = "";
  Widget.super(self);
  self.x = x;
  self.y = y;
  self.placeholder = placeholder;
  self.style.bgColor = Colors.gray;
end
_hx_exports["TextArea"] = TextArea
TextArea.__name__ = true
TextArea.prototype = _hx_e();
TextArea.prototype.placeholder= nil;
TextArea.prototype.value= nil;
TextArea.prototype.isFocused= nil;
TextArea.prototype.focused= nil;
TextArea.prototype.cursorPos= nil;
TextArea.prototype.scroll= nil;
TextArea.prototype.ctrlPressed= nil;
TextArea.prototype.onSubmit= nil;
TextArea.prototype.onTab= nil;
TextArea.prototype.onClick = function(self,pos,mb,wself) 
  if (self.focused and wself) then 
    local pos1 = pos.y;
    local tmp = String.prototype.split(self.value, "\n").length - 1;
    self.cursorPos.y = Math.min(pos1, tmp);
    local pos = pos.x;
    local tmp = String.prototype.split(self.value, "\n");
    local tmp1 = Std.int(self.cursorPos.y);
    self.cursorPos.x = Math.min(pos, #tmp[tmp1]);
  end;
  self.focused = wself;
  self:requestRerender();
end
TextArea.prototype.onCustom = function(self,c) 
  if (not self.focused or ((c[0] ~= "key") and (c[0] ~= "char"))) then 
    do return end;
  end;
  local cursorPosAsInt = 0;
  local _g = 0;
  local _g1 = Std.int(self.cursorPos.y);
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    cursorPosAsInt = cursorPosAsInt + (#String.prototype.split(self.value, "\n")[i] + 1);
  end;
  cursorPosAsInt = cursorPosAsInt + Std.int(self.cursorPos.x);
  if (c[0] == "key_up") then 
    if (c[1] == keys.control) then 
      self.ctrlPressed = false;
    end;
  end;
  if (c[0] == "key") then 
    if (c[1] == keys.control) then 
      self.ctrlPressed = true;
    end;
    if ((self.ctrlPressed and (c[1] == keys.u)) and self.focused) then 
      self.value = "";
    end;
    if ((c[1] == keys.backspace) and not ((self.cursorPos.y < 1) and (self.cursorPos.x < 1))) then 
      self.value = Std.string(String.prototype.substring(self.value, 0, cursorPosAsInt - 1)) .. Std.string(String.prototype.substring(self.value, cursorPosAsInt));
      self.cursorPos.x = self.cursorPos.x - 1;
      if (self.cursorPos.x < 0) then 
        self.cursorPos.y = self.cursorPos.y - 1;
        local tmp = String.prototype.split(self.value, "\n");
        local tmp1 = Std.int(self.cursorPos.y);
        self.cursorPos.x = #tmp[tmp1];
      end;
    end;
    if (c[1] == keys.home) then 
      self.cursorPos.x = 0;
    end;
    if (c[1] == keys["end"]) then 
      local tmp = String.prototype.split(self.value, "\n");
      local tmp1 = Std.int(self.cursorPos.y);
      self.cursorPos.x = #tmp[tmp1];
    end;
    if (c[1] == keys.delete) then 
      self.value = Std.string(String.prototype.substring(self.value, 0, cursorPosAsInt)) .. Std.string(String.prototype.substring(self.value, cursorPosAsInt + 1));
    end;
    if (c[1] == keys.left) then 
      self.cursorPos.x = self.cursorPos.x - 1;
      if (self.cursorPos.x < 0) then 
        if (self.cursorPos.y > 0) then 
          self.cursorPos.y = self.cursorPos.y - 1;
          local tmp = String.prototype.split(self.value, "\n");
          local tmp1 = Std.int(self.cursorPos.y);
          self.cursorPos.x = #tmp[tmp1];
        else
          self.cursorPos.x = self.cursorPos.x + 1;
        end;
      end;
      local tmp = self.cursorPos.y;
      local tmp1 = String.prototype.split(self.value, "\n").length - 1;
      self.cursorPos.y = Math.min(tmp, tmp1);
      local tmp = self.cursorPos.x;
      local tmp1 = #String.prototype.split(self.value, "\n")[Std.int(self.cursorPos.y)] - 1;
      self.cursorPos.x = Math.min(tmp, tmp1);
    end;
    if (c[1] == keys.right) then 
      self.cursorPos.x = self.cursorPos.x + 1;
      if (self.cursorPos.x > #String.prototype.split(self.value, "\n")[Std.int(self.cursorPos.y)]) then 
        self.cursorPos.x = self.cursorPos.x - 1;
        if (String.prototype.split(self.value, "\n").length > (self.cursorPos.y + 1)) then 
          self.cursorPos.y = self.cursorPos.y + 1;
          self.cursorPos.x = 0;
        end;
      end;
      local tmp = self.cursorPos.y;
      local tmp1 = String.prototype.split(self.value, "\n").length - 1;
      self.cursorPos.y = Math.min(tmp, tmp1);
      local tmp = self.cursorPos.x;
      local tmp1 = String.prototype.split(self.value, "\n");
      local tmp2 = Std.int(self.cursorPos.y);
      self.cursorPos.x = Math.min(tmp, #tmp1[tmp2]);
    end;
    if (c[1] == keys.up) then 
      self.cursorPos.y = self.cursorPos.y - 1;
      local tmp = self.cursorPos.y;
      local tmp1 = String.prototype.split(self.value, "\n").length - 1;
      self.cursorPos.y = Math.min(tmp, tmp1);
      local tmp = self.cursorPos.x;
      local tmp1 = String.prototype.split(self.value, "\n");
      local tmp2 = Std.int(self.cursorPos.y);
      self.cursorPos.x = Math.min(tmp, #tmp1[tmp2]);
    end;
    if (c[1] == keys.down) then 
      self.cursorPos.y = self.cursorPos.y + 1;
      local tmp = self.cursorPos.y;
      local tmp1 = String.prototype.split(self.value, "\n").length - 1;
      self.cursorPos.y = Math.min(tmp, tmp1);
      local tmp = self.cursorPos.x;
      local tmp1 = String.prototype.split(self.value, "\n");
      local tmp2 = Std.int(self.cursorPos.y);
      self.cursorPos.x = Math.min(tmp, #tmp1[tmp2]);
    end;
    if ((c[1] == keys.enter) and (self.height > 1)) then 
      self.value = Std.string(Std.string(String.prototype.substring(self.value, 0, cursorPosAsInt)) .. Std.string("\n")) .. Std.string(String.prototype.substring(self.value, cursorPosAsInt));
      self.cursorPos.y = self.cursorPos.y + 1;
      self.cursorPos.x = 0;
    else
      if ((c[1] == keys.enter) and (self.height <= 1)) then 
        self.onSubmit:execute(self, self.lsw, self.lsh);
      end;
    end;
    self:requestRerender();
  else
    if (c[0] == "char") then 
      self.value = Std.string(Std.string(String.prototype.substring(self.value, 0, cursorPosAsInt)) .. Std.string(Std.string(c[1]))) .. Std.string(String.prototype.substring(self.value, cursorPosAsInt));
      self.cursorPos.x = self.cursorPos.x + 1;
      self:requestRerender();
    end;
  end;
end
TextArea.prototype.onRender = function(self) 
  if ((self.focused and ((self.cursorPos.x + self.scroll.x) < self:fixedWidth(self.lsw, self.lsh))) and ((self.cursorPos.y + self.scroll.y) < self:fixedHeight(self.lsw, self.lsh))) then 
    local ts = self:getWman().term:getSize();
    self:getWman().term:setCursorPos(Std.int(((self:fixedX(ts.x, ts.y, false) + self.cursorPos.x) + self.scroll.x) + 1), Std.int(((self:fixedY(ts.x, ts.y, false) + self.cursorPos.y) + self.scroll.y) + 1));
    self:getWman().term:setCursorBlink(true);
  end;
end
TextArea.prototype.renderImpl = function(self,screenwidth,screenheight,width,height) 
  local tmp = self.cursorPos.y;
  local tmp1 = String.prototype.split(self.value, "\n").length - 1;
  self.cursorPos.y = Math.min(tmp, tmp1);
  local tmp = self.cursorPos.x;
  local tmp1 = String.prototype.split(self.value, "\n");
  local tmp2 = Std.int(self.cursorPos.y);
  self.cursorPos.x = Math.min(tmp, #tmp1[tmp2]);
  local text = (function() 
    local _hx_1
    if (#self.value > 0) then 
    _hx_1 = self.value; else 
    _hx_1 = self.placeholder; end
    return _hx_1
  end )();
  local o = _hx_tab_array({}, 0);
  local cposx = 0;
  local cposy = 0;
  local _g = 0;
  local _g1 = #text;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local char = _G.string.sub(text, i + 1, i + 1);
    if (char == "\n") then 
      cposx = 0;
      cposy = cposy + 1;
    else
      o:push(PositionedRenderCommand.new(cposx + self.scroll.x, cposy + self.scroll.y, char, self.id, (function() 
        local _hx_2
        if (#self.value > 0) then 
        _hx_2 = self.style.fgColor; else 
        _hx_2 = Colors.lightGray; end
        return _hx_2
      end )(), self.style.bgColor));
      cposx = cposx + 1;
    end;
  end;
  do return o end
end
TextArea.prototype.getTypename = function(self) 
  do return "TextArea" end
end
TextArea.prototype.serializeAdditional = function(self) 
  local _g = __haxe_ds_StringMap.new();
  local value = self.placeholder;
  if (value == nil) then 
    _g.h.placeholder = __haxe_ds_StringMap.tnull;
  else
    _g.h.placeholder = value;
  end;
  do return _g end
end
TextArea.prototype.deserializeAdditional = function(self,dt) 
  local data = dt;
  self.placeholder = Reflect.field(data, "placeholder");
  do return self end
end
TextArea.prototype.additionalEditorFields = function(self) 
  local _g = __haxe_ds_StringMap.new();
  _g.h.placeholder = "Placeholder";
  do return _g end
end

TextArea.prototype.__class__ =  TextArea
TextArea.__super__ = Widget
setmetatable(TextArea.prototype,{__index=Widget.prototype})

ScrollContainer.new = function(widgets) 
  local self = _hx_new(ScrollContainer.prototype)
  ScrollContainer.super(self,widgets)
  return self
end
ScrollContainer.super = function(self,widgets) 
  SimpleContainer.super(self,widgets);
end
_hx_exports["ScrollContainer"] = ScrollContainer
ScrollContainer.__name__ = true
ScrollContainer.prototype = _hx_e();
ScrollContainer.prototype.getTypename = function(self) 
  do return "ScrollContainer" end
end
ScrollContainer.prototype.onScroll = function(self,pos,dir,wself) 
  if (not wself) then 
    do return end;
  end;
  local fh = self.offset;
  fh.y = fh.y + -dir;
  local tmp = Math.max(self.offset.y, -(self:getMostWidgetHeight() - self:fixedHeight(self.lsw, self.lsh)));
  self.offset.y = Math.min(tmp, 0);
  self:requestRerender();
end

ScrollContainer.prototype.__class__ =  ScrollContainer
ScrollContainer.__super__ = SimpleContainer
setmetatable(ScrollContainer.prototype,{__index=SimpleContainer.prototype})

Values.new = {}
_hx_exports["Values"] = Values
Values.__name__ = true

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
Date.__name__ = true
Date.prototype = _hx_e();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

CCOS.new = {}
CCOS.__name__ = true
CCOS.pullEvent = function() 
  
        if arcos then return arcos.ev() else return os.pullEvent() end
        ;
  do return nil end;
end

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do _hx_do_first_1 = false;
    
    local x = x:next();
    if (x == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Main.new = {}
Main.__name__ = true
Main.main = function() 
end

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.getProperty = function(o,field) 
  if (o == nil) then 
    do return nil end;
  else
    if ((o.__properties__ ~= nil) and (Reflect.field(o, Std.string("get_") .. Std.string(field)) ~= nil)) then 
      do return Reflect.callMethod(o,Reflect.field(o, Std.string("get_") .. Std.string(field)),_hx_tab_array({}, 0)) end;
    else
      do return Reflect.field(o, field) end;
    end;
  end;
end
Reflect.callMethod = function(o,func,args) 
  if ((args == nil) or (args.length == 0)) then 
    do return func(o) end;
  else
    local self_arg = false;
    if ((o ~= nil) and (o.__name__ == nil)) then 
      self_arg = true;
    end;
    if (self_arg) then 
      do return func(o, _hx_table.unpack(args, 0, args.length - 1)) end;
    else
      do return func(_hx_table.unpack(args, 0, args.length - 1)) end;
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    do return _hx_field_arr(o) end;
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end

RenderCommand.new = function(char,belongsToID,fgColor,bgColor) 
  local self = _hx_new(RenderCommand.prototype)
  RenderCommand.super(self,char,belongsToID,fgColor,bgColor)
  return self
end
RenderCommand.super = function(self,char,belongsToID,fgColor,bgColor) 
  self.bgColor = Colors.black;
  self.fgColor = Colors.white;
  self.char = char;
  self.belongsToID = belongsToID;
  if (fgColor ~= nil) then 
    self.fgColor = fgColor;
  end;
  if (bgColor ~= nil) then 
    self.bgColor = bgColor;
  end;
end
_hx_exports["RenderCommand"] = RenderCommand
RenderCommand.__name__ = true
RenderCommand.prototype = _hx_e();
RenderCommand.prototype.char= nil;
RenderCommand.prototype.belongsToID= nil;
RenderCommand.prototype.fgColor= nil;
RenderCommand.prototype.bgColor= nil;

RenderCommand.prototype.__class__ =  RenderCommand

PositionedRenderCommand.new = function(x,y,char,belongsToID,fgColor,bgColor) 
  local self = _hx_new(PositionedRenderCommand.prototype)
  PositionedRenderCommand.super(self,x,y,char,belongsToID,fgColor,bgColor)
  return self
end
PositionedRenderCommand.super = function(self,x,y,char,belongsToID,fgColor,bgColor) 
  self.x = x;
  self.y = y;
  RenderCommand.super(self,char,belongsToID,fgColor,bgColor);
end
_hx_exports["PositionedRenderCommand"] = PositionedRenderCommand
PositionedRenderCommand.__name__ = true
PositionedRenderCommand.prototype = _hx_e();
PositionedRenderCommand.prototype.x= nil;
PositionedRenderCommand.prototype.y= nil;

PositionedRenderCommand.prototype.__class__ =  PositionedRenderCommand
PositionedRenderCommand.__super__ = RenderCommand
setmetatable(PositionedRenderCommand.prototype,{__index=RenderCommand.prototype})

Buffer.new = function(width,height) 
  local self = _hx_new(Buffer.prototype)
  Buffer.super(self,width,height)
  return self
end
Buffer.super = function(self,width,height) 
  self.matrix = _hx_tab_array({}, 0);
  self.height = 2;
  self.width = 2;
  self.width = width;
  self.height = height;
  self:reinitBuffer();
end
_hx_exports["Buffer"] = Buffer
Buffer.__name__ = true
Buffer.prototype = _hx_e();
Buffer.prototype.width= nil;
Buffer.prototype.height= nil;
Buffer.prototype.matrix= nil;
Buffer.prototype.reinitBuffer = function(self,bgcolor) 
  if (bgcolor ~= nil) then 
    bgcolor = Colors.black;
  end;
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.height;
  while (_g1 < _g2) do _hx_do_first_1 = false;
    
    _g1 = _g1 + 1;
    local x = _g1 - 1;
    local _g1 = _hx_tab_array({}, 0);
    local _g2 = 0;
    local _g3 = self.width;
    while (_g2 < _g3) do _hx_do_first_2 = false;
      
      _g2 = _g2 + 1;
      local y = _g2 - 1;
      _g1:push(RenderCommand.new(" ", "Renderer"));
    end;
    _g:push(_g1);
  end;
  self.matrix = _g;
end
Buffer.prototype.addPRC = function(self,rc) 
  if (((self.matrix.length > Std.int(rc.y)) and (rc.y >= 0)) and (rc.x >= 0)) then 
    if (self.matrix[Std.int(rc.y)].length > Std.int(rc.x)) then 
      self.matrix[Std.int(rc.y)][Std.int(rc.x)] = rc;
    end;
  end;
end
Buffer.prototype.draw = function(self,term) 
  term:setCursorBlink(false);
  local _g_current = 0;
  local _g_array = self.matrix;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    local _g_value = _g_array[_g_current];
    _g_current = _g_current + 1;
    local _g_key = _g_current - 1;
    local index = _g_key;
    local array = _g_value;
    local t = "";
    local fg = "";
    local bg = "";
    local _g = 0;
    while (_g < array.length) do _hx_do_first_2 = false;
      
      local command = array[_g];
      _g = _g + 1;
      t = Std.string(t) .. Std.string(command.char);
      fg = Std.string(fg) .. Std.string(command.fgColor.blit);
      bg = Std.string(bg) .. Std.string(command.bgColor.blit);
    end;
    term:setCursorPos(1, index + 1);
    term:blit(t, fg, bg);
  end;
end
Buffer.prototype.blitBuffer = function(self,buffer,ox,oy) 
  local _g_current = 0;
  local _g_array = buffer.matrix;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    local _g_value = _g_array[_g_current];
    _g_current = _g_current + 1;
    local _g_key = _g_current - 1;
    local iy = _g_key;
    local line = _g_value;
    local _g_current = 0;
    local _g_array = line;
    while (_g_current < _g_array.length) do _hx_do_first_2 = false;
      
      local _g_value = _g_array[_g_current];
      _g_current = _g_current + 1;
      local _g_key = _g_current - 1;
      local ix = _g_key;
      local command = _g_value;
      local fixedX = ix + ox;
      local fixedY = iy + oy;
      if ((((self.matrix.length > fixedY) and (self.matrix[Std.int(fixedY)].length > fixedX)) and (fixedY >= 0)) and (fixedX >= 0)) then 
        self.matrix[Std.int(fixedY)][Std.int(fixedX)] = command;
      end;
    end;
  end;
end

Buffer.prototype.__class__ =  Buffer

Renderer.new = function(terminal) 
  local self = _hx_new(Renderer.prototype)
  Renderer.super(self,terminal)
  return self
end
Renderer.super = function(self,terminal) 
  self.currentBuffer = false;
  self.buffer1 = Buffer.new(0, 0);
  self.term = terminal;
end
_hx_exports["Renderer"] = Renderer
Renderer.__name__ = true
Renderer.prototype = _hx_e();
Renderer.prototype.buffer1= nil;
Renderer.prototype.currentBuffer= nil;
Renderer.prototype.term= nil;
Renderer.prototype.renderToBuffer = function(self,scr,ox,oy,buffer) 
  scr.width = buffer.width;
  scr.height = buffer.height;
  scr.x = 0;
  scr.xa = 0;
  scr.y = 0;
  scr.ya = 0;
  scr.parent = nil;
  local _g = 0;
  local _g1 = scr:getPRenderCommands(buffer.width, buffer.height, false);
  while (_g < _g1.length) do _hx_do_first_1 = false;
    
    local rc = _g1[_g];
    _g = _g + 1;
    local rc1 = rc;
    rc1.x = rc1.x + ox;
    local rc1 = rc;
    rc1.y = rc1.y + oy;
    buffer:addPRC(rc);
  end;
end
Renderer.prototype.render = function(self,scr) 
  self.buffer1:reinitBuffer();
  self:renderToBuffer(scr, 0, 0, self.buffer1);
  self.buffer1:draw(self.term);
end
Renderer.prototype.resize = function(self,x,y) 
  self.buffer1.width = Std.int(x + 1);
  self.buffer1.height = Std.int(y + 1);
  self.buffer1:reinitBuffer();
end

Renderer.prototype.__class__ =  Renderer

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_e();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do _hx_do_first_1 = false;
    
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  local str = Std.string(s);
  _G.table.insert(buf_b, str);
  buf_length = buf_length + #str;
  do return _G.table.concat(buf_b) end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do _hx_do_first_1 = false;
    
    local _g = 0;
    local _g1 = Reflect.fields(p);
    while (_g < _g1.length) do _hx_do_first_2 = false;
      
      local f = _g1[_g];
      _g = _g + 1;
      if (not Lambda.has(a, f)) then 
        a:push(f);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

Runner.new = function(term,root,peripheralName) 
  local self = _hx_new(Runner.prototype)
  Runner.super(self,term,root,peripheralName)
  return self
end
Runner.super = function(self,term,root,peripheralName) 
  self.cs = Vector2f.new(0, 0);
  self.renderer = Renderer.new(nil);
  self.peripheralName = nil;
  self.root = ScreenManager.new(nil);
  self.term = nil;
  self.root.term = term;
  self.root:addScreen(root);
  self.term = term;
  self.peripheralName = peripheralName;
  self.renderer.term = self.term;
  Runner.log("Created runner", _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="src/UI.hx",lineNumber=60,className="Runner",methodName="new"}));
end
_hx_exports["Runner"] = Runner
Runner.__name__ = true
Runner.log = function(t,posInfos) 
  local _hx_status, _hx_result = pcall(function() 
  
      peripheral.wrap("back").transmit(630, 630, t);
    return _hx_pcall_default
  end)
  if not _hx_status and _hx_result == "_hx_pcall_break" then
  elseif not _hx_status then 
    local _g = _hx_result;
    
            local fear, err = fs.open("log.txt", "a")
            if fear then fear.write(t .. "\n") fear.close() end
            ;
  elseif _hx_result ~= _hx_pcall_default then
    return _hx_result
  end;
end
Runner.prototype = _hx_e();
Runner.prototype.term= nil;
Runner.prototype.root= nil;
Runner.prototype.peripheralName= nil;
Runner.prototype.renderer= nil;
Runner.prototype.cs= nil;
Runner.prototype.run = function(self) 
  self.renderer:resize(self.term:getSize().x - 1, self.term:getSize().y - 1);
  self.renderer:render(self.root:current());
  while (true) do _hx_do_first_1 = false;
    
    local length = nil;
    local tab = __lua_PairTools.copy(_hx_table.pack(CCOS.pullEvent()));
    local length = length;
    local ev;
    if (length == nil) then 
      length = _hx_table.maxn(tab);
      if (length > 0) then 
        local head = tab[1];
        _G.table.remove(tab, 1);
        tab[0] = head;
        ev = _hx_tab_array(tab, length);
      else
        ev = _hx_tab_array({}, 0);
      end;
    else
      ev = _hx_tab_array(tab, length);
    end;
    self:event(ev);
  end;
end
Runner.prototype.render = function(self) 
  self.renderer:render(self.root:current());
  self.root:current():onRender();
end
Runner.prototype.event = function(self,ev) 
  if ((self.peripheralName ~= nil) and (ev[0] == "monitor_resize")) then 
    self.renderer:resize(self.term:getSize().x - 1, self.term:getSize().y - 1);
    self:render();
  end;
  if ((self.peripheralName == nil) and (ev[0] == "term_resize")) then 
    self.renderer:resize(self.term:getSize().x - 1, self.term:getSize().y - 1);
    self:render();
  end;
  if (((self.peripheralName ~= nil) and (ev[0] == "monitor_touch")) and (ev[1] == self.peripheralName)) then 
    self.root:current():onClick(Vector2f.new(ev[2], ev[3]), MouseButton.LEFT, true);
    self.root:current():onClickUp(Vector2f.new(ev[2], ev[3]), Vector2f.new(ev[2], ev[3]), MouseButton.LEFT, true);
  end;
  if (self.peripheralName == nil) then 
    local _g = ev[0];
    if (_g) == "mouse_click" then 
      self.cs = Vector2f.new(ev[2], ev[3]);
      self.root:current():onClick(self.cs, ev[1], true);
    elseif (_g) == "mouse_drag" then 
      self.root:current():onDrag(self.cs, Vector2f.new(ev[2], ev[3]), ev[1], true);
    elseif (_g) == "mouse_scroll" then 
      self.root:current():onScroll(Vector2f.new(ev[2], ev[3]), ev[1], true);
    elseif (_g) == "mouse_up" then 
      self.root:current():onClickUp(self.cs, Vector2f.new(ev[2], ev[3]), ev[1], true); end;
  end;
  self.root:current():onCustom(ev);
  if (self.root:current().requestsRerender) then 
    self:render();
    self.root:current().requestsRerender = false;
  end;
end

Runner.prototype.__class__ =  Runner

UILoader.new = function(ui) 
  local self = _hx_new(UILoader.prototype)
  UILoader.super(self,ui)
  return self
end
UILoader.super = function(self,ui) 
  self.uiData = __haxe_Json.parse(ui);
end
_hx_exports["UILoader"] = UILoader
UILoader.__name__ = true
UILoader.prototype = _hx_e();
UILoader.prototype.uiData= nil;

UILoader.prototype.__class__ =  UILoader

ScreenManager.new = function(terminal) 
  local self = _hx_new(ScreenManager.prototype)
  ScreenManager.super(self,terminal)
  return self
end
ScreenManager.super = function(self,terminal) 
  self.term = nil;
  self.currentScreen = 0;
  self.screens = _hx_tab_array({}, 0);
  self.term = terminal;
end
_hx_exports["ScreenManager"] = ScreenManager
ScreenManager.__name__ = true
ScreenManager.fromJSON = function(term,json) 
  local obj = __haxe_Json.parse(json);
  local sm = ScreenManager.new(term);
  if (__lua_Boot.__instanceof(obj, Array)) then 
    sm.screens = obj:map(function(e) 
      do return Widget.deserialize(e) end;
    end);
  else
    sm.screens = _hx_tab_array({[0]=Widget.deserialize(obj)}, 1);
  end;
  do return sm end;
end
ScreenManager.prototype = _hx_e();
ScreenManager.prototype.screens= nil;
ScreenManager.prototype.currentScreen= nil;
ScreenManager.prototype.term= nil;
ScreenManager.prototype.addScreen = function(self,scr) 
  scr.x = 0;
  scr.y = 0;
  scr.width = Std.int(self.term:getSize().x);
  scr.height = Std.int(self.term:getSize().y);
  scr.wman = self;
  self.screens:push(scr);
end
ScreenManager.prototype.rmScreen = function(self,scr) 
  self.screens:remove(scr);
end
ScreenManager.prototype.current = function(self) 
  if (self.screens.length <= self.currentScreen) then 
    do return Label.new(1, 1, "No screen created.") end;
  end;
  self.screens[self.currentScreen].x = 0;
  self.screens[self.currentScreen].y = 0;
  self.screens[self.currentScreen].width = Std.int(self.term:getSize().x);
  self.screens[self.currentScreen].height = Std.int(self.term:getSize().y);
  self.screens[self.currentScreen].wman = self;
  do return self.screens[self.currentScreen] end
end
ScreenManager.prototype.toJSON = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self.screens;
  while (_g1 < _g2.length) do _hx_do_first_1 = false;
    
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i:serialize());
  end;
  do return __haxe_Json.stringify(_g) end
end

ScreenManager.prototype.__class__ =  ScreenManager

Vector2f.new = function(x,y) 
  local self = _hx_new(Vector2f.prototype)
  Vector2f.super(self,x,y)
  return self
end
Vector2f.super = function(self,x,y) 
  self.y = 0.0;
  self.x = 0.0;
  self.x = x;
  self.y = y;
end
_hx_exports["Vector2f"] = Vector2f
Vector2f.__name__ = true
Vector2f.add = function(vec1,vec) 
  do return Vector2f.new(vec1.x + vec.x, vec1.y + vec.y) end;
end
Vector2f.prototype = _hx_e();
Vector2f.prototype.x= nil;
Vector2f.prototype.y= nil;
Vector2f.prototype.addInts = function(self,x,y) 
  do return Vector2f.new(self.x + x, self.y + y) end
end

Vector2f.prototype.__class__ =  Vector2f

Style.new = function() 
  local self = _hx_new(Style.prototype)
  Style.super(self)
  return self
end
Style.super = function(self) 
  self.fgColor = Colors.white;
  self.bgColor = Colors.black;
end
_hx_exports["Style"] = Style
Style.__name__ = true
Style.prototype = _hx_e();
Style.prototype.bgColor= nil;
Style.prototype.fgColor= nil;

Style.prototype.__class__ =  Style

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true
__haxe_IMap.prototype = _hx_e();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.keys= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_Exception.new = function(message,previous,native) 
  local self = _hx_new(__haxe_Exception.prototype)
  __haxe_Exception.super(self,message,previous,native)
  return self
end
__haxe_Exception.super = function(self,message,previous,native) 
  self.__skipStack = 0;
  self.__exceptionMessage = message;
  self.__previousException = previous;
  if (native ~= nil) then 
    self.__nativeException = native;
    self.__nativeStack = __haxe_NativeStackTrace.exceptionStack();
  else
    self.__nativeException = self;
    self.__nativeStack = __haxe_NativeStackTrace.callStack();
    self.__skipStack = 1;
  end;
end
__haxe_Exception.__name__ = true
__haxe_Exception.thrown = function(value) 
  if (__lua_Boot.__instanceof(value, __haxe_Exception)) then 
    do return value:get_native() end;
  else
    local e = __haxe_ValueException.new(value);
    e.__skipStack = e.__skipStack + 1;
    do return e end;
  end;
end
__haxe_Exception.prototype = _hx_e();
__haxe_Exception.prototype.__exceptionMessage= nil;
__haxe_Exception.prototype.__nativeStack= nil;
__haxe_Exception.prototype.__skipStack= nil;
__haxe_Exception.prototype.__nativeException= nil;
__haxe_Exception.prototype.__previousException= nil;
__haxe_Exception.prototype.toString = function(self) 
  do return self:get_message() end
end
__haxe_Exception.prototype.get_message = function(self) 
  do return self.__exceptionMessage end
end
__haxe_Exception.prototype.get_native = function(self) 
  do return self.__nativeException end
end

__haxe_Exception.prototype.__class__ =  __haxe_Exception

__haxe_Exception.prototype.__properties__ =  {get_native="get_native",get_message="get_message"}

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.parse = function(text) 
  do return __haxe_format_JsonParser.new(text):doParse() end;
end
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_NativeStackTrace.new = {}
__haxe_NativeStackTrace.__name__ = true
__haxe_NativeStackTrace.saveStack = function(exception) 
end
__haxe_NativeStackTrace.callStack = function() 
  local _g = debug.traceback();
  if (_g == nil) then 
    do return _hx_tab_array({}, 0) end;
  else
    local s = _g;
    do return String.prototype.split(s, "\n"):slice(3) end;
  end;
end
__haxe_NativeStackTrace.exceptionStack = function() 
  do return _hx_tab_array({}, 0) end;
end

__haxe_ValueException.new = function(value,previous,native) 
  local self = _hx_new(__haxe_ValueException.prototype)
  __haxe_ValueException.super(self,value,previous,native)
  return self
end
__haxe_ValueException.super = function(self,value,previous,native) 
  __haxe_Exception.super(self,(function() 
    local _hx_1
    if (value == nil) then 
    _hx_1 = "null"; else 
    _hx_1 = Std.string(value); end
    return _hx_1
  end )(),previous,native);
  self.value = value;
end
__haxe_ValueException.__name__ = true
__haxe_ValueException.prototype = _hx_e();
__haxe_ValueException.prototype.value= nil;

__haxe_ValueException.prototype.__class__ =  __haxe_ValueException
__haxe_ValueException.__super__ = __haxe_Exception
setmetatable(__haxe_ValueException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_ValueException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    do return nil end;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_exceptions_PosException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_PosException.prototype)
  __haxe_exceptions_PosException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_PosException.super = function(self,message,previous,pos) 
  __haxe_Exception.super(self,message,previous);
  if (pos == nil) then 
    self.posInfos = _hx_o({__fields__={fileName=true,lineNumber=true,className=true,methodName=true},fileName="(unknown)",lineNumber=0,className="(unknown)",methodName="(unknown)"});
  else
    self.posInfos = pos;
  end;
end
__haxe_exceptions_PosException.__name__ = true
__haxe_exceptions_PosException.prototype = _hx_e();
__haxe_exceptions_PosException.prototype.posInfos= nil;
__haxe_exceptions_PosException.prototype.toString = function(self) 
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(__haxe_Exception.prototype.toString(self))) .. Std.string(" in ")) .. Std.string(self.posInfos.className)) .. Std.string(".")) .. Std.string(self.posInfos.methodName)) .. Std.string(" at ")) .. Std.string(self.posInfos.fileName)) .. Std.string(":")) .. Std.string(self.posInfos.lineNumber) end
end

__haxe_exceptions_PosException.prototype.__class__ =  __haxe_exceptions_PosException
__haxe_exceptions_PosException.__super__ = __haxe_Exception
setmetatable(__haxe_exceptions_PosException.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_exceptions_PosException.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__haxe_exceptions_NotImplementedException.new = function(message,previous,pos) 
  local self = _hx_new(__haxe_exceptions_NotImplementedException.prototype)
  __haxe_exceptions_NotImplementedException.super(self,message,previous,pos)
  return self
end
__haxe_exceptions_NotImplementedException.super = function(self,message,previous,pos) 
  if (message == nil) then 
    message = "Not implemented";
  end;
  __haxe_exceptions_PosException.super(self,message,previous,pos);
end
__haxe_exceptions_NotImplementedException.__name__ = true
__haxe_exceptions_NotImplementedException.prototype = _hx_e();

__haxe_exceptions_NotImplementedException.prototype.__class__ =  __haxe_exceptions_NotImplementedException
__haxe_exceptions_NotImplementedException.__super__ = __haxe_exceptions_PosException
setmetatable(__haxe_exceptions_NotImplementedException.prototype,{__index=__haxe_exceptions_PosException.prototype})
setmetatable(__haxe_exceptions_NotImplementedException.prototype.__properties__,{__index=__haxe_exceptions_PosException.prototype.__properties__})

__haxe_format_JsonParser.new = function(str) 
  local self = _hx_new(__haxe_format_JsonParser.prototype)
  __haxe_format_JsonParser.super(self,str)
  return self
end
__haxe_format_JsonParser.super = function(self,str) 
  self.str = str;
  self.pos = 0;
end
__haxe_format_JsonParser.__name__ = true
__haxe_format_JsonParser.prototype = _hx_e();
__haxe_format_JsonParser.prototype.str= nil;
__haxe_format_JsonParser.prototype.pos= nil;
__haxe_format_JsonParser.prototype.doParse = function(self) 
  local result = self:parseRec();
  local c;
  while (true) do _hx_do_first_1 = false;
    
    c = self:nextChar();
    if (not (c ~= nil)) then 
      break;
    end;
    local c = c;
    if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then else
    self:invalidChar(); end;
  end;
  do return result end
end
__haxe_format_JsonParser.prototype.parseRec = function(self) 
  while (true) do _hx_do_first_1 = false;
    
    local c = self:nextChar();
    local c1 = c;
    if (c1) == 9 or (c1) == 10 or (c1) == 13 or (c1) == 32 then 
    elseif (c1) == 34 then 
      do return self:parseString() end;
    elseif (c1) == 45 or (c1) == 48 or (c1) == 49 or (c1) == 50 or (c1) == 51 or (c1) == 52 or (c1) == 53 or (c1) == 54 or (c1) == 55 or (c1) == 56 or (c1) == 57 then 
      local c = c;
      local start = self.pos - 1;
      local minus = c == 45;
      local digit = not minus;
      local zero = c == 48;
      local point = false;
      local e = false;
      local pm = false;
      local _end = false;
      local _hx_do_first_2 = true;
      while (not _end) or _hx_do_first_2 do 
        _hx_do_first_2 = false;
        
        c = self:nextChar();
        local c = c;
        if (c) == 43 or (c) == 45 then 
          if (not e or pm) then 
            self:invalidNumber(start);
          end;
          digit = false;
          pm = true;
        elseif (c) == 46 then 
          if ((minus or point) or e) then 
            self:invalidNumber(start);
          end;
          digit = false;
          point = true;
        elseif (c) == 48 then 
          if (zero and not point) then 
            self:invalidNumber(start);
          end;
          if (minus) then 
            minus = false;
            zero = true;
          end;
          digit = true;
        elseif (c) == 49 or (c) == 50 or (c) == 51 or (c) == 52 or (c) == 53 or (c) == 54 or (c) == 55 or (c) == 56 or (c) == 57 then 
          if (zero and not point) then 
            self:invalidNumber(start);
          end;
          if (minus) then 
            minus = false;
          end;
          digit = true;
          zero = false;
        elseif (c) == 69 or (c) == 101 then 
          if ((minus or zero) or e) then 
            self:invalidNumber(start);
          end;
          digit = false;
          e = true;else
        if (not digit) then 
          self:invalidNumber(start);
        end;
        self.pos = self.pos - 1;
        _end = true; end;
      end;
      local f = Std.parseFloat(String.prototype.substr(self.str, start, self.pos - start));
      local i = Std.int(f);
      if (i == f) then 
        do return i end;
      else
        do return f end;
      end;
    elseif (c1) == 91 then 
      local arr = _hx_tab_array({}, 0);
      local comma = nil;
      while (true) do _hx_do_first_2 = false;
        
        local c = self:nextChar();
        local c = c;
        if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then 
        elseif (c) == 44 then 
          if (comma) then 
            comma = false;
          else
            self:invalidChar();
          end;
        elseif (c) == 93 then 
          if (comma == false) then 
            self:invalidChar();
          end;
          do return arr end;else
        if (comma) then 
          self:invalidChar();
        end;
        self.pos = self.pos - 1;
        arr:push(self:parseRec());
        comma = true; end;
      end;
    elseif (c1) == 102 then 
      local save = self.pos;
      if ((((self:nextChar() ~= 97) or (self:nextChar() ~= 108)) or (self:nextChar() ~= 115)) or (self:nextChar() ~= 101)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return false end;
    elseif (c1) == 110 then 
      local save = self.pos;
      if (((self:nextChar() ~= 117) or (self:nextChar() ~= 108)) or (self:nextChar() ~= 108)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return nil end;
    elseif (c1) == 116 then 
      local save = self.pos;
      if (((self:nextChar() ~= 114) or (self:nextChar() ~= 117)) or (self:nextChar() ~= 101)) then 
        self.pos = save;
        self:invalidChar();
      end;
      do return true end;
    elseif (c1) == 123 then 
      local obj = _hx_e();
      local field = nil;
      local comma = nil;
      while (true) do _hx_do_first_2 = false;
        
        local c = self:nextChar();
        local c = c;
        if (c) == 9 or (c) == 10 or (c) == 13 or (c) == 32 then 
        elseif (c) == 34 then 
          if ((field ~= nil) or comma) then 
            self:invalidChar();
          end;
          field = self:parseString();
        elseif (c) == 44 then 
          if (comma) then 
            comma = false;
          else
            self:invalidChar();
          end;
        elseif (c) == 58 then 
          if (field == nil) then 
            self:invalidChar();
          end;
          obj[field] = self:parseRec();
          field = nil;
          comma = true;
        elseif (c) == 125 then 
          if ((field ~= nil) or (comma == false)) then 
            self:invalidChar();
          end;
          do return obj end;else
        self:invalidChar(); end;
      end;else
    self:invalidChar(); end;
  end;
end
__haxe_format_JsonParser.prototype.parseString = function(self) 
  local start = self.pos;
  local buf = nil;
  local prev = -1;
  while (true) do _hx_do_first_1 = false;
    
    local c = self:nextChar();
    if (c == 34) then 
      break;
    end;
    if (c == 92) then 
      if (buf == nil) then 
        buf = StringBuf.new();
      end;
      local s = self.str;
      local len = (self.pos - start) - 1;
      local part = (function() 
        local _hx_1
        if (len == nil) then 
        _hx_1 = String.prototype.substr(s, start); else 
        _hx_1 = String.prototype.substr(s, start, len); end
        return _hx_1
      end )();
      _G.table.insert(buf.b, part);
      local buf1 = buf;
      buf1.length = buf1.length + #part;
      c = self:nextChar();
      local c1 = c;
      if (c1) == 34 or (c1) == 47 or (c1) == 92 then 
        _G.table.insert(buf.b, _G.string.char(c));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 98 then 
        _G.table.insert(buf.b, _G.string.char(8));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 102 then 
        _G.table.insert(buf.b, _G.string.char(12));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 110 then 
        _G.table.insert(buf.b, _G.string.char(10));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 114 then 
        _G.table.insert(buf.b, _G.string.char(13));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 116 then 
        _G.table.insert(buf.b, _G.string.char(9));
        local buf = buf;
        buf.length = buf.length + 1;
      elseif (c1) == 117 then 
        local uc = Std.parseInt(Std.string("0x") .. Std.string(String.prototype.substr(self.str, self.pos, 4)));
        local tmp = self;
        tmp.pos = tmp.pos + 4;
        if (prev ~= -1) then 
          if ((uc < 56320) or (uc > 57343)) then 
            _G.table.insert(buf.b, _G.string.char(65533));
            local buf = buf;
            buf.length = buf.length + 1;
            prev = -1;
          else
            _G.table.insert(buf.b, _G.string.char(((_hx_bit.lshift(prev - 55296,10)) + (uc - 56320)) + 65536));
            local buf = buf;
            buf.length = buf.length + 1;
            prev = -1;
          end;
        else
          if ((uc >= 55296) and (uc <= 56319)) then 
            prev = uc;
          else
            _G.table.insert(buf.b, _G.string.char(uc));
            local buf = buf;
            buf.length = buf.length + 1;
          end;
        end;else
      _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid escape sequence \\") .. Std.string(_G.string.char(c))) .. Std.string(" at position ")) .. Std.string((self.pos - 1))),0); end;
      start = self.pos;
    else
      if (c >= 128) then 
        self.pos = self.pos + 1;
        if (c >= 252) then 
          local tmp = self;
          tmp.pos = tmp.pos + 4;
        else
          if (c >= 248) then 
            local tmp = self;
            tmp.pos = tmp.pos + 3;
          else
            if (c >= 240) then 
              local tmp = self;
              tmp.pos = tmp.pos + 2;
            else
              if (c >= 224) then 
                self.pos = self.pos + 1;
              end;
            end;
          end;
        end;
      else
        if (c == nil) then 
          _G.error(__haxe_Exception.thrown("Unclosed string"),0);
        end;
      end;
    end;
  end;
  if (buf == nil) then 
    do return String.prototype.substr(self.str, start, (self.pos - start) - 1) end;
  else
    local s = self.str;
    local len = (self.pos - start) - 1;
    local part = (function() 
      local _hx_2
      if (len == nil) then 
      _hx_2 = String.prototype.substr(s, start); else 
      _hx_2 = String.prototype.substr(s, start, len); end
      return _hx_2
    end )();
    _G.table.insert(buf.b, part);
    local buf1 = buf;
    buf1.length = buf1.length + #part;
    do return _G.table.concat(buf.b) end;
  end;
end
__haxe_format_JsonParser.prototype.nextChar = function(self) 
  self.pos = self.pos + 1;
  do return _G.string.byte(self.str, self.pos) end
end
__haxe_format_JsonParser.prototype.invalidChar = function(self) 
  self.pos = self.pos - 1;
  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid char ") .. Std.string(_G.string.byte(self.str, self.pos))) .. Std.string(" at position ")) .. Std.string(self.pos)),0);
end
__haxe_format_JsonParser.prototype.invalidNumber = function(self,start) 
  _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Invalid number at position ") .. Std.string(start)) .. Std.string(": ")) .. Std.string(String.prototype.substr(self.str, start, self.pos - start))),0);
end

__haxe_format_JsonParser.prototype.__class__ =  __haxe_format_JsonParser

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = replacer;
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
__haxe_format_JsonPrinter.__name__ = true
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_e();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self.replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    local str = "null";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 1 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 2 then 
    local v = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 3 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this = self.buf;
    local str = "\"<fun>\"";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 6 then 
    local c = _g[2];
    if (c == String) then 
      self:quote(v);
    else
      if (c == Array) then 
        local v = v;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(91));
        local _this = _this;
        _this.length = _this.length + 1;
        local len = v.length;
        local last = len - 1;
        local _g = 0;
        local _g1 = len;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (i > 0) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(44));
            local _this = _this;
            _this.length = _this.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(10));
            local _this = _this;
            _this.length = _this.length + 1;
          end;
          if (self.pretty) then 
            local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this = self.buf;
            local str = Std.string(v);
            _G.table.insert(_this.b, str);
            local _this = _this;
            _this.length = _this.length + #str;
          end;
          self:write(i, v[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this = self.buf;
              _G.table.insert(_this.b, _G.string.char(10));
              local _this = _this;
              _this.length = _this.length + 1;
            end;
            if (self.pretty) then 
              local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this = self.buf;
              local str = Std.string(v);
              _G.table.insert(_this.b, str);
              local _this = _this;
              _this.length = _this.length + #str;
            end;
          end;
        end;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(93));
        local _this = _this;
        _this.length = _this.length + 1;
      else
        if (c == __haxe_ds_StringMap) then 
          local v = v;
          local o = _hx_e();
          local k = v:keys();
          while (k:hasNext()) do _hx_do_first_1 = false;
            
            local k = k:next();
            local ret = v.h[k];
            o[k] = (function() 
              local _hx_2
              if (ret == __haxe_ds_StringMap.tnull) then 
              _hx_2 = nil; else 
              _hx_2 = ret; end
              return _hx_2
            end )();
          end;
          local v = o;
          self:fieldsString(v, Reflect.fields(v));
        else
          if (c == Date) then 
            local v = v;
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local _g = _g[2];
    local i = v[1];
    local v = Std.string(i);
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str;
  elseif (tmp) == 8 then 
    local _this = self.buf;
    local str = "\"???\"";
    _G.table.insert(_this.b, str);
    local _this = _this;
    _this.length = _this.length + #str; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  local _this = _this;
  _this.length = _this.length + 1;
  local len = fields.length;
  local empty = true;
  local _g = 0;
  local _g1 = len;
  local _hx_continue_1 = false;
  while (_g < _g1) do _hx_do_first_1 = false;
    repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (empty) then 
      self.nind = self.nind + 1;
      empty = false;
    else
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(44));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
    self:quote(f);
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(58));
    local _this = _this;
    _this.length = _this.length + 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(32));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    self:write(f, value);until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  if (not empty) then 
    self.nind = self.nind - 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      local _this = _this;
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(125));
  local _this = _this;
  _this.length = _this.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  local _this = _this;
  _this.length = _this.length + 1;
  local i = 0;
  local length = #s;
  while (i < length) do _hx_do_first_1 = false;
    
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    local c1 = c;
    if (c1) == 8 then 
      local _this = self.buf;
      local str = "\\b";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 9 then 
      local _this = self.buf;
      local str = "\\t";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 10 then 
      local _this = self.buf;
      local str = "\\n";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 12 then 
      local _this = self.buf;
      local str = "\\f";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 13 then 
      local _this = self.buf;
      local str = "\\r";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 34 then 
      local _this = self.buf;
      local str = "\\\"";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;
    elseif (c1) == 92 then 
      local _this = self.buf;
      local str = "\\\\";
      _G.table.insert(_this.b, str);
      local _this = _this;
      _this.length = _this.length + #str;else
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(c));
    local _this = _this;
    _this.length = _this.length + 1; end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  local _this = _this;
  _this.length = _this.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.array= nil;
__haxe_iterators_ArrayIterator.prototype.current= nil;
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.current= nil;
__haxe_iterators_ArrayKeyValueIterator.prototype.array= nil;
__haxe_iterators_ArrayKeyValueIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayKeyValueIterator.prototype.next = function(self) 
  do return _hx_o({__fields__={value=true,key=true},value=self.array[self.current],key=(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()}) end
end

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__haxe_macro_Error.new = function(message,pos,previous) 
  local self = _hx_new(__haxe_macro_Error.prototype)
  __haxe_macro_Error.super(self,message,pos,previous)
  return self
end
__haxe_macro_Error.super = function(self,message,pos,previous) 
  __haxe_Exception.super(self,message,previous);
  self.pos = pos;
end
__haxe_macro_Error.__name__ = true
__haxe_macro_Error.prototype = _hx_e();
__haxe_macro_Error.prototype.pos= nil;

__haxe_macro_Error.prototype.__class__ =  __haxe_macro_Error
__haxe_macro_Error.__super__ = __haxe_Exception
setmetatable(__haxe_macro_Error.prototype,{__index=__haxe_Exception.prototype})
setmetatable(__haxe_macro_Error.prototype.__properties__,{__index=__haxe_Exception.prototype.__properties__})

__hxease_IEasing.new = {}
__hxease_IEasing.__name__ = true
__hxease_IEasing.prototype = _hx_e();
__hxease_IEasing.prototype.calculate= nil;

__hxease_IEasing.prototype.__class__ =  __hxease_IEasing

__hxease_BackEaseIn.new = function(overshoot) 
  local self = _hx_new(__hxease_BackEaseIn.prototype)
  __hxease_BackEaseIn.super(self,overshoot)
  return self
end
__hxease_BackEaseIn.super = function(self,overshoot) 
  self.overshoot = overshoot;
end
__hxease_BackEaseIn.__name__ = true
__hxease_BackEaseIn.__interfaces__ = {__hxease_IEasing}
__hxease_BackEaseIn.prototype = _hx_e();
__hxease_BackEaseIn.prototype.overshoot= nil;
__hxease_BackEaseIn.prototype.calculate = function(self,ratio) 
  if (ratio == 1) then 
    do return 1 end;
  end;
  do return (ratio * ratio) * (((self.overshoot + 1.0) * ratio) - self.overshoot) end
end

__hxease_BackEaseIn.prototype.__class__ =  __hxease_BackEaseIn

__hxease_BackEaseInOut.new = function(overshoot) 
  local self = _hx_new(__hxease_BackEaseInOut.prototype)
  __hxease_BackEaseInOut.super(self,overshoot)
  return self
end
__hxease_BackEaseInOut.super = function(self,overshoot) 
  self.overshoot = overshoot;
end
__hxease_BackEaseInOut.__name__ = true
__hxease_BackEaseInOut.__interfaces__ = {__hxease_IEasing}
__hxease_BackEaseInOut.prototype = _hx_e();
__hxease_BackEaseInOut.prototype.overshoot= nil;
__hxease_BackEaseInOut.prototype.calculate = function(self,ratio) 
  local over = self.overshoot;
  ratio = ratio * 2;
  if (ratio < 1) then 
    over = over * 1.525;
    do return 0.5 * ((ratio * ratio) * (((over + 1) * ratio) - over)) end;
  end;
  ratio = ratio - 2;
  over = over * 1.525;
  do return 0.5 * (((ratio * ratio) * (((over + 1) * ratio) + over)) + 2) end
end

__hxease_BackEaseInOut.prototype.__class__ =  __hxease_BackEaseInOut

__hxease_BackEaseOut.new = function(overshoot) 
  local self = _hx_new(__hxease_BackEaseOut.prototype)
  __hxease_BackEaseOut.super(self,overshoot)
  return self
end
__hxease_BackEaseOut.super = function(self,overshoot) 
  self.overshoot = overshoot;
end
__hxease_BackEaseOut.__name__ = true
__hxease_BackEaseOut.__interfaces__ = {__hxease_IEasing}
__hxease_BackEaseOut.prototype = _hx_e();
__hxease_BackEaseOut.prototype.overshoot= nil;
__hxease_BackEaseOut.prototype.calculate = function(self,ratio) 
  if (ratio == 0) then 
    do return 0 end;
  end;
  ratio = ratio - 1;
  do return ((ratio * ratio) * (((self.overshoot + 1) * ratio) + self.overshoot)) + 1 end
end

__hxease_BackEaseOut.prototype.__class__ =  __hxease_BackEaseOut

__hxease_Back.new = {}
__hxease_Back.__name__ = true

__hxease_LinearEaseNone.new = function() 
  local self = _hx_new(__hxease_LinearEaseNone.prototype)
  __hxease_LinearEaseNone.super(self)
  return self
end
__hxease_LinearEaseNone.super = function(self) 
end
__hxease_LinearEaseNone.__name__ = true
__hxease_LinearEaseNone.__interfaces__ = {__hxease_IEasing}
__hxease_LinearEaseNone.prototype = _hx_e();
__hxease_LinearEaseNone.prototype.calculate = function(self,ratio) 
  do return ratio end
end

__hxease_LinearEaseNone.prototype.__class__ =  __hxease_LinearEaseNone

__hxease_LinearEaseStep.new = function() 
  local self = _hx_new(__hxease_LinearEaseStep.prototype)
  __hxease_LinearEaseStep.super(self)
  return self
end
__hxease_LinearEaseStep.super = function(self) 
end
__hxease_LinearEaseStep.__name__ = true
__hxease_LinearEaseStep.__interfaces__ = {__hxease_IEasing}
__hxease_LinearEaseStep.prototype = _hx_e();
__hxease_LinearEaseStep.prototype.calculate = function(self,ratio) 
  if (ratio < 1) then 
    do return 0 end;
  else
    do return 1 end;
  end;
end

__hxease_LinearEaseStep.prototype.__class__ =  __hxease_LinearEaseStep

__hxease_Linear.new = {}
__hxease_Linear.__name__ = true

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.__cast = function(o,t) 
  if ((o == nil) or __lua_Boot.__instanceof(o, t)) then 
    do return o end;
  else
    _G.error(__haxe_Exception.thrown(Std.string(Std.string(Std.string("Cannot cast ") .. Std.string(Std.string(o))) .. Std.string(" to ")) .. Std.string(Std.string(t))),0);
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  if ((cl1 == nil) or (cl2 == nil)) then 
    do return false end;
  else
    if (cl1 == cl2) then 
      do return true end;
    else
      if (cl1.__interfaces__ ~= nil) then 
        local intf = cl1.__interfaces__;
        local _g = 1;
        local _g1 = _hx_table.maxn(intf) + 1;
        while (_g < _g1) do _hx_do_first_1 = false;
          
          _g = _g + 1;
          local i = _g - 1;
          if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
            do return true end;
          end;
        end;
      end;
    end;
  end;
  do return __lua_Boot.extendsOrImplements(cl1.__super__, cl2) end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_Thread.new = {}
__lua_Thread.__name__ = true

__typedefs_Terminal.new = function() 
  local self = _hx_new(__typedefs_Terminal.prototype)
  __typedefs_Terminal.super(self)
  return self
end
__typedefs_Terminal.super = function(self) 
  self.size = Vector2f.new(51, 19);
end
_hx_exports["typedefs"]["Terminal"] = __typedefs_Terminal
__typedefs_Terminal.__name__ = true
__typedefs_Terminal.prototype = _hx_e();
__typedefs_Terminal.prototype.write= nil;
__typedefs_Terminal.prototype.clear= nil;
__typedefs_Terminal.prototype.setCursorPos= nil;
__typedefs_Terminal.prototype.getSize= nil;
__typedefs_Terminal.prototype.setPaletteColor= nil;
__typedefs_Terminal.prototype.blit= nil;
__typedefs_Terminal.prototype.setCursorBlink= nil;
__typedefs_Terminal.prototype.size= nil;

__typedefs_Terminal.prototype.__class__ =  __typedefs_Terminal

__typedefs_Simpleterminal.new = function(pf) 
  local self = _hx_new(__typedefs_Simpleterminal.prototype)
  __typedefs_Simpleterminal.super(self,pf)
  return self
end
__typedefs_Simpleterminal.super = function(self,pf) 
  self.apalette = _hx_tab_array({[0]=RGBColor.new(236, 239, 244), RGBColor.new(0, 0, 0), RGBColor.new(180, 142, 173), RGBColor.new(0, 0, 0), RGBColor.new(235, 203, 139), RGBColor.new(163, 190, 140), RGBColor.new(0, 0, 0), RGBColor.new(76, 86, 106), RGBColor.new(216, 222, 233), RGBColor.new(136, 192, 208), RGBColor.new(0, 0, 0), RGBColor.new(129, 161, 193), RGBColor.new(0, 0, 0), RGBColor.new(163, 190, 140), RGBColor.new(191, 97, 106), RGBColor.new(59, 66, 82)}, 16);
  __typedefs_Terminal.super(self);
  self.printFunction = pf;
  self.apalette = __typedefs_Simpleterminal.apalettea;
end
_hx_exports["typedefs"]["Simpleterminal"] = __typedefs_Simpleterminal
__typedefs_Simpleterminal.__name__ = true
__typedefs_Simpleterminal.prototype = _hx_e();
__typedefs_Simpleterminal.prototype.apalette= nil;
__typedefs_Simpleterminal.prototype.get_palette = function(self) 
  do return self.apalette end
end
__typedefs_Simpleterminal.prototype.printFunction= nil;
__typedefs_Simpleterminal.prototype.write = function(self,s) 
  self.printFunction(s);
end
__typedefs_Simpleterminal.prototype.clear = function(self) 
  self.printFunction("\027[2J");
end
__typedefs_Simpleterminal.prototype.setTextColor = function(self,col) 
  self.printFunction(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("\027[38;2;") .. Std.string(self.apalette[col.palNumber].red)) .. Std.string(";")) .. Std.string(self.apalette[col.palNumber].green)) .. Std.string(";")) .. Std.string(self.apalette[col.palNumber].blue)) .. Std.string("m"));
end
__typedefs_Simpleterminal.prototype.setBackgroundColor = function(self,col) 
  self.printFunction(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("\027[48;2;") .. Std.string(self.apalette[col.palNumber].red)) .. Std.string(";")) .. Std.string(self.apalette[col.palNumber].green)) .. Std.string(";")) .. Std.string(self.apalette[col.palNumber].blue)) .. Std.string("m"));
end
__typedefs_Simpleterminal.prototype.setCursorPos = function(self,x,y) 
  self.printFunction(Std.string(Std.string(Std.string(Std.string("\027[") .. Std.string(y)) .. Std.string(";")) .. Std.string(x)) .. Std.string("H"));
end
__typedefs_Simpleterminal.prototype.set_palette = function(self,newc) 
  local i = 0;
  local _g = 0;
  while (_g < newc.length) do _hx_do_first_1 = false;
    
    local color = newc[_g];
    _g = _g + 1;
    i = i + 1;
    self.apalette[i - 1] = color;
  end;
  do return self.apalette end
end
__typedefs_Simpleterminal.prototype.setPaletteColor = function(self,paln,r,g,b) 
  local apaln = Std.int(_G.math.log(paln));
  self.apalette[apaln] = RGBColor.new(Std.int(r), Std.int(g), Std.int(b));
end
__typedefs_Simpleterminal.prototype.getSize = function(self) 
  do return self.size end
end
__typedefs_Simpleterminal.prototype.blit = function(self,a,b,c) 
  local _g = 0;
  local _g1 = #a;
  while (_g < _g1) do _hx_do_first_1 = false;
    
    _g = _g + 1;
    local i = _g - 1;
    local c = _G.string.sub(a, i + 1, i + 1);
    local fg = Colors.fromBlit(_G.string.sub(b, i + 1, i + 1));
    local bg = Colors.fromBlit(_G.string.sub(c, i + 1, i + 1));
    self:setTextColor(fg);
    self:setBackgroundColor(bg);
    self:write(c);
  end;
end
__typedefs_Simpleterminal.prototype.setCursorBlink = function(self,b) 
end

__typedefs_Simpleterminal.prototype.__class__ =  __typedefs_Simpleterminal

__typedefs_Simpleterminal.prototype.__properties__ =  {set_palette="set_palette",get_palette="get_palette"}
__typedefs_Simpleterminal.__super__ = __typedefs_Terminal
setmetatable(__typedefs_Simpleterminal.prototype,{__index=__typedefs_Terminal.prototype})

__typedefs_CCTerminal.new = function(term) 
  local self = _hx_new(__typedefs_CCTerminal.prototype)
  __typedefs_CCTerminal.super(self,term)
  return self
end
__typedefs_CCTerminal.super = function(self,term) 
  __typedefs_Terminal.super(self);
  self.termxe = term;
  local _g_current = 0;
  local _g_array = __typedefs_Simpleterminal.apalettea;
  while (_g_current < _g_array.length) do _hx_do_first_1 = false;
    
    local _g_value = _g_array[_g_current];
    _g_current = _g_current + 1;
    local _g_key = _g_current - 1;
    local i = _g_key;
    local v = _g_value;
    self:setPaletteColor(Std.int(_G.math.pow(2, i)), v.red / 255, v.green / 255, v.blue / 255);
  end;
end
_hx_exports["typedefs"]["CCTerminal"] = __typedefs_CCTerminal
__typedefs_CCTerminal.__name__ = true
__typedefs_CCTerminal.prototype = _hx_e();
__typedefs_CCTerminal.prototype.termxe= nil;
__typedefs_CCTerminal.prototype.write = function(self,s) 
  self.termxe.write(s);
end
__typedefs_CCTerminal.prototype.clear = function(self) 
  self.termxe.clear();
end
__typedefs_CCTerminal.prototype.setCursorPos = function(self,x,y) 
  self.termxe.setCursorPos(x, y);
end
__typedefs_CCTerminal.prototype.getSize = function(self) 
  local _hx_1_s_x, _hx_1_s_y = self.termxe.getSize();
  do return Vector2f.new(_hx_1_s_x, _hx_1_s_y) end
end
__typedefs_CCTerminal.prototype.setPaletteColor = function(self,paln,r,g,b) 
  self.termxe.setPaletteColor(paln, r, g, b);
end
__typedefs_CCTerminal.prototype.blit = function(self,text,fgColors,bgColors) 
  self.termxe.blit(text, fgColors, bgColors);
end
__typedefs_CCTerminal.prototype.setCursorBlink = function(self,b) 
  self.termxe.setCursorBlink(b);
end

__typedefs_CCTerminal.prototype.__class__ =  __typedefs_CCTerminal
__typedefs_CCTerminal.__super__ = __typedefs_Terminal
setmetatable(__typedefs_CCTerminal.prototype,{__index=__typedefs_Terminal.prototype})
local hasBit32, bit32 = pcall(require, 'bit32')
if hasBit32 then --if we are on Lua 5.1, bit32 will be the default.
  _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
  -- lua 5.2 weirdness
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end
else
  --If we do not have bit32, fallback to 'bit'
  local hasBit, bit = pcall(require, 'bit')
  if not hasBit then
    error("Failed to load bit or bit32")
  end
  _hx_bit_raw = bit
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw })
end

-- see https://github.com/HaxeFoundation/haxe/issues/8849
_hx_bit.bor = function(...) return _hx_bit_clamp(_hx_bit_raw.bor(...)) end
_hx_bit.band = function(...) return _hx_bit_clamp(_hx_bit_raw.band(...)) end
_hx_bit.arshift = function(...) return _hx_bit_clamp(_hx_bit_raw.arshift(...)) end

if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

if package.loaded.luv then
  _hx_luv = _G.require("luv");
else
  _hx_luv = {
    run=function(mode) return false end,
    loop_alive=function() return false end
  }
end
local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;Colors.white = Color.new("0", 0, 1);
  
  Colors.orange = Color.new("1", 1, 2);
  
  Colors.magenta = Color.new("2", 2, 4);
  
  Colors.lightBlue = Color.new("3", 3, 8);
  
  Colors.yellow = Color.new("4", 4, 16);
  
  Colors.lime = Color.new("5", 5, 32);
  
  Colors.pink = Color.new("6", 6, 64);
  
  Colors.gray = Color.new("7", 7, 128);
  
  Colors.lightGray = Color.new("8", 8, 256);
  
  Colors.cyan = Color.new("9", 9, 512);
  
  Colors.purple = Color.new("a", 10, 1024);
  
  Colors.blue = Color.new("b", 11, 2048);
  
  Colors.brown = Color.new("c", 12, 4096);
  
  Colors.green = Color.new("d", 13, 8192);
  
  Colors.red = Color.new("e", 14, 16384);
  
  Colors.black = Color.new("f", 15, 32768);
  
  Values.typenames = (function() 
    local _hx_1
    
    local _g = __haxe_ds_StringMap.new();
    
    local value = function() 
      local o = Label.new(0, 0, "");
      do return o end;
    end;
    if (value == nil) then 
      _g.h.Label = __haxe_ds_StringMap.tnull;
    else
      _g.h.Label = value;
    end;
    
    local value = function() 
      do return SimpleContainer.new(_hx_tab_array({}, 0)) end;
    end;
    if (value == nil) then 
      _g.h.Container = __haxe_ds_StringMap.tnull;
    else
      _g.h.Container = value;
    end;
    
    local value = function() 
      do return Button.new(_hx_tab_array({}, 0), Command.new()) end;
    end;
    if (value == nil) then 
      _g.h.Button = __haxe_ds_StringMap.tnull;
    else
      _g.h.Button = value;
    end;
    
    local value = function() 
      do return TextArea.new(0, 0, "") end;
    end;
    if (value == nil) then 
      _g.h.TextArea = __haxe_ds_StringMap.tnull;
    else
      _g.h.TextArea = value;
    end;
    
    local value = function() 
      do return ScrollContainer.new(_hx_tab_array({}, 0)) end;
    end;
    if (value == nil) then 
      _g.h.ScrollContainer = __haxe_ds_StringMap.tnull;
    else
      _g.h.ScrollContainer = value;
    end;
    
    _hx_1 = _g;
    return _hx_1
  end )();
  
  __haxe_ds_StringMap.tnull = ({});
  
  __hxease_Back.DEFAULT_OVERSHOOT = 1.70158;
  
  __hxease_Back.easeIn = __hxease_BackEaseIn.new(1.70158);
  
  __hxease_Back.easeInOut = __hxease_BackEaseInOut.new(1.70158);
  
  __hxease_Back.easeOut = __hxease_BackEaseOut.new(1.70158);
  
  __hxease_Linear.easeNone = __hxease_LinearEaseNone.new();
  
  __hxease_Linear.easeStep = __hxease_LinearEaseStep.new();
  
  __typedefs_Simpleterminal.apalettea = _hx_tab_array({[0]=RGBColor.new(236, 239, 244), RGBColor.new(0, 0, 0), RGBColor.new(180, 142, 173), RGBColor.new(0, 0, 0), RGBColor.new(235, 203, 139), RGBColor.new(163, 190, 140), RGBColor.new(0, 0, 0), RGBColor.new(76, 86, 106), RGBColor.new(146, 154, 170), RGBColor.new(136, 192, 208), RGBColor.new(0, 0, 0), RGBColor.new(129, 161, 193), RGBColor.new(0, 0, 0), RGBColor.new(163, 190, 140), RGBColor.new(191, 97, 106), RGBColor.new(59, 66, 82)}, 16);
  
  
end

_hx_bind = function(o,m)
  if m == nil then return nil end;
  local f;
  if o._hx__closures == nil then
    _G.rawset(o, '_hx__closures', {});
  else
    f = o._hx__closures[m];
  end
  if (f == nil) then
    f = function(...) return m(o, ...) end;
    o._hx__closures[m] = f;
  end
  return f;
end

_G.math.randomseed(_G.os.time());

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

function _hx_handle_error(obj)
  local message = tostring(obj)
  if _G.debug and _G.debug.traceback then
    -- level 2 to skip _hx_handle_error
    message = _G.debug.traceback(message, 2)
  end
  return setmetatable({}, { __tostring = function() return message end })
end

_hx_static_init();
local success, err = _G.xpcall(function() 
  Main.main();
  _hx_luv.run();
end, _hx_handle_error)
if not success then _G.error(err) end
return _hx_exports
